var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ColumnSpec.html",[0,0.533,1,0.854]],["body/interfaces/ColumnSpec.html",[0,0.863,1,1.04,2,1.202,3,0.635,4,0.896,5,0.543,6,0.313,7,0.635,8,0.896,9,1.514,10,1.597,11,1.382,12,1.603,13,2.019,14,1.603,15,2.019,16,1.831,17,1.913,18,0.442,19,0.649,20,1.387,21,1.747,22,1.297,23,1.2,24,0.767,25,0.058,26,1.157,27,1.603,28,1.202,29,1.603,30,1.603,31,1.04,32,1.387,33,1.191,34,1.319,35,0.851,36,0.737,37,0.851,38,1.387,39,1.608,40,1.135,41,1.202,42,0.982,43,0.737,44,0.982,45,0.543,46,0.982,47,0.982,48,1.135,49,1.135,50,1.135,51,1.039,52,1.603,53,1.135,54,1.387,55,1.135,56,0.737,57,0.982,58,1.859,59,0.609,60,0.851,61,1.387,62,1.603,63,1.135,64,0.635,65,0.851,66,1.135,67,1.747,68,0.982,69,1.135,70,0.851,71,1.135,72,1.202,73,1.135,74,0.737,75,0.982,76,1.135,77,0.982,78,1.394,79,0.851,80,0.982,81,0.982,82,0.982,83,0.982,84,1.387,85,1.04,86,0.982,87,1.202,88,1.387,89,0.737,90,0.649,91,0.982,92,0.982,93,0.851,94,1.04,95,1.135,96,1.135,97,1.387,98,1.135,99,0.982,100,0.034,101,0.034]],["title/components/FilterInputComponent.html",[102,1.317,103,1.53]],["body/components/FilterInputComponent.html",[3,0.417,4,0.417,5,0.357,6,0.639,8,0.417,9,0.878,18,0.491,19,0.474,20,1.541,22,0.996,23,1.188,24,0.765,25,0.058,26,0.56,28,1.719,34,0.809,45,0.56,56,1.063,59,0.206,64,1.105,67,1.864,72,1.855,85,0.484,90,0.801,100,0.041,101,0.025,102,1.977,103,2.196,104,1.598,105,1.22,106,1.22,107,1.22,108,3.79,109,3.79,110,1.22,111,1.598,112,1.916,113,2.399,114,2.399,115,2.399,116,2.399,117,3.871,118,2.399,119,1.916,120,1.916,121,2.681,122,2.681,123,1.916,124,1.084,125,1.916,126,4.831,127,2.399,128,2.399,129,2.399,130,2.399,131,2.399,132,2.681,133,2.196,134,2.399,135,1.22,136,2.913,137,2.913,138,1.916,139,1.598,140,2.366,141,2.399,142,1.916,143,2.399,144,4.193,145,1.361,146,2.399,147,3.356,148,2.399,149,1.916,150,2.962,151,3.647,152,3.356,153,3.647,154,3.647,155,1.916,156,2.962,157,2.962,158,1.916,159,2.663,160,1.527,161,1.527,162,1.527,163,2.794,164,2.399,165,1.527,166,1.527,167,3.356,168,1.527,169,2.43,170,1.527,171,1.527,172,2.399,173,3.349,174,1.527,175,1.916,176,2.681,177,2.069,178,1.904,179,2.236,180,1.527,181,2.399,182,1.527,183,1.527,184,1.527,185,1.361,186,2.366,187,0.866,188,1.018,189,1.22,190,2.366,191,1.527,192,1.527,193,2.399,194,2.399,195,1.916,196,2.399,197,0.866,198,1.018,199,2.399,200,2.399,201,2.399,202,1.916,203,1.22,204,1.598,205,1.22,206,2.681,207,1.22,208,1.22,209,0.866,210,1.22,211,1.018,212,1.22,213,1.22,214,1.22]],["title/interfaces/FilterState.html",[0,0.533,70,0.987]],["body/interfaces/FilterState.html",[0,0.873,1,0.76,2,1.228,3,0.655,4,0.916,5,0.56,6,0.323,7,0.655,8,0.916,9,1.228,10,1.417,11,1.398,12,1.171,13,1.638,14,1.171,15,1.638,16,1.855,17,1.418,18,0.452,19,0.664,21,1.013,22,1.057,23,1.205,24,0.728,25,0.058,26,1.137,27,1.171,28,0.878,29,1.171,30,1.171,31,0.76,32,1.013,33,1.145,34,1.329,35,0.878,36,0.76,37,0.878,38,1.418,39,1.771,40,1.171,41,1.228,42,1.013,43,0.76,44,1.013,45,0.56,46,1.013,47,1.013,48,1.171,49,1.171,50,1.171,51,1.057,52,1.638,53,1.171,54,1.418,55,1.171,56,0.76,57,1.013,58,2.047,59,0.615,60,0.878,61,1.418,62,1.89,63,1.171,64,0.655,65,0.878,66,1.171,67,2.024,68,1.418,69,1.638,70,1.228,71,1.638,72,1.674,73,1.171,74,0.76,75,1.013,76,1.171,77,1.013,78,1.417,79,0.878,80,1.013,81,1.013,82,1.013,83,1.013,84,1.418,85,1.063,86,1.013,87,1.228,88,1.418,89,0.76,90,0.664,91,1.013,92,1.013,93,0.878,94,1.063,95,1.171,96,1.171,97,1.418,98,1.171,99,1.013,100,0.035,101,0.035]],["title/components/PaginationComponent.html",[102,1.317,209,1.53]],["body/components/PaginationComponent.html",[3,0.363,4,0.363,5,0.311,6,0.648,8,0.93,18,0.364,19,0.425,20,1.44,22,1.047,23,0.725,24,0.775,25,0.058,26,0.725,28,1.585,34,0.738,43,0.681,45,0.502,51,0.587,54,0.908,57,1.312,59,0.179,64,1.125,65,1.334,72,0.487,74,0.857,77,0.562,78,1.842,80,1.312,81,0.562,85,1.08,89,0.681,90,0.887,100,0.023,101,0.023,102,1.872,103,0.755,104,1.432,105,1.063,106,1.063,107,1.063,111,1.432,119,1.717,120,1.717,121,2.48,122,2.48,123,1.717,124,0.99,125,1.717,133,1.22,135,1.063,136,3.293,137,2.722,138,1.717,139,2.069,140,2.16,142,1.717,145,1.22,149,1.717,155,1.717,158,1.717,159,2.712,163,2.746,169,2.27,173,3.457,177,1.933,178,2.264,179,2.428,185,1.534,186,2.16,187,0.755,188,0.887,189,1.063,190,2.722,195,1.063,197,1.933,202,1.717,203,1.063,204,2.069,205,1.063,206,2.48,207,1.063,208,1.063,209,2.067,210,1.063,211,0.887,212,2.16,213,1.063,214,1.063,215,1.063,216,1.717,217,2.15,218,3.644,219,2.15,220,2.15,221,2.15,222,2.15,223,3.105,224,4.605,225,1.717,226,3.105,227,1.432,228,2.15,229,2.15,230,1.432,231,2.15,232,2.15,233,2.15,234,2.15,235,2.704,236,2.15,237,2.15,238,2.704,239,2.704,240,2.15,241,2.15,242,3.105,243,2.15,244,2.15,245,3.644,246,3.407,247,3.407,248,2.704,249,3.407,250,3.407,251,3.407,252,3.407,253,2.704,254,2.704,255,1.331,256,1.717,257,2.48,258,2.15,259,2.15,260,1.717,261,1.331,262,1.331,263,3.105,264,1.331,265,1.331,266,1.331,267,1.063,268,1.331,269,2.15,270,1.331,271,1.331,272,2.15,273,1.331,274,2.15,275,2.15,276,3.991,277,3.644,278,3.105,279,3.105,280,2.15,281,3.105,282,2.704,283,1.331,284,1.717,285,2.15,286,2.15,287,2.15,288,2.15,289,2.15,290,2.15,291,2.15,292,2.15,293,2.15,294,1.331,295,2.15,296,1.331,297,2.15,298,2.15,299,2.15,300,2.15,301,1.331,302,2.15,303,2.15,304,2.15,305,2.15,306,1.331,307,2.15,308,3.105,309,2.15,310,1.331,311,1.331,312,1.331,313,3.644,314,1.063,315,1.331,316,2.15,317,1.331,318,1.432,319,1.331,320,1.331,321,3.105,322,2.15,323,1.331,324,1.331,325,1.331,326,2.704,327,1.331,328,1.331,329,2.15,330,1.331,331,1.331,332,2.15]],["title/interfaces/RangeState.html",[0,0.533,74,0.854]],["body/interfaces/RangeState.html",[0,0.874,1,0.763,2,1.232,3,0.658,4,0.919,5,0.563,6,0.324,7,0.658,8,0.919,9,1.232,10,1.421,11,1.331,12,1.176,13,1.644,14,1.176,15,1.644,16,1.784,17,1.422,18,0.522,19,0.666,21,1.018,22,1.059,23,1.153,24,0.729,25,0.058,26,1.153,27,1.176,28,0.882,29,1.176,30,1.176,31,0.763,32,1.018,33,1.207,34,1.33,35,0.882,36,0.763,37,0.882,38,1.422,39,1.639,40,1.176,41,1.232,42,1.018,43,0.763,44,1.018,45,0.563,46,1.018,47,1.018,48,1.176,49,1.176,50,1.176,51,1.059,52,1.644,53,1.176,54,1.639,55,1.176,56,0.763,57,1.018,58,2.051,59,0.633,60,0.882,61,1.422,62,1.644,63,1.176,64,0.658,65,0.882,66,1.176,67,1.775,68,1.018,69,1.176,70,0.882,71,1.176,72,1.232,73,1.644,74,1.066,75,1.422,76,1.644,77,1.775,78,1.756,79,1.232,80,1.422,81,1.775,82,1.018,83,1.018,84,1.422,85,1.066,86,1.018,87,1.232,88,1.422,89,0.763,90,0.666,91,1.018,92,1.018,93,0.882,94,1.066,95,1.176,96,1.176,97,1.422,98,1.176,99,1.018,100,0.035,101,0.035]],["title/interfaces/SortState.html",[0,0.533,60,0.987]],["body/interfaces/SortState.html",[0,0.874,1,0.763,2,1.232,3,0.658,4,0.919,5,0.563,6,0.324,7,0.658,8,0.919,9,1.232,10,1.421,11,1.331,12,1.176,13,1.644,14,1.176,15,1.644,16,1.857,17,1.422,18,0.453,19,0.666,21,1.018,22,1.059,23,1.185,24,0.729,25,0.058,26,1.138,27,1.176,28,0.882,29,1.176,30,1.176,31,0.763,32,1.018,33,1.147,34,1.33,35,0.882,36,0.763,37,0.882,38,1.639,39,1.639,40,1.176,41,1.538,42,1.018,43,0.763,44,1.018,45,0.563,46,1.018,47,1.018,48,1.176,49,1.176,50,1.176,51,1.059,52,1.894,53,1.176,54,1.422,55,1.176,56,0.763,57,1.018,58,2.051,59,0.633,60,1.232,61,1.775,62,1.894,63,1.644,64,0.919,65,1.232,66,2.051,67,1.775,68,1.018,69,1.176,70,0.882,71,1.176,72,1.232,73,1.176,74,0.763,75,1.018,76,1.176,77,1.018,78,1.421,79,0.882,80,1.018,81,1.018,82,1.018,83,1.018,84,1.422,85,1.066,86,1.018,87,1.232,88,1.422,89,0.763,90,0.666,91,1.018,92,1.018,93,0.882,94,1.066,95,1.176,96,1.176,97,1.422,98,1.176,99,1.018,100,0.035,101,0.035]],["title/interfaces/Table.html",[0,0.533,59,0.363]],["body/interfaces/Table.html",[0,0.869,1,0.752,2,1.22,3,0.648,4,1.051,5,0.554,6,0.319,7,0.648,8,1.051,9,1.22,10,1.409,11,1.393,12,1.159,13,1.627,14,1.159,15,1.627,16,1.778,17,1.407,18,0.448,19,0.659,20,1.407,21,1.003,22,1.051,23,1.172,24,0.752,25,0.058,26,1.197,27,1.159,28,0.869,29,1.159,30,1.159,31,0.752,32,1.003,33,1.2,34,1.326,35,0.869,36,0.752,37,0.869,38,1.407,39,1.626,40,1.159,41,1.22,42,1.003,43,0.752,44,1.003,45,0.554,46,1.003,47,1.003,48,1.159,49,1.159,50,1.159,51,1.051,52,1.627,53,1.159,54,1.407,55,1.159,56,0.752,57,1.003,58,1.879,59,0.643,60,0.869,61,1.407,62,1.627,63,1.159,64,0.648,65,0.869,66,1.159,67,1.763,68,1.003,69,1.159,70,0.869,71,1.159,72,1.22,73,1.159,74,0.752,75,1.003,76,1.159,77,1.003,78,1.409,79,0.869,80,1.003,81,1.003,82,1.003,83,1.003,84,1.626,85,1.055,86,1.003,87,1.528,88,1.407,89,0.752,90,0.659,91,1.003,92,1.003,93,0.869,94,1.322,95,1.627,96,1.627,97,1.925,98,1.627,99,1.763,100,0.035,101,0.035]],["title/injectables/TableDataService.html",[333,1.53,334,1.797]],["body/injectables/TableDataService.html",[3,0.394,4,0.779,5,0.337,6,0.596,8,1.081,10,0.839,11,0.457,18,0.194,19,0.453,20,1.673,22,1.081,23,1.133,24,0.698,25,0.057,26,1.206,31,1.03,33,0.887,34,0.394,35,1.383,36,0.457,37,0.528,43,0.457,51,0.626,56,0.457,59,0.688,64,0.887,79,1.045,90,0.643,94,0.904,97,2.14,99,0.609,100,0.034,101,0.024,111,1.527,124,0.528,132,1.152,133,2.331,139,1.527,145,1.301,159,2.462,169,1.901,175,1.152,176,1.152,177,2.247,178,2.513,179,0.961,185,2.143,187,0.818,197,2.247,198,2.738,204,1.527,225,2.279,227,2.639,230,0.961,257,1.152,267,1.831,314,1.152,318,2.738,333,1.301,334,1.527,335,1.442,336,3.538,337,1.152,338,2.292,339,2.292,340,2.292,341,4.575,342,3.017,343,1.831,344,2.292,345,2.292,346,3.251,347,2.292,348,2.292,349,2.292,350,2.292,351,2.853,352,1.831,353,2.292,354,2.853,355,3.777,356,4.11,357,2.853,358,2.853,359,3.251,360,2.292,361,2.292,362,2.292,363,2.292,364,2.292,365,1.442,366,1.442,367,3.251,368,1.442,369,2.853,370,2.292,371,1.442,372,4.507,373,3.251,374,3.547,375,3.777,376,4.575,377,3.777,378,2.292,379,1.442,380,3.251,381,3.777,382,3.547,383,1.831,384,1.831,385,3.96,386,1.831,387,2.292,388,2.292,389,2.292,390,2.292,391,2.292,392,1.442,393,2.292,394,2.292,395,2.292,396,2.292,397,2.292,398,1.442,399,2.292,400,2.292,401,3.547,402,1.442,403,2.292,404,1.831,405,1.442,406,3.547,407,1.442,408,1.442,409,1.442,410,1.442,411,2.292,412,1.442,413,1.442,414,1.442,415,1.442,416,1.442,417,1.442,418,1.442,419,1.442,420,3.547,421,1.442,422,1.442,423,1.442,424,1.442,425,1.442,426,1.442,427,1.152,428,0.818,429,1.442,430,1.442,431,1.442,432,1.442,433,1.442,434,1.442,435,2.292,436,2.292,437,1.442,438,1.442,439,1.442,440,1.442,441,1.442,442,1.442,443,1.442,444,1.442,445,1.442,446,1.152,447,1.442,448,1.442,449,1.442,450,2.853,451,1.442,452,1.442,453,1.442,454,1.442,455,1.442,456,2.292,457,2.292,458,2.853,459,1.442,460,1.442,461,1.442,462,1.442,463,1.442,464,1.442,465,1.442,466,1.442,467,1.442,468,1.442,469,1.442,470,1.442,471,1.442,472,2.292,473,1.442,474,1.442,475,1.442,476,1.442,477,1.442,478,2.292,479,1.442,480,1.442]],["title/classes/TableUtils.html",[124,0.987,428,1.53]],["body/classes/TableUtils.html",[1,0.908,3,0.527,4,0.527,5,0.451,6,0.51,8,1.035,11,1.201,16,1.609,17,1.601,18,0.386,19,0.749,20,1.446,21,0.815,22,1.26,23,0.799,24,0.745,25,0.058,26,1.078,32,1.446,33,1.035,34,0.527,35,1.719,41,1.387,43,0.908,45,0.451,56,0.908,59,0.632,61,1.949,65,1.05,68,1.601,78,1.05,79,1.483,87,1.554,89,1.201,93,1.05,94,1.509,100,0.03,101,0.03,124,0.706,145,2.15,159,1.942,163,3.129,177,1.942,178,2.408,185,1.094,197,2.15,198,1.285,227,3.248,318,2.698,342,2.291,343,2.291,384,2.291,404,1.541,428,1.627,481,1.929,482,3.027,483,1.541,484,2.867,485,4.765,486,2.867,487,2.867,488,2.867,489,2.867,490,2.867,491,1.929,492,4.244,493,1.911,494,2.867,495,2.867,496,3.423,497,3.423,498,2.867,499,2.867,500,1.929,501,3.423,502,2.867,503,2.867,504,2.867,505,2.291,506,2.867,507,2.867,508,2.867,509,3.79,510,1.929,511,2.867,512,2.867,513,2.867,514,3.79,515,2.867,516,2.867,517,2.867,518,2.867,519,1.929,520,2.867,521,1.929,522,1.929,523,3.423,524,1.929,525,1.929,526,3.423,527,1.929,528,1.929,529,2.867,530,1.929,531,1.929,532,1.929,533,1.929,534,2.867,535,1.929,536,1.929,537,2.867,538,1.929,539,1.929,540,2.867,541,1.929,542,2.867,543,4.395,544,1.929,545,4.244,546,1.929,547,3.423]],["title/coverage.html",[548,2.905]],["body/coverage.html",[0,0.979,1,1.079,5,0.795,6,0.71,7,1.378,24,0.561,25,0.056,36,1.079,59,0.569,60,1.246,70,1.246,74,1.079,100,0.044,101,0.044,102,2.247,103,1.931,108,2.719,109,2.719,110,2.719,124,1.246,133,1.931,209,1.931,211,2.268,215,2.719,260,4.031,333,1.931,334,2.268,336,2.719,337,2.719,428,1.931,482,2.719,483,2.719,548,2.719,549,2.719,550,3.404,551,3.404,552,3.404,553,3.404,554,3.404,555,3.404,556,3.404,557,3.404,558,3.404,559,3.404,560,3.404,561,3.404,562,3.404,563,4.23,564,4.603,565,3.404,566,3.404,567,3.404,568,3.404,569,3.404]],["title/dependencies.html",[570,1.816,571,2.153]],["body/dependencies.html",[25,0.057,100,0.047,101,0.047,187,2.12,188,2.49,427,2.985,571,2.49,572,3.737,573,5.295,574,3.737,575,2.985,576,3.737,577,3.737,578,4.478,579,4.478,580,3.737,581,3.737,582,3.737,583,3.737,584,3.737,585,3.737,586,3.737,587,3.737,588,3.737,589,3.737,590,3.737,591,3.737,592,3.737]],["title/miscellaneous/enumerations.html",[593,0.96,594,2.581]],["body/miscellaneous/enumerations.html",[6,0.539,7,1.094,10,1.467,16,1.467,18,0.539,25,0.053,38,1.693,39,1.693,41,1.709,42,1.693,44,1.693,45,0.936,46,1.693,47,1.693,90,0.923,100,0.049,101,0.049,593,1.693,594,3.201,595,2.67]],["title/index.html",[18,0.306,596,2.273,597,2.273]],["body/index.html",[2,1.083,9,1.083,25,0.041,31,0.937,51,0.808,59,0.398,75,1.25,100,0.041,101,0.041,216,3.09,230,2.578,284,3.09,352,2.364,383,2.364,386,2.364,446,2.364,493,2.872,549,2.364,571,2.578,575,2.364,598,2.959,599,2.959,600,2.959,601,3.869,602,2.959,603,2.959,604,2.959,605,3.869,606,4.571,607,2.959,608,2.959,609,2.959,610,4.31,611,4.866,612,2.959,613,2.959,614,3.869,615,2.959,616,4.571,617,4.31,618,5.13,619,5.084,620,4.31,621,2.959,622,2.959,623,3.869,624,2.959,625,3.869,626,2.959,627,3.869,628,3.869,629,4.31,630,3.869,631,2.959,632,2.959,633,4.571,634,2.959,635,2.959,636,2.959,637,4.571,638,2.959,639,2.959,640,3.869,641,3.869,642,4.31,643,4.31,644,4.31,645,4.866,646,2.959,647,2.959,648,2.959,649,2.959,650,2.959,651,2.959,652,2.959,653,2.959,654,2.959,655,2.959,656,3.869,657,3.869,658,2.959,659,3.869,660,2.959,661,2.959,662,2.959,663,2.959,664,2.959,665,2.959,666,2.959,667,2.959,668,2.959,669,2.959,670,2.959,671,2.959]],["title/modules.html",[672,2.905]],["body/modules.html",[25,0.05,100,0.05,101,0.05,672,3.369]],["title/overview.html",[673,2.905]],["body/overview.html",[2,1.512,25,0.05,45,1.109,100,0.05,101,0.05,104,2.752,124,1.512,256,3.3,333,2.344,673,3.3,674,4.131]],["title/properties.html",[19,0.639,570,1.816]],["body/properties.html",[19,0.828,25,0.053,100,0.05,101,0.05,493,2.788,675,4.185]],["title/miscellaneous/typealiases.html",[593,0.96,676,3.231]],["body/miscellaneous/typealiases.html",[6,0.526,7,1.067,11,1.239,18,0.526,24,0.645,25,0.048,33,1.067,51,1.067,59,0.619,82,1.652,83,1.652,84,1.652,85,1.457,86,1.652,87,1.684,88,1.943,89,1.239,90,0.91,91,1.652,92,1.652,93,1.431,94,1.457,100,0.048,101,0.048,593,1.652,595,3.065,677,3.91]],["title/miscellaneous/variables.html",[593,0.96,678,2.581]],["body/miscellaneous/variables.html",[6,0.538,7,1.091,18,0.538,23,1.088,24,0.659,25,0.053,26,0.934,31,1.266,33,1.091,36,1.476,37,1.463,64,1.091,90,0.79,100,0.049,101,0.049,112,3.193,505,3.193,593,1.689,595,2.663,678,3.193,679,3.997]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":43,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["0.0.0",{"_index":675,"title":{},"body":{"properties.html":{}}}],["0.0.0.0",{"_index":668,"title":{},"body":{"index.html":{}}}],["0.14.3",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":45,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["1/1",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":257,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["100",{"_index":260,"title":{},"body":{"components/PaginationComponent.html":{},"coverage.html":{}}}],["12.0.2",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["18.0.0",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["18.0.1",{"_index":575,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["2",{"_index":47,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["2.3.0",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":258,"title":{},"body":{"components/PaginationComponent.html":{}}}],["25",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["27/59",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":674,"title":{},"body":{"overview.html":{}}}],["3.3.1",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["31",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["4/14",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["4342",{"_index":660,"title":{},"body":{"index.html":{}}}],["45",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":256,"title":{},"body":{"components/PaginationComponent.html":{},"overview.html":{}}}],["50",{"_index":259,"title":{},"body":{"components/PaginationComponent.html":{}}}],["500",{"_index":655,"title":{},"body":{"index.html":{}}}],["6/19",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["63",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["7/11",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["__index",{"_index":37,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/variables.html":{}}}],["_categories",{"_index":144,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["_categories.indexof(categorydefaultvalue",{"_index":201,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["_currentpage",{"_index":238,"title":{},"body":{"components/PaginationComponent.html":{}}}],["_currentpage+1",{"_index":332,"title":{},"body":{"components/PaginationComponent.html":{}}}],["_totalitems",{"_index":239,"title":{},"body":{"components/PaginationComponent.html":{}}}],["a[columnname",{"_index":544,"title":{},"body":{"classes/TableUtils.html":{}}}],["accessible",{"_index":288,"title":{},"body":{"components/PaginationComponent.html":{}}}],["accessors",{"_index":158,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["actual_component",{"_index":214,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["additional",{"_index":127,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["aliases",{"_index":677,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alike",{"_index":525,"title":{},"body":{"classes/TableUtils.html":{}}}],["analysing",{"_index":502,"title":{},"body":{"classes/TableUtils.html":{}}}],["angular",{"_index":610,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":424,"title":{},"body":{"injectables/TableDataService.html":{}}}],["angular/compiler",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":187,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":188,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":374,"title":{},"body":{"injectables/TableDataService.html":{}}}],["api/file",{"_index":349,"title":{},"body":{"injectables/TableDataService.html":{}}}],["application",{"_index":657,"title":{},"body":{"index.html":{}}}],["array",{"_index":198,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["arrays",{"_index":524,"title":{},"body":{"classes/TableUtils.html":{}}}],["asc",{"_index":46,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["assignment",{"_index":601,"title":{},"body":{"index.html":{}}}],["assinment",{"_index":600,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":638,"title":{},"body":{"index.html":{}}}],["available",{"_index":383,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["aval",{"_index":543,"title":{},"body":{"classes/TableUtils.html":{}}}],["b",{"_index":542,"title":{},"body":{"classes/TableUtils.html":{}}}],["b[columnname",{"_index":546,"title":{},"body":{"classes/TableUtils.html":{}}}],["baader",{"_index":137,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["based",{"_index":56,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["being",{"_index":389,"title":{},"body":{"injectables/TableDataService.html":{}}}],["beware",{"_index":669,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":267,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["browser",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["button",{"_index":293,"title":{},"body":{"components/PaginationComponent.html":{}}}],["buttons",{"_index":287,"title":{},"body":{"components/PaginationComponent.html":{}}}],["bval",{"_index":545,"title":{},"body":{"classes/TableUtils.html":{}}}],["cache",{"_index":356,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cached",{"_index":341,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cached/overwrite",{"_index":387,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cachedresponse",{"_index":436,"title":{},"body":{"injectables/TableDataService.html":{}}}],["caching",{"_index":439,"title":{},"body":{"injectables/TableDataService.html":{}}}],["calculate",{"_index":307,"title":{},"body":{"components/PaginationComponent.html":{}}}],["categories",{"_index":117,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["category",{"_index":126,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorychange",{"_index":156,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorychanged(c",{"_index":134,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorydefaultvalue",{"_index":150,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorylabel",{"_index":151,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categoryselect",{"_index":152,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categoryselect(categories",{"_index":191,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["causes",{"_index":231,"title":{},"body":{"components/PaginationComponent.html":{}}}],["change",{"_index":277,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changed",{"_index":176,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{}}}],["changepage",{"_index":240,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changepage(direction",{"_index":272,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changes",{"_index":225,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["check",{"_index":291,"title":{},"body":{"components/PaginationComponent.html":{}}}],["class",{"_index":124,"title":{"classes/TableUtils.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":481,"title":{},"body":{"classes/TableUtils.html":{}}}],["clear",{"_index":167,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["cli",{"_index":613,"title":{},"body":{"index.html":{}}}],["client",{"_index":650,"title":{},"body":{"index.html":{}}}],["clients",{"_index":442,"title":{},"body":{"injectables/TableDataService.html":{}}}],["clone",{"_index":628,"title":{},"body":{"index.html":{}}}],["column",{"_index":16,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{}}}],["columnname",{"_index":514,"title":{},"body":{"classes/TableUtils.html":{}}}],["columns",{"_index":11,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["columns[key",{"_index":537,"title":{},"body":{"classes/TableUtils.html":{}}}],["columns[key].datatype",{"_index":540,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort",{"_index":41,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{}}}],["columnsort.asc",{"_index":517,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort.desc",{"_index":518,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort.none",{"_index":539,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnspec",{"_index":1,"title":{"interfaces/ColumnSpec.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["columnspecs",{"_index":86,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["combination",{"_index":95,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["compare",{"_index":515,"title":{},"body":{"classes/TableUtils.html":{}}}],["compares",{"_index":512,"title":{},"body":{"classes/TableUtils.html":{}}}],["compatibility",{"_index":666,"title":{},"body":{"index.html":{}}}],["compatible",{"_index":647,"title":{},"body":{"index.html":{}}}],["component",{"_index":102,"title":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":207,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["components",{"_index":104,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"overview.html":{}}}],["configured",{"_index":216,"title":{},"body":{"components/PaginationComponent.html":{},"index.html":{}}}],["confirm",{"_index":292,"title":{},"body":{"components/PaginationComponent.html":{}}}],["console.log(`cached",{"_index":459,"title":{},"body":{"injectables/TableDataService.html":{}}}],["console.log(`replacing",{"_index":475,"title":{},"body":{"injectables/TableDataService.html":{}}}],["console.log(`updated",{"_index":464,"title":{},"body":{"injectables/TableDataService.html":{}}}],["const",{"_index":35,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["constructor",{"_index":365,"title":{},"body":{"injectables/TableDataService.html":{}}}],["constructor(http",{"_index":366,"title":{},"body":{"injectables/TableDataService.html":{}}}],["constructor(private",{"_index":434,"title":{},"body":{"injectables/TableDataService.html":{}}}],["container",{"_index":619,"title":{},"body":{"index.html":{}}}],["containers",{"_index":625,"title":{},"body":{"index.html":{}}}],["containing",{"_index":299,"title":{},"body":{"components/PaginationComponent.html":{}}}],["context",{"_index":354,"title":{},"body":{"injectables/TableDataService.html":{}}}],["continue",{"_index":536,"title":{},"body":{"classes/TableUtils.html":{}}}],["copies",{"_index":388,"title":{},"body":{"injectables/TableDataService.html":{}}}],["copy",{"_index":498,"title":{},"body":{"classes/TableUtils.html":{}}}],["coverage",{"_index":548,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":112,"title":{},"body":{"components/FilterInputComponent.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":345,"title":{},"body":{"injectables/TableDataService.html":{}}}],["ctrl+shift+p",{"_index":632,"title":{},"body":{"index.html":{}}}],["currently",{"_index":30,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["cval",{"_index":547,"title":{},"body":{"classes/TableUtils.html":{}}}],["data",{"_index":26,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["data.service.ts",{"_index":337,"title":{},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["data.service.ts:116",{"_index":407,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:136",{"_index":398,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:16",{"_index":368,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:20",{"_index":421,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:21",{"_index":423,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:23",{"_index":422,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:31",{"_index":392,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:40",{"_index":371,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:51",{"_index":379,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:94",{"_index":402,"title":{},"body":{"injectables/TableDataService.html":{}}}],["datasourcechanged",{"_index":357,"title":{},"body":{"injectables/TableDataService.html":{}}}],["datatype",{"_index":17,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["default",{"_index":64,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":159,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["definition",{"_index":419,"title":{},"body":{"injectables/TableDataService.html":{}}}],["demo",{"_index":615,"title":{},"body":{"index.html":{}}}],["depend",{"_index":353,"title":{},"body":{"injectables/TableDataService.html":{}}}],["dependencies",{"_index":571,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["desc",{"_index":44,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":10,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/enumerations.html":{}}}],["describes",{"_index":83,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["describing",{"_index":507,"title":{},"body":{"classes/TableUtils.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["desired",{"_index":302,"title":{},"body":{"components/PaginationComponent.html":{}}}],["desktop",{"_index":624,"title":{},"body":{"index.html":{}}}],["details",{"_index":352,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["dev",{"_index":618,"title":{},"body":{"index.html":{}}}],["development",{"_index":644,"title":{},"body":{"index.html":{}}}],["direction",{"_index":65,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["directive",{"_index":205,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["directives",{"_index":213,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["directly",{"_index":303,"title":{},"body":{"components/PaginationComponent.html":{}}}],["display",{"_index":13,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["displayname",{"_index":21,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["docker",{"_index":620,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":549,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dom",{"_index":106,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["dropdown",{"_index":304,"title":{},"body":{"components/PaginationComponent.html":{}}}],["dynamic",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":506,"title":{},"body":{"classes/TableUtils.html":{}}}],["element",{"_index":204,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["empty",{"_index":62,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["endpoint",{"_index":375,"title":{},"body":{"injectables/TableDataService.html":{}}}],["enter",{"_index":331,"title":{},"body":{"components/PaginationComponent.html":{}}}],["entry",{"_index":505,"title":{},"body":{"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":40,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["enumerations",{"_index":594,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":431,"title":{},"body":{"injectables/TableDataService.html":{}}}],["environment.prod",{"_index":458,"title":{},"body":{"injectables/TableDataService.html":{}}}],["environments/environment",{"_index":432,"title":{},"body":{"injectables/TableDataService.html":{}}}],["event",{"_index":173,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["event.target",{"_index":194,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["eventemitter",{"_index":169,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["events",{"_index":290,"title":{},"body":{"components/PaginationComponent.html":{}}}],["example",{"_index":119,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["expects",{"_index":393,"title":{},"body":{"injectables/TableDataService.html":{}}}],["export",{"_index":34,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["extension",{"_index":626,"title":{},"body":{"index.html":{}}}],["externally",{"_index":305,"title":{},"body":{"components/PaginationComponent.html":{}}}],["false",{"_index":480,"title":{},"body":{"injectables/TableDataService.html":{}}}],["feature",{"_index":622,"title":{},"body":{"index.html":{}}}],["features",{"_index":114,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["fetch",{"_index":372,"title":{},"body":{"injectables/TableDataService.html":{}}}],["fetched",{"_index":377,"title":{},"body":{"injectables/TableDataService.html":{}}}],["fetching",{"_index":339,"title":{},"body":{"injectables/TableDataService.html":{}}}],["field",{"_index":175,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{}}}],["fields",{"_index":113,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["filter",{"_index":72,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["filterchange",{"_index":157,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filterchanged(f",{"_index":131,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filtered",{"_index":53,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["filterinputcomponent",{"_index":103,"title":{"components/FilterInputComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["filterlabel",{"_index":153,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filterstate",{"_index":70,"title":{"interfaces/FilterState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["filtervaluechanged",{"_index":146,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filtervaluechanged(event",{"_index":172,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["first",{"_index":75,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"index.html":{}}}],["flatten",{"_index":497,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattened",{"_index":492,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattenobjecttorow",{"_index":487,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattenobjecttorow(o",{"_index":490,"title":{},"body":{"classes/TableUtils.html":{}}}],["fn",{"_index":516,"title":{},"body":{"classes/TableUtils.html":{}}}],["folder",{"_index":630,"title":{},"body":{"index.html":{}}}],["follow",{"_index":642,"title":{},"body":{"index.html":{}}}],["following",{"_index":48,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["form",{"_index":503,"title":{},"body":{"classes/TableUtils.html":{}}}],["formsmodule",{"_index":140,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["forward",{"_index":661,"title":{},"body":{"index.html":{}}}],["found",{"_index":605,"title":{},"body":{"index.html":{}}}],["function",{"_index":68,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["further",{"_index":350,"title":{},"body":{"injectables/TableDataService.html":{}}}],["future",{"_index":27,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["generate",{"_index":511,"title":{},"body":{"classes/TableUtils.html":{}}}],["generated",{"_index":612,"title":{},"body":{"index.html":{}}}],["generic",{"_index":111,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["getdata",{"_index":359,"title":{},"body":{"injectables/TableDataService.html":{}}}],["getdata$(url",{"_index":370,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettable",{"_index":360,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettable$(url",{"_index":378,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettabledata",{"_index":361,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettabledata$(url",{"_index":391,"title":{},"body":{"injectables/TableDataService.html":{}}}],["getting",{"_index":596,"title":{"index.html":{}},"body":{}}],["handle",{"_index":297,"title":{},"body":{"components/PaginationComponent.html":{}}}],["header",{"_index":15,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["here",{"_index":230,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"index.html":{}}}],["host",{"_index":656,"title":{},"body":{"index.html":{}}}],["html",{"_index":190,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["htmlinputelement).value",{"_index":195,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["http",{"_index":369,"title":{},"body":{"injectables/TableDataService.html":{}}}],["http://localhost:4342",{"_index":663,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":367,"title":{},"body":{"injectables/TableDataService.html":{}}}],["i.e",{"_index":51,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["identifier",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":472,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implementation",{"_index":351,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implemented",{"_index":409,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implements",{"_index":234,"title":{},"body":{"components/PaginationComponent.html":{}}}],["import",{"_index":185,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["imports",{"_index":121,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["increase/decrease",{"_index":274,"title":{},"body":{"components/PaginationComponent.html":{}}}],["index",{"_index":18,"title":{"index.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infer",{"_index":501,"title":{},"body":{"classes/TableUtils.html":{}}}],["infercolumntypes",{"_index":488,"title":{},"body":{"classes/TableUtils.html":{}}}],["infercolumntypes(rows",{"_index":499,"title":{},"body":{"classes/TableUtils.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["injectable",{"_index":333,"title":{"injectables/TableDataService.html":{}},"body":{"injectables/TableDataService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":335,"title":{},"body":{"injectables/TableDataService.html":{}}}],["input",{"_index":28,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["input'},{'name",{"_index":208,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["input.component.css",{"_index":143,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.html",{"_index":141,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts",{"_index":110,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["input.component.ts:52",{"_index":164,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:55",{"_index":183,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:57",{"_index":160,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:58",{"_index":170,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:60",{"_index":165,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:61",{"_index":171,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:63",{"_index":166,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:64",{"_index":162,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:66",{"_index":161,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:68",{"_index":168,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:73",{"_index":174,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:82",{"_index":182,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:90",{"_index":180,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input/filter",{"_index":109,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["inputs",{"_index":149,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["inside",{"_index":651,"title":{},"body":{"index.html":{}}}],["install",{"_index":637,"title":{},"body":{"index.html":{}}}],["installed",{"_index":627,"title":{},"body":{"index.html":{}}}],["instead",{"_index":395,"title":{},"body":{"injectables/TableDataService.html":{}}}],["instructions",{"_index":643,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"index.html":{},"overview.html":{}}}],["iscached",{"_index":362,"title":{},"body":{"injectables/TableDataService.html":{}}}],["iscached(url",{"_index":397,"title":{},"body":{"injectables/TableDataService.html":{}}}],["it's",{"_index":84,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["items",{"_index":263,"title":{},"body":{"components/PaginationComponent.html":{}}}],["itemsperpage",{"_index":219,"title":{},"body":{"components/PaginationComponent.html":{}}}],["jankolkmeier.github.io/table_assignment",{"_index":609,"title":{},"body":{"index.html":{}}}],["json",{"_index":373,"title":{},"body":{"injectables/TableDataService.html":{}}}],["key",{"_index":89,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["keyboard",{"_index":289,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyboardevent",{"_index":282,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyevent",{"_index":281,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyevent.code",{"_index":329,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyof",{"_index":522,"title":{},"body":{"classes/TableUtils.html":{}}}],["legend",{"_index":203,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["length",{"_index":81,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["limit",{"_index":128,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["list",{"_index":116,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["listen",{"_index":667,"title":{},"body":{"index.html":{}}}],["live",{"_index":614,"title":{},"body":{"index.html":{}}}],["location",{"_index":445,"title":{},"body":{"injectables/TableDataService.html":{}}}],["logic",{"_index":229,"title":{},"body":{"components/PaginationComponent.html":{}}}],["look",{"_index":76,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["looked",{"_index":55,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["looking",{"_index":73,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["machine",{"_index":662,"title":{},"body":{"index.html":{}}}],["make",{"_index":284,"title":{},"body":{"components/PaginationComponent.html":{},"index.html":{}}}],["map",{"_index":420,"title":{},"body":{"injectables/TableDataService.html":{}}}],["map(response",{"_index":453,"title":{},"body":{"injectables/TableDataService.html":{}}}],["markdown",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":101,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this._totalitems",{"_index":320,"title":{},"body":{"components/PaginationComponent.html":{}}}],["math.max(1",{"_index":319,"title":{},"body":{"components/PaginationComponent.html":{}}}],["math.min(math.max(0",{"_index":323,"title":{},"body":{"components/PaginationComponent.html":{}}}],["means",{"_index":63,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["memory",{"_index":413,"title":{},"body":{"injectables/TableDataService.html":{}}}],["metadata",{"_index":135,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["methods",{"_index":145,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["miscellaneous",{"_index":593,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":535,"title":{},"body":{"classes/TableUtils.html":{}}}],["mixed",{"_index":541,"title":{},"body":{"classes/TableUtils.html":{}}}],["mode",{"_index":66,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["module",{"_index":608,"title":{},"body":{"index.html":{}}}],["modules",{"_index":672,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":416,"title":{},"body":{"injectables/TableDataService.html":{}}}],["multiple",{"_index":343,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["mydata",{"_index":226,"title":{},"body":{"components/PaginationComponent.html":{}}}],["n",{"_index":313,"title":{},"body":{"components/PaginationComponent.html":{}}}],["n='direction",{"_index":275,"title":{},"body":{"components/PaginationComponent.html":{}}}],["name",{"_index":22,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["names",{"_index":14,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["navbuttonkbd",{"_index":241,"title":{},"body":{"components/PaginationComponent.html":{}}}],["navbuttonkbd(direction",{"_index":280,"title":{},"body":{"components/PaginationComponent.html":{}}}],["need",{"_index":415,"title":{},"body":{"injectables/TableDataService.html":{}}}],["needed",{"_index":309,"title":{},"body":{"components/PaginationComponent.html":{}}}],["negative",{"_index":279,"title":{},"body":{"components/PaginationComponent.html":{}}}],["nested",{"_index":527,"title":{},"body":{"classes/TableUtils.html":{}}}],["nested[nestedkey",{"_index":532,"title":{},"body":{"classes/TableUtils.html":{}}}],["nestedkey",{"_index":529,"title":{},"body":{"classes/TableUtils.html":{}}}],["new",{"_index":133,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"coverage.html":{}}}],["newrowdata",{"_index":406,"title":{},"body":{"injectables/TableDataService.html":{}}}],["newrowdata[table_index_column_name",{"_index":474,"title":{},"body":{"injectables/TableDataService.html":{}}}],["next",{"_index":285,"title":{},"body":{"components/PaginationComponent.html":{}}}],["nextlabel",{"_index":246,"title":{},"body":{"components/PaginationComponent.html":{}}}],["ng",{"_index":652,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":242,"title":{},"body":{"components/PaginationComponent.html":{}}}],["ngx",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["node",{"_index":648,"title":{},"body":{"index.html":{}}}],["none",{"_index":42,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["note",{"_index":665,"title":{},"body":{"index.html":{}}}],["notify_changes",{"_index":456,"title":{},"body":{"injectables/TableDataService.html":{}}}],["notifying",{"_index":466,"title":{},"body":{"injectables/TableDataService.html":{}}}],["npm",{"_index":640,"title":{},"body":{"index.html":{}}}],["null",{"_index":163,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"classes/TableUtils.html":{}}}],["number",{"_index":78,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["number((event.target",{"_index":327,"title":{},"body":{"components/PaginationComponent.html":{}}}],["o",{"_index":496,"title":{},"body":{"classes/TableUtils.html":{}}}],["o['a']['b']['c",{"_index":494,"title":{},"body":{"classes/TableUtils.html":{}}}],["o['a.b.c",{"_index":495,"title":{},"body":{"classes/TableUtils.html":{}}}],["o[key",{"_index":526,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat",{"_index":520,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat[`${key}.${nestedkey",{"_index":531,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat[key",{"_index":533,"title":{},"body":{"classes/TableUtils.html":{}}}],["object",{"_index":227,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["object.keys(nested",{"_index":530,"title":{},"body":{"classes/TableUtils.html":{}}}],["object.keys(o",{"_index":521,"title":{},"body":{"classes/TableUtils.html":{}}}],["object.keys(table.spec).length",{"_index":460,"title":{},"body":{"injectables/TableDataService.html":{}}}],["objects",{"_index":404,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["observable",{"_index":376,"title":{},"body":{"injectables/TableDataService.html":{}}}],["of(cachedresponse",{"_index":438,"title":{},"body":{"injectables/TableDataService.html":{}}}],["old",{"_index":477,"title":{},"body":{"injectables/TableDataService.html":{}}}],["once",{"_index":664,"title":{},"body":{"index.html":{}}}],["ongoing",{"_index":440,"title":{},"body":{"injectables/TableDataService.html":{}}}],["ongoingrequest",{"_index":450,"title":{},"body":{"injectables/TableDataService.html":{}}}],["ongoingrequests",{"_index":358,"title":{},"body":{"injectables/TableDataService.html":{}}}],["oninit",{"_index":235,"title":{},"body":{"components/PaginationComponent.html":{}}}],["open",{"_index":629,"title":{},"body":{"index.html":{}}}],["operation",{"_index":412,"title":{},"body":{"injectables/TableDataService.html":{}}}],["optional",{"_index":20,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["optionally",{"_index":96,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["otherwise",{"_index":396,"title":{},"body":{"injectables/TableDataService.html":{}}}],["output",{"_index":186,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["outputs",{"_index":155,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["outside",{"_index":671,"title":{},"body":{"index.html":{}}}],["overview",{"_index":673,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":570,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":224,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagechanged",{"_index":253,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagechanges",{"_index":221,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemoptions",{"_index":247,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitems",{"_index":248,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschange",{"_index":254,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschanged",{"_index":243,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschanged(event",{"_index":295,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemslabel",{"_index":249,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagelabel",{"_index":250,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pages",{"_index":276,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagination",{"_index":57,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["pagination'},{'name",{"_index":210,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["pagination.component.css",{"_index":237,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagination.component.html",{"_index":236,"title":{},"body":{"components/PaginationComponent.html":{}}}],["paginationcomponent",{"_index":209,"title":{"components/PaginationComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["paginator",{"_index":233,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pairs",{"_index":91,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["param",{"_index":197,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["parameters",{"_index":177,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["per",{"_index":298,"title":{},"body":{"components/PaginationComponent.html":{}}}],["placeholder",{"_index":347,"title":{},"body":{"injectables/TableDataService.html":{}}}],["poll",{"_index":654,"title":{},"body":{"index.html":{}}}],["port",{"_index":659,"title":{},"body":{"index.html":{}}}],["positive",{"_index":278,"title":{},"body":{"components/PaginationComponent.html":{}}}],["possible",{"_index":92,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["preferred",{"_index":12,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["press",{"_index":631,"title":{},"body":{"index.html":{}}}],["prev",{"_index":286,"title":{},"body":{"components/PaginationComponent.html":{}}}],["previouslabel",{"_index":251,"title":{},"body":{"components/PaginationComponent.html":{}}}],["previously",{"_index":465,"title":{},"body":{"injectables/TableDataService.html":{}}}],["primeflex",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":355,"title":{},"body":{"injectables/TableDataService.html":{}}}],["process",{"_index":380,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processed",{"_index":390,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processing",{"_index":340,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processtabledata",{"_index":363,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processtabledata(raw",{"_index":400,"title":{},"body":{"injectables/TableDataService.html":{}}}],["products",{"_index":129,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["programming",{"_index":599,"title":{},"body":{"index.html":{}}}],["project",{"_index":611,"title":{},"body":{"index.html":{}}}],["proper",{"_index":414,"title":{},"body":{"injectables/TableDataService.html":{}}}],["properly",{"_index":417,"title":{},"body":{"injectables/TableDataService.html":{}}}],["properties",{"_index":19,"title":{"properties.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"properties.html":{}}}],["property",{"_index":32,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["provide",{"_index":115,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["provided",{"_index":232,"title":{},"body":{"components/PaginationComponent.html":{}}}],["providedin",{"_index":433,"title":{},"body":{"injectables/TableDataService.html":{}}}],["public/docs/description.md",{"_index":603,"title":{},"body":{"index.html":{}}}],["public/docs/report.md",{"_index":607,"title":{},"body":{"index.html":{}}}],["r[table_index_column_name",{"_index":473,"title":{},"body":{"injectables/TableDataService.html":{}}}],["range",{"_index":54,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["rangestate",{"_index":74,"title":{"interfaces/RangeState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["raw",{"_index":403,"title":{},"body":{"injectables/TableDataService.html":{}}}],["raw.map(tableutils.flattenobjecttorow",{"_index":470,"title":{},"body":{"injectables/TableDataService.html":{}}}],["rebuild",{"_index":634,"title":{},"body":{"index.html":{}}}],["record",{"_index":88,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["records",{"_index":394,"title":{},"body":{"injectables/TableDataService.html":{}}}],["reopen",{"_index":635,"title":{},"body":{"index.html":{}}}],["replace",{"_index":411,"title":{},"body":{"injectables/TableDataService.html":{}}}],["replaceindex",{"_index":476,"title":{},"body":{"injectables/TableDataService.html":{}}}],["report",{"_index":604,"title":{},"body":{"index.html":{}}}],["represent",{"_index":49,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["represents",{"_index":58,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["request",{"_index":385,"title":{},"body":{"injectables/TableDataService.html":{}}}],["requesting",{"_index":444,"title":{},"body":{"injectables/TableDataService.html":{}}}],["resetfilter",{"_index":147,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["resetlabel",{"_index":154,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["response",{"_index":381,"title":{},"body":{"injectables/TableDataService.html":{}}}],["rest",{"_index":418,"title":{},"body":{"injectables/TableDataService.html":{}}}],["result",{"_index":384,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["results",{"_index":100,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":318,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["returns",{"_index":178,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["reusable",{"_index":484,"title":{},"body":{"classes/TableUtils.html":{}}}],["root",{"_index":382,"title":{},"body":{"injectables/TableDataService.html":{}}}],["row",{"_index":33,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["row[key",{"_index":534,"title":{},"body":{"classes/TableUtils.html":{}}}],["rows",{"_index":79,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["run",{"_index":633,"title":{},"body":{"index.html":{}}}],["running",{"_index":616,"title":{},"body":{"index.html":{}}}],["runs",{"_index":639,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":427,"title":{},"body":{"injectables/TableDataService.html":{},"dependencies.html":{}}}],["same",{"_index":346,"title":{},"body":{"injectables/TableDataService.html":{}}}],["save",{"_index":408,"title":{},"body":{"injectables/TableDataService.html":{}}}],["savetablechages",{"_index":364,"title":{},"body":{"injectables/TableDataService.html":{}}}],["savetablechages(src",{"_index":405,"title":{},"body":{"injectables/TableDataService.html":{}}}],["saving",{"_index":348,"title":{},"body":{"injectables/TableDataService.html":{}}}],["search",{"_index":67,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["see",{"_index":602,"title":{},"body":{"index.html":{}}}],["select",{"_index":118,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selected",{"_index":223,"title":{},"body":{"components/PaginationComponent.html":{}}}],["selectedcategorychanged",{"_index":148,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selectedcategorychanged(event",{"_index":181,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selector",{"_index":136,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["serve",{"_index":653,"title":{},"body":{"index.html":{}}}],["server",{"_index":645,"title":{},"body":{"index.html":{}}}],["service",{"_index":338,"title":{},"body":{"injectables/TableDataService.html":{}}}],["set",{"_index":85,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["setcategoryselect(categories",{"_index":184,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["setpage",{"_index":244,"title":{},"body":{"components/PaginationComponent.html":{}}}],["setpage(page",{"_index":300,"title":{},"body":{"components/PaginationComponent.html":{}}}],["setrage(range",{"_index":228,"title":{},"body":{"components/PaginationComponent.html":{}}}],["setting",{"_index":217,"title":{},"body":{"components/PaginationComponent.html":{}}}],["settotalitems(n",{"_index":312,"title":{},"body":{"components/PaginationComponent.html":{}}}],["share",{"_index":447,"title":{},"body":{"injectables/TableDataService.html":{}}}],["shared/table",{"_index":429,"title":{},"body":{"injectables/TableDataService.html":{}}}],["shared/table.model",{"_index":314,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["sharereplay",{"_index":425,"title":{},"body":{"injectables/TableDataService.html":{}}}],["sharereplay(1",{"_index":468,"title":{},"body":{"injectables/TableDataService.html":{}}}],["show",{"_index":80,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["showpageitemsselection",{"_index":252,"title":{},"body":{"components/PaginationComponent.html":{}}}],["simple",{"_index":410,"title":{},"body":{"injectables/TableDataService.html":{}}}],["singe",{"_index":449,"title":{},"body":{"injectables/TableDataService.html":{}}}],["sort",{"_index":61,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["sorted",{"_index":52,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["sorting",{"_index":38,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["sortmode",{"_index":509,"title":{},"body":{"classes/TableUtils.html":{}}}],["sortstate",{"_index":60,"title":{"interfaces/SortState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["sorttablefn",{"_index":489,"title":{},"body":{"classes/TableUtils.html":{}}}],["sorttablefn(columnname",{"_index":508,"title":{},"body":{"classes/TableUtils.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["space",{"_index":330,"title":{},"body":{"components/PaginationComponent.html":{}}}],["spec",{"_index":99,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{}}}],["src",{"_index":401,"title":{},"body":{"injectables/TableDataService.html":{}}}],["src/.../table.model.ts",{"_index":595,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/baader",{"_index":6,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":138,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["start",{"_index":77,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["started",{"_index":597,"title":{"index.html":{}},"body":{}}],["state",{"_index":39,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["statements",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":485,"title":{},"body":{"classes/TableUtils.html":{}}}],["still",{"_index":386,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["stored",{"_index":98,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["string",{"_index":23,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":142,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["subset",{"_index":504,"title":{},"body":{"classes/TableUtils.html":{}}}],["such",{"_index":342,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["sure",{"_index":623,"title":{},"body":{"index.html":{}}}],["table",{"_index":59,"title":{"interfaces/Table.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["table!.data[replaceindex",{"_index":478,"title":{},"body":{"injectables/TableDataService.html":{}}}],["table.data.length",{"_index":461,"title":{},"body":{"injectables/TableDataService.html":{}}}],["table.model",{"_index":519,"title":{},"body":{"classes/TableUtils.html":{}}}],["table/components/filter",{"_index":108,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["table/components/pagination/pagination.component.ts",{"_index":215,"title":{},"body":{"components/PaginationComponent.html":{},"coverage.html":{}}}],["table/components/pagination/pagination.component.ts:107",{"_index":296,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:118",{"_index":283,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:44",{"_index":262,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:46",{"_index":271,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:49",{"_index":261,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:52",{"_index":268,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:55",{"_index":269,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:59",{"_index":270,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:61",{"_index":265,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:62",{"_index":266,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:63",{"_index":255,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:64",{"_index":264,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:66",{"_index":311,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:67",{"_index":310,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:69",{"_index":294,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:77",{"_index":306,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:87",{"_index":301,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:99",{"_index":273,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/table",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["table/services/table",{"_index":336,"title":{},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["table/shared/table",{"_index":482,"title":{},"body":{"classes/TableUtils.html":{},"coverage.html":{}}}],["table/shared/table.model.ts",{"_index":7,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["table_index_column_name",{"_index":36,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tableassignment",{"_index":598,"title":{},"body":{"index.html":{}}}],["tabledataservice",{"_index":334,"title":{"injectables/TableDataService.html":{}},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["tablerow",{"_index":94,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["tablerows",{"_index":513,"title":{},"body":{"classes/TableUtils.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["tablespec",{"_index":87,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["tablespect",{"_index":82,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["tableutils",{"_index":428,"title":{"classes/TableUtils.html":{}},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["tableutils.flattenobjecttorow(o[key",{"_index":528,"title":{},"body":{"classes/TableUtils.html":{}}}],["tableutils.infercolumntypes(data.slice(0",{"_index":471,"title":{},"body":{"injectables/TableDataService.html":{}}}],["tableview",{"_index":69,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["tableviewcomponent",{"_index":211,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["tableviews",{"_index":443,"title":{},"body":{"injectables/TableDataService.html":{}}}],["take",{"_index":636,"title":{},"body":{"index.html":{}}}],["tap",{"_index":426,"title":{},"body":{"injectables/TableDataService.html":{}}}],["tap(table",{"_index":455,"title":{},"body":{"injectables/TableDataService.html":{}}}],["template",{"_index":105,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["templateurl",{"_index":122,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["terminal",{"_index":641,"title":{},"body":{"index.html":{}}}],["this._categories",{"_index":192,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this._currentpage",{"_index":322,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this._totalitems",{"_index":316,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.cache.get(url",{"_index":437,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.cache.has(url",{"_index":457,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.cache.set(url",{"_index":462,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.category",{"_index":199,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.categorychange.emit(this.category",{"_index":200,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.datasourcechanged.emit(src",{"_index":479,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.datasourcechanged.emit(url",{"_index":467,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.filter",{"_index":193,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.filterchange.emit(this.filter",{"_index":196,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.gettabledata$(url).pipe",{"_index":452,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.http.get(url",{"_index":435,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.delete(url",{"_index":463,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.get(url",{"_index":451,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.set(url",{"_index":469,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.pagechanged.emit",{"_index":325,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.pageitems",{"_index":321,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.pageitemschange.emit(this.pageitems",{"_index":328,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.processtabledata(response",{"_index":454,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.setpage(0",{"_index":317,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.setpage(this._currentpage",{"_index":326,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.totalpages",{"_index":324,"title":{},"body":{"components/PaginationComponent.html":{}}}],["through",{"_index":71,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["time",{"_index":446,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["total",{"_index":308,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalitems",{"_index":218,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalitems(n",{"_index":315,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalpages",{"_index":245,"title":{},"body":{"components/PaginationComponent.html":{}}}],["track",{"_index":202,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["tracking",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":107,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["triggers",{"_index":220,"title":{},"body":{"components/PaginationComponent.html":{}}}],["true",{"_index":139,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["tslib",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":441,"title":{},"body":{"injectables/TableDataService.html":{}}}],["type",{"_index":24,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":676,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":523,"title":{},"body":{"classes/TableUtils.html":{}}}],["types",{"_index":93,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["typescript",{"_index":189,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["undefined",{"_index":538,"title":{},"body":{"classes/TableUtils.html":{}}}],["under",{"_index":606,"title":{},"body":{"index.html":{}}}],["update",{"_index":132,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{}}}],["url",{"_index":97,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{}}}],["use",{"_index":31,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":9,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"index.html":{}}}],["users",{"_index":130,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["using",{"_index":658,"title":{},"body":{"index.html":{}}}],["utils",{"_index":430,"title":{},"body":{"injectables/TableDataService.html":{}}}],["utils.ts",{"_index":483,"title":{},"body":{"classes/TableUtils.html":{},"coverage.html":{}}}],["utils.ts:15",{"_index":491,"title":{},"body":{"classes/TableUtils.html":{}}}],["utils.ts:37",{"_index":500,"title":{},"body":{"classes/TableUtils.html":{}}}],["utils.ts:67",{"_index":510,"title":{},"body":{"classes/TableUtils.html":{}}}],["v18",{"_index":649,"title":{},"body":{"index.html":{}}}],["validation",{"_index":29,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["value",{"_index":90,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":206,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["variable",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":678,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":493,"title":{},"body":{"classes/TableUtils.html":{},"index.html":{},"properties.html":{}}}],["view",{"_index":212,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["view.component.ts",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["view/table",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["viewed",{"_index":50,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["views",{"_index":344,"title":{},"body":{"injectables/TableDataService.html":{}}}],["void",{"_index":179,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["vscode",{"_index":617,"title":{},"body":{"index.html":{}}}],["vscode's",{"_index":621,"title":{},"body":{"index.html":{}}}],["wait",{"_index":448,"title":{},"body":{"injectables/TableDataService.html":{}}}],["whenever",{"_index":222,"title":{},"body":{"components/PaginationComponent.html":{}}}],["without",{"_index":646,"title":{},"body":{"index.html":{}}}],["working",{"_index":486,"title":{},"body":{"classes/TableUtils.html":{}}}],["yes",{"_index":399,"title":{},"body":{"injectables/TableDataService.html":{}}}],["you're",{"_index":670,"title":{},"body":{"index.html":{}}}],["your.component.html",{"_index":123,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["your.component.ts",{"_index":120,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["yourcomponent",{"_index":125,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["zone.js",{"_index":591,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ColumnSpec.html":{"url":"interfaces/ColumnSpec.html","title":"interface - ColumnSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ColumnSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dataType\n                                        \n                                \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data type of the column data. May be used in the future for input validation. Currently not in use.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name to display in the header\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The property name of the row\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FilterInputComponent.html":{"url":"components/FilterInputComponent.html","title":"component - FilterInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FilterInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/baader-table/components/filter-input/filter-input.component.ts\n\n\n\n    \n        Description\n    \n    \n        A generic component that can be used to create filter input fields.\nOptional features are:\n\nProvide a list of categories to select from for the filter\n\nExample :// your.component.ts\n\n@Component({\n  // ...\n  imports: [FilterInputComponent],\n  templateUrl: './your.component.html',\n  // ...\n})\nexport class YourComponent {\n  filter: string = \"\"; // Search string to filter data on\n  category: string = \"\"; // Additional category to limit search to\n  categories: string[] = [ \"products\", \"users\" ];\n\n  filterChanged(f : string) {\n    // update search results based on new filter string\n  }\n\n  categoryChanged(c : string) {\n    // update search results based on new category\n  }\n}Example :\n    \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                baader-filter-input\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./filter-input.component.html\n            \n\n\n\n            \n                styleUrl\n                ./filter-input.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _categories\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filterValueChanged\n                            \n                            \n                                resetFilter\n                            \n                            \n                                selectedCategoryChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                categoryDefaultValue\n                            \n                            \n                                categoryLabel\n                            \n                            \n                                categorySelect\n                            \n                            \n                                filter\n                            \n                            \n                                filterLabel\n                            \n                            \n                                resetLabel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                categoryChange\n                            \n                            \n                                filterChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    categorySelect\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        category\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:57\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        categoryDefaultValue\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:66\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        categoryLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"In Category:\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:64\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        categorySelect\n                    \n                \n                \n                    \n                        Type :     [] | null\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:52\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filter\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:60\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filterLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Search:\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resetLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Clear\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:68\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        categoryChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:58\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filterChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:61\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        filterValueChanged\n                        \n                    \n                \n            \n            \n                \nfilterValueChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Input field for filter string changed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetFilter\n                        \n                    \n                \n            \n            \n                \nresetFilter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Clear all filter parameters\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedCategoryChanged\n                        \n                    \n                \n            \n            \n                \nselectedCategoryChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Which category to filter on changed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:55\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        categorySelect\n                    \n                \n\n\n                \n                    \n                        setcategorySelect(categories: string[] | null)\n                    \n                \n                            \n                                \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:52\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            categories\n                                                    \n                                                            \n                                                                        string[] | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n\n/**\n * A generic component that can be used to create filter input fields.\n * Optional features are:\n *  - Provide a list of categories to select from for the filter\n * \n * ```typescript\n * // your.component.ts\n * \n * @Component({\n *   // ...\n *   imports: [FilterInputComponent],\n *   templateUrl: './your.component.html',\n *   // ...\n * })\n * export class YourComponent {\n *   filter: string = \"\"; // Search string to filter data on\n *   category: string = \"\"; // Additional category to limit search to\n *   categories: string[] = [ \"products\", \"users\" ];\n *   \n *   filterChanged(f : string) {\n *     // update search results based on new filter string\n *   }\n * \n *   categoryChanged(c : string) {\n *     // update search results based on new category\n *   }\n * }\n * ```\n * \n * ```html\n * \n *     \n * \n * ```\n */\n@Component({\n  selector: 'baader-filter-input',\n  standalone: true,\n  imports: [FormsModule],\n  templateUrl: './filter-input.component.html',\n  styleUrl: './filter-input.component.css'\n})\nexport class FilterInputComponent {\n\n  @Input()\n  set categorySelect(categories: string[] | null) {\n    this._categories = categories;\n  }\n  _categories: string[] | null = null;\n\n  @Input() category = \"\";\n  @Output() categoryChange = new EventEmitter();\n\n  @Input() filter = \"\";\n  @Output() filterChange = new EventEmitter();\n\n  @Input() filterLabel = \"Search:\";\n  @Input() categoryLabel = \"In Category:\";\n\n  @Input() categoryDefaultValue = \"\";\n\n  @Input() resetLabel = \"Clear\";\n\n  /**\n   * Input field for filter string changed\n   */\n  filterValueChanged(event: Event) {\n    this.filter = (event.target as HTMLInputElement).value;\n    this.filterChange.emit(this.filter);\n  }\n\n  /**\n   * Which category to filter on changed \n   * @param index index of the _categories array\n   */\n  selectedCategoryChanged(event: Event) {\n    this.category = (event.target as HTMLInputElement).value;\n    this.categoryChange.emit(this.category);\n  }\n\n  /**\n   * Clear all filter parameters\n   */\n  resetFilter() {\n    this.category = \"\";\n    this.filter = \"\";\n    this.categoryChange.emit(this.category);\n    this.filterChange.emit(this.filter);\n  }\n\n}\n\n    \n\n    \n        \n    \n        {{filterLabel}}\n    \n    \n        \n    \n    @if (_categories) {\n    \n        \n            {{categoryLabel}}\n        \n        \n            \n                @if (_categories.indexOf(categoryDefaultValue) === -1) {\n                \n                }\n                @for (category of _categories; track $index) {\n                {{category}}\n                }\n            \n        \n    \n    }\n    \n        {{resetLabel}}\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{filterLabel}}                        @if (_categories) {                        {{categoryLabel}}                                            @if (_categories.indexOf(categoryDefaultValue) === -1) {                                }                @for (category of _categories; track $index) {                {{category}}                }                            }            {{resetLabel}}    '\n    var COMPONENTS = [{'name': 'FilterInputComponent', 'selector': 'baader-filter-input'},{'name': 'PaginationComponent', 'selector': 'baader-pagination'},{'name': 'TableViewComponent', 'selector': 'baader-table-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FilterInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterState.html":{"url":"interfaces/FilterState.html","title":"interface - FilterState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FilterState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the search function state of a TableView\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            filter\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The column to search in (search through all columns if empty string)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filter:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The search string to filter on.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PaginationComponent.html":{"url":"components/PaginationComponent.html","title":"component - PaginationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PaginationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/baader-table/components/pagination/pagination.component.ts\n\n\n\n    \n        Description\n    \n    \n        Generic Pagination component.\nConfigured by setting totalItems and itemsPerPage.\nTriggers pageChanges event whenever the selected page changes.\nExample :// your.component.ts\n\n@Component({\n  // ...\n  imports: [PaginationComponent],\n  templateUrl: './your.component.html',\n  // ...\n})\nexport class YourComponent {\n  mydata : object[] = [];\n\n  setRage(range : RangeState) {\n    // Your logic here that causes the view of mydata to show only the range of data provided by the paginator.\n  }\n}Example :\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                baader-pagination\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./pagination.component.html\n            \n\n\n\n            \n                styleUrl\n                ./pagination.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _currentPage\n                            \n                            \n                                _totalItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePage\n                            \n                            \n                                navButtonKbd\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                pageItemsChanged\n                            \n                            \n                                setPage\n                            \n                            \n                                totalPages\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                nextLabel\n                            \n                            \n                                pageItemOptions\n                            \n                            \n                                pageItems\n                            \n                            \n                                pageItemsLabel\n                            \n                            \n                                pageLabel\n                            \n                            \n                                previousLabel\n                            \n                            \n                                showPageItemsSelection\n                            \n                            \n                                totalItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                pageChanged\n                            \n                            \n                                pageItemsChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    totalItems\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        nextLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"→\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemOptions\n                    \n                \n                \n                    \n                        Type :     {}\n\n                    \n                \n                \n                    \n                        Default value : [5, 10, 20, 50, 100]\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItems\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemsLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Show Items\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:64\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Page\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        previousLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"←\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showPageItemsSelection\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:52\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        totalItems\n                    \n                \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:55\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        pageChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:59\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemsChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:46\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changePage\n                        \n                    \n                \n            \n            \n                \nchangePage(direction: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:99\n                        \n                    \n\n\n            \n                \n                        Increase/decrease page by n='direction' pages\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    number of pages to change (positive or negative)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navButtonKbd\n                        \n                    \n                \n            \n            \n                \nnavButtonKbd(direction: number, keyEvent: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Make the \"Next\" and \"Prev\" buttons accessible by keyboard events.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    number of pages to change (positive or negative)\n\n                                            \n                                        \n                                        \n                                                keyEvent\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    check if key event is a \"confirm-like\" button.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageItemsChanged\n                        \n                    \n                \n            \n            \n                \npageItemsChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:107\n                        \n                    \n\n\n            \n                \n                        Handle the number of items per page selector value change.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Event from HTML Input element (selector) containing selected value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPage\n                        \n                    \n                \n            \n            \n                \nsetPage(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:87\n                        \n                    \n\n\n            \n                \n                        Set desired page directly (i.e. from dropdown or externally)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    page to set to\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPages\n                        \n                    \n                \n            \n            \n                \ntotalPages()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Calculate total number of pages\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                total number needed for all data\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _currentPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/pagination/pagination.component.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _totalItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/pagination/pagination.component.ts:66\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        totalItems\n                    \n                \n\n\n                \n                    \n                        settotalItems(n: number | null)\n                    \n                \n                            \n                                \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:55\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            n\n                                                    \n                                                            \n                                                                        number | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RangeState } from '../../shared/table.model';\n\n/**\n * Generic Pagination component.\n * Configured by setting totalItems and itemsPerPage.\n * Triggers pageChanges event whenever the selected page changes.\n * \n * ```typescript\n * // your.component.ts\n * \n * @Component({\n *   // ...\n *   imports: [PaginationComponent],\n *   templateUrl: './your.component.html',\n *   // ...\n * })\n * export class YourComponent {\n *   mydata : object[] = [];\n * \n *   setRage(range : RangeState) {\n *     // Your logic here that causes the view of mydata to show only the range of data provided by the paginator.\n *   }\n * }\n * ```\n * \n * ```html\n * \n * \n * \n * ```\n */\n@Component({\n  selector: 'baader-pagination',\n  standalone: true,\n  imports: [FormsModule],\n  templateUrl: './pagination.component.html',\n  styleUrl: './pagination.component.css'\n})\nexport class PaginationComponent implements OnInit {\n\n  @Input()\n  pageItems = 10;\n\n  @Output() pageItemsChange = new EventEmitter();\n\n  @Input()\n  pageItemOptions = [5, 10, 20, 50, 100];\n\n  @Input()\n  showPageItemsSelection = true;\n\n  @Input()\n  set totalItems(n: number | null) {\n    this._totalItems = n;\n  }\n\n  @Output() pageChanged = new EventEmitter();\n\n  @Input() pageLabel = \"Page\";\n  @Input() previousLabel = \"←\";\n  @Input() nextLabel = \"→\";\n  @Input() pageItemsLabel = \"Show Items\";\n\n  _totalItems: number | null = null;\n  _currentPage = 0;\n\n  ngOnInit() {\n    this.setPage(0);\n  }\n\n  /**\n   * Calculate total number of pages\n   * @returns total number needed for all data\n   */\n  totalPages(): number {\n    if (this._totalItems === null)\n      return 1;\n    return Math.max(1, Math.ceil(this._totalItems / this.pageItems));\n  }\n\n  /**\n   * Set desired page directly (i.e. from dropdown or externally)\n   * @param page page to set to\n   */\n  setPage(page: number) {\n    this._currentPage = Math.min(Math.max(0, page), this.totalPages() - 1);\n    this.pageChanged.emit({\n      start: this._currentPage * this.pageItems,\n      length: this.pageItems\n    });\n  }\n\n  /**\n   * Increase/decrease page by n='direction' pages\n   * @param direction number of pages to change (positive or negative)\n   */\n  changePage(direction: number) {\n    this.setPage(this._currentPage + direction);\n  }\n\n  /**\n   * Handle the number of items per page selector value change.\n   * @param event Event from HTML Input element (selector) containing selected value\n   */\n  pageItemsChanged(event: Event) {\n    this.pageItems = Number((event.target as HTMLInputElement).value);\n    this.pageItemsChange.emit(this.pageItems);\n    this.setPage(this._currentPage);\n  }\n\n  /**\n   * Make the \"Next\" and \"Prev\" buttons accessible by keyboard events.\n   * @param direction number of pages to change (positive or negative)\n   * @param keyEvent check if key event is a \"confirm-like\" button.\n   */\n  navButtonKbd(direction: number, keyEvent: KeyboardEvent) {\n    if (keyEvent.code === \"Space\" || keyEvent.code === \"Enter\") {\n      this.setPage(this._currentPage + direction);\n    }\n  }\n}\n\n    \n\n    \n        \n    \n        \n        {{previousLabel}}\n        {{pageLabel}} {{_currentPage+1}} / {{totalPages()}}\n        {{nextLabel}}\n        @if (showPageItemsSelection) {\n        \n            \n                {{pageItemsLabel}}\n            \n            \n                @for (n of pageItemOptions; track $index) {\n                {{n}}\n                }\n            \n        \n        }\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{previousLabel}}        {{pageLabel}} {{_currentPage+1}} / {{totalPages()}}        {{nextLabel}}        @if (showPageItemsSelection) {                                    {{pageItemsLabel}}                                        @for (n of pageItemOptions; track $index) {                {{n}}                }                            }    '\n    var COMPONENTS = [{'name': 'FilterInputComponent', 'selector': 'baader-filter-input'},{'name': 'PaginationComponent', 'selector': 'baader-pagination'},{'name': 'TableViewComponent', 'selector': 'baader-table-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PaginationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RangeState.html":{"url":"interfaces/RangeState.html","title":"interface - RangeState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RangeState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the range of data a table is looking at.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            start\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The number of rows to show after.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The index of the first row to look at.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SortState.html":{"url":"interfaces/SortState.html","title":"interface - SortState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SortState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents how a table is sorted.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The column to sort by (empty string means default sorting)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:         ColumnSort\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColumnSort\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The direction to sort in.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Table.html":{"url":"interfaces/Table.html","title":"interface - Table","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Table\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                A Table is the combination of row data data and description of it's columns.\nOptionally, the data source url can be stored.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            spec\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         TableRow[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TableRow[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        spec\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        spec:         TableSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TableSpec\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TableDataService.html":{"url":"injectables/TableDataService.html","title":"injectable - TableDataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TableDataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/services/table-data.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for fetching & processing table data.\nTable data is cached, such that multiple table views can be created of the same data.\nThere is a placeholder for saving changes to API/File. Further implementation details would depend on the context.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                dataSourceChanged\n                            \n                            \n                                    Private\n                                ongoingRequests\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData$\n                            \n                            \n                                getTable$\n                            \n                            \n                                getTableData$\n                            \n                            \n                                isCached\n                            \n                            \n                                processTableData\n                            \n                            \n                                saveTableChages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/baader-table/services/table-data.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData$\n                        \n                    \n                \n            \n            \n                \ngetData$(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Fetch json data from some url (such as an API endpoint)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL to fetch data from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of the fetched data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTable$\n                        \n                    \n                \n            \n            \n                \ngetTable$(url: string, cached)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Fetch data from an endpoint with table data and process it.\nCache the results.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    the url to fetch data from. Response data must be a table-like response with an array as the root object\n\n                                            \n                                        \n                                        \n                                                cached\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    if available, use a cached result (request will still be cached/overwrite cached copies)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable of the table being fetched and processed\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTableData$\n                        \n                    \n                \n            \n            \n                \ngetTableData$(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Fetch json table data from some url (such as an API endpoint)\nExpects the root element of the response to be an array-of-records-type (use getData$() instead otherwise)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL to fetch data from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of the fetched table rows.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCached\n                        \n                    \n                \n            \n            \n                \nisCached(url?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Is a table data of this url in the cache.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    table data url\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        processTableData\n                        \n                    \n                \n            \n            \n                \nprocessTableData(raw: object[], src?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Process generic array object to Table data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                raw\n                                            \n                                                        object[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    array of objects\n\n                                            \n                                        \n                                        \n                                                src\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    string to describe the source (url) of the Table\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Table\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveTableChages\n                        \n                    \n                \n            \n            \n                \nsaveTableChages(src: string, newRowData: TableRow)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Save a changed row: implemented here as a simple replace operation on the cached memory.\nFor a proper implementation this would need more context to properly update the data (i.e. a REST API definition).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                src\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the url of the table in cache\n\n                                            \n                                        \n                                        \n                                                newRowData\n                                            \n                                                            TableRow\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the new row data (will replace the row based on the __index field in newRowData)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataSourceChanged\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new EventEmitter()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ongoingRequests\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map>()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map, of, shareReplay, tap } from 'rxjs';\nimport { TABLE_INDEX_COLUMN_NAME, Table, TableRow } from '../shared/table.model';\nimport { TableUtils } from '../shared/table-utils';\nimport { environment } from '../../../environments/environment';\n\n/**\n * Service for fetching & processing table data. \n * Table data is cached, such that multiple table views can be created of the same data.\n * There is a placeholder for saving changes to API/File. Further implementation details would depend on the context.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableDataService {\n\n  constructor(private http: HttpClient) { }\n\n  private cache = new Map();\n  private ongoingRequests = new Map>();\n\n  dataSourceChanged = new EventEmitter();\n\n  /**\n   * Fetch json table data from some url (such as an API endpoint)\n   * Expects the root element of the response to be an array-of-records-type (use getData$() instead otherwise)\n   * @param url The URL to fetch data from.\n   * @returns An Observable of the fetched table rows.\n   */\n  getTableData$(url: string): Observable {\n    return this.http.get(url);\n  }\n\n  /**\n   * Fetch json data from some url (such as an API endpoint)\n   * @param url The URL to fetch data from.\n   * @returns An Observable of the fetched data.\n   */\n  getData$(url: string): Observable {\n    return this.http.get(url);\n  }\n\n  /**\n   * Fetch data from an endpoint with table data and process it.\n   * Cache the results.\n   * @param url the url to fetch data from. Response data must be a table-like response with an array as the root object\n   * @param cached if available, use a cached result (request will still be cached/overwrite cached copies)\n   * @returns An Observable of the table being fetched and processed\n   */\n  getTable$(url: string, cached = true): Observable {\n    const cachedResponse = this.cache.get(url);\n    if (cached && cachedResponse) {\n      return of(cachedResponse);\n    }\n\n    // By caching ongoing request, two clients (i.e. TableViews) requesting the same location at the same time\n    // can share and wait for a singe http request.\n    const ongoingRequest = this.ongoingRequests.get(url);\n    if (ongoingRequest) {\n      return ongoingRequest;\n    }\n\n    const request$ = this.getTableData$(url).pipe(\n      map(response => {\n        return this.processTableData(response, url)\n      }),\n      tap(table => {\n        const notify_changes = this.cache.has(url);\n        if (!environment.prod)\n          console.log(`Cached ${url} with a table of ${Object.keys(table.spec).length} columns and ${table.data.length} rows`);\n        this.cache.set(url, table);\n        this.ongoingRequests.delete(url);\n\n        if (notify_changes) {\n          if (!environment.prod)\n            console.log(`Updated previously cached table. Notifying of changes`);\n          this.dataSourceChanged.emit(url);\n        }\n      }),\n      shareReplay(1)\n    );\n\n    this.ongoingRequests.set(url, request$);\n    return request$;\n  }\n\n  /**\n   * Process generic array object to Table data\n   * @param raw array of objects\n   * @param src string to describe the source (url) of the Table\n   * @returns \n   */\n  processTableData(raw: object[], src?: string): Table {\n    const data = raw.map(TableUtils.flattenObjectToRow);\n\n    const spec = TableUtils.inferColumnTypes(data.slice(0, 10));\n\n    for (let idx = 0; idx  (r[TABLE_INDEX_COLUMN_NAME] == newRowData[TABLE_INDEX_COLUMN_NAME]));\n    if (!environment.prod)\n      console.log(`Replacing row ${replaceIndex} Old Data / New Data:`, table!.data[replaceIndex], newRowData);\n    table!.data[replaceIndex] = newRowData;\n    this.dataSourceChanged.emit(src);\n  }\n\n  /**\n   * Is a table data of this url in the cache.\n   * @param url table data url\n   * @returns \n   */\n  isCached(url?: string): boolean {\n    if (!url)\n      return false;\n    return this.cache.has(url);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TableUtils.html":{"url":"classes/TableUtils.html","title":"class - TableUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TableUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table-utils.ts\n        \n\n\n            \n                Description\n            \n            \n                Reusable static methods for working with table data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                flattenObjectToRow\n                            \n                            \n                                    Static\n                                inferColumnTypes\n                            \n                            \n                                    Static\n                                sortTableFn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        flattenObjectToRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    flattenObjectToRow(o: object)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:15\n                        \n                    \n\n\n            \n                \n                        Return a flattened version of an object, such that all properties in o['a']['b']['c'] are\nproperties o['a.b.c'] in the result\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                o\n                                            \n                                                            object\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An object to flatten.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TableRow\n\n                        \n                            \n                                A flattened copy of the object of type TableRow\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        inferColumnTypes\n                        \n                    \n                \n            \n            \n                \n                        \n                    inferColumnTypes(rows: TableRow[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:37\n                        \n                    \n\n\n            \n                \n                        Infer data types in the table columns by analysing multiple rows of a table\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                rows\n                                            \n                                                            TableRow[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    table row data in flattened form (can be a subset of the table).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TableSpec\n\n                        \n                            \n                                a TableSpec object with an entry for each column by name, describing column data type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        sortTableFn\n                        \n                    \n                \n            \n            \n                \n                        \n                    sortTableFn(columnName: string, sortMode: ColumnSort)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:67\n                        \n                    \n\n\n            \n                \n                        Generate a sort function that compares TableRows based on property columnName.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                columnName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the column to compare in the sort fn\n\n                                            \n                                        \n                                        \n                                                sortMode\n                                            \n                                                            ColumnSort\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Sort direction, either ColumnSort.ASC or ColumnSort.DESC\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                a sort function\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ColumnSpec, TableSpec, TableRow, ColumnSort } from \"./table.model\";\n\n\n/**\n * Reusable static methods for working with table data\n */\nexport class TableUtils {\n\n  /**\n   * Return a flattened version of an object, such that all properties in o['a']['b']['c'] are\n   * properties o['a.b.c'] in the result\n   * @param o An object to flatten.\n   * @returns A flattened copy of the object of type TableRow\n   */\n  static flattenObjectToRow(o: object): TableRow {\n    const o_flat: TableRow = {};\n    for (const key of Object.keys(o) as (keyof typeof o)[]) {\n      // This will flatten arrays and objects alike\n      if (typeof (o[key]) === 'object' && o[key] !== null) {\n        const nested = TableUtils.flattenObjectToRow(o[key]);\n        // nestedKey is either property name of object or index of array.\n        for (const nestedKey of Object.keys(nested)) {\n          o_flat[`${key}.${nestedKey}`] = nested[nestedKey];\n        }\n      } else {\n        o_flat[key] = o[key];\n      }\n    }\n    return o_flat;\n  }\n\n  /**\n   * Infer data types in the table columns by analysing multiple rows of a table\n   * @param rows table row data in flattened form (can be a subset of the table).\n   * @returns a TableSpec object with an entry for each column by name, describing column data type.\n   */\n  static inferColumnTypes(rows: TableRow[]): TableSpec {\n    const columns: TableSpec = {};\n    for (const row of rows) {\n      for (const key in row) {\n        const dataType = typeof row[key];\n\n        if (row[key] === null) // Do not infer column type from missing data\n          continue;\n\n        if (columns[key] === undefined) {\n          columns[key] = {\n            name: key,\n            displayName: key,\n            dataType: dataType,\n            sort: ColumnSort.NONE\n          } as ColumnSpec;\n        } else if (columns[key].dataType !== dataType) {\n          columns[key].dataType = \"mixed\";\n        }\n      }\n    }\n    return columns;\n  }\n\n  /**\n   * Generate a sort function that compares TableRows based on property columnName.\n   * @param columnName Name of the column to compare in the sort fn\n   * @param sortMode Sort direction, either ColumnSort.ASC or ColumnSort.DESC\n   * @returns a sort function\n   */\n  static sortTableFn(columnName: string, sortMode: ColumnSort): (a: TableRow, b: TableRow) => number {\n    return (a, b) => {\n      const aval = a[columnName];\n      const bval = b[columnName];\n      let cval = 0;\n      if (bval === null && aval === null) {\n        cval = 0;\n      } else if (aval !== null && bval !== null && aval > bval || aval === null && bval !== null) {\n        cval = 1;\n      } else if (aval !== null && bval !== null && aval \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/baader-table/components/filter-input/filter-input.component.ts\n            \n            component\n            FilterInputComponent\n            \n                28 %\n                (4/14)\n            \n        \n        \n            \n                \n                src/app/baader-table/components/pagination/pagination.component.ts\n            \n            component\n            PaginationComponent\n            \n                31 %\n                (6/19)\n            \n        \n        \n            \n                \n                src/app/baader-table/components/table-view/table-view.component.ts\n            \n            component\n            TableViewComponent\n            \n                45 %\n                (27/59)\n            \n        \n        \n            \n                \n                src/app/baader-table/services/table-data.service.ts\n            \n            injectable\n            TableDataService\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table-utils.ts\n            \n            class\n            TableUtils\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            ColumnSpec\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            FilterState\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            RangeState\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            SortState\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            Table\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            variable\n            TABLE_INDEX_COLUMN_NAME\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.0.0\n        \n            @angular/cdk : ^18.0.1\n        \n            @angular/common : ^18.0.0\n        \n            @angular/compiler : ^18.0.0\n        \n            @angular/core : ^18.0.0\n        \n            @angular/forms : ^18.0.0\n        \n            @angular/platform-browser : ^18.0.0\n        \n            @angular/platform-browser-dynamic : ^18.0.0\n        \n            @angular/router : ^18.0.0\n        \n            marked : ^12.0.2\n        \n            ngx-markdown : ^18.0.0\n        \n            primeflex : ^3.3.1\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ColumnSort   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ColumnSort\n                    \n                \n                    \n                        \n                            Describe sorting state of a column.\n\n                        \n                    \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nTableAssignment\nThis is a programming assinment. For details on the assignment, see public/docs/description.md. \nMy report on the assignment can be found under public/docs/report.md. \nThe documentation of the table module can be found here: jankolkmeier.github.io/table_assignment. \nThe angular project was generated with Angular CLI version 18.0.1.\nLive Demo\nA live version may still be running here.\nUse with as VSCode Dev Container\nThis project is a docker container that can be used with VSCode's Dev Container feature. \nMake sure you have Docker Desktop and the Dev Containers Extension installed for VSCode.\nClone this project and open the folder with VSCode, then press ctrl+shift+p and run Dev Containers: Rebuild and Reopen in Container. This will take a while for the first time.\nThis should also install all the project dependencies (i.e it automatically runs npm install).\nThen open a terminal in the dev container and follow the instructions under Development Server.\nRun without a Dev Container\nMake sure you have a compatible node version and the angular v18 client installed. If not, follow these instructions.\nClone this project and open a terminal inside the project folder. Run npm install to install all dependencies.\nThen follow the instructions under Development Server.\nRunning Development Server\nRun ng serve --poll 500 to host the application using the dev server.\nThe port is :4342. This container is configured to forward this port to your machine.\nThe application should be available under http://localhost:4342/ once the dev server is running.\nNote that for Dev Container compatibility, this dev server is configured to listen to host 0.0.0.0 (all interfaces). So beware if you're running this outside of a docker container.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    3 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TableRow   (src/.../table.model.ts)\n                        \n                        \n                            TableSpec   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n    \n        \n            \n                \n                    \n                    TableRow\n                \n            \n            \n                \n                    A table row is a set of key value pairs with these possible value types.\n\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TableSpec\n                \n            \n            \n                \n                    A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TABLE_INDEX_COLUMN_NAME   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TABLE_INDEX_COLUMN_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__index'\n                    \n                \n\n            \n                \n                    Use this string to create a tracking entry for row data.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
