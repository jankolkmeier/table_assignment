var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ColumnSpec.html",[0,0.533,1,0.854]],["body/interfaces/ColumnSpec.html",[0,0.894,1,1.113,2,1.286,3,0.7,4,0.7,5,0.599,6,0.345,7,0.7,8,0.959,9,1.113,10,1.655,11,1.367,12,1.715,13,1.715,14,1.715,15,1.715,16,1.542,17,1.972,18,0.345,19,0.695,20,1.484,21,1.822,22,1.178,23,1.196,24,0.745,25,0.057,26,1.348,27,0.938,28,0.812,29,0.938,30,1.083,31,1.484,32,1.251,33,1.286,34,1.083,35,0.7,36,1.083,37,0.599,38,1.083,39,1.083,40,1.251,41,1.251,42,1.234,43,1.251,44,1.27,45,1.251,46,1.251,47,1.251,48,1.251,49,0.938,50,1.083,51,0.938,52,1.251,53,0.938,54,0.938,55,0.812,56,1.083,57,1.286,58,1.083,59,1.083,60,1.083,61,0.711,62,1.484,63,1.113,64,1.083,65,1.286,66,1.484,67,0.959,68,0.812,69,0.695,70,1.083,71,1.083,72,0.938,73,1.113,74,1.251,75,1.083,76,1.083,77,0.037,78,0.037]],["title/components/FilterInputComponent.html",[79,1.317,80,1.53]],["body/components/FilterInputComponent.html",[3,0.437,4,0.437,5,0.374,6,0.645,8,0.437,9,0.788,18,0.502,19,0.492,20,1.575,22,1.018,23,1.095,24,0.773,25,0.057,26,0.437,37,0.581,54,1.819,61,0.264,63,0.507,69,0.815,77,0.026,78,0.026,79,1.821,80,1.953,81,1.658,82,1.278,83,1.278,84,1.278,85,3.827,86,3.827,87,1.278,88,1.658,89,1.987,90,3.788,91,2.488,92,1.987,93,2.488,94,2.488,95,3.442,96,2.488,97,1.278,98,2.978,99,2.978,100,1.987,101,1.658,102,1.987,103,2.438,104,1.987,105,2.488,106,1.987,107,2.488,108,4.26,109,1.411,110,2.488,111,3.442,112,2.488,113,1.987,114,4.555,115,3.052,116,3.729,117,3.442,118,3.729,119,3.729,120,1.987,121,3.052,122,3.052,123,1.987,124,2.337,125,2.69,126,1.6,127,1.6,128,1.6,129,2.838,130,2.488,131,1.6,132,2.488,133,1.6,134,3.442,135,1.6,136,2.484,137,1.6,138,1.6,139,2.488,140,3.403,141,1.6,142,1.987,143,2.75,144,2.115,145,1.953,146,2.294,147,1.6,148,2.488,149,1.6,150,1.6,151,1.6,152,1.411,153,2.438,154,0.908,155,1.066,156,0.586,157,1.6,158,1.6,159,1.411,160,2.488,161,2.488,162,1.987,163,2.488,164,0.908,165,1.066,166,2.488,167,2.488,168,2.488,169,1.658,170,1.278,171,1.987,172,1.658,173,1.278,174,2.75,175,1.278,176,1.278,177,0.908,178,1.278,179,1.066,180,1.278,181,1.278,182,1.278]],["title/interfaces/FilterState.html",[0,0.533,53,0.987]],["body/interfaces/FilterState.html",[0,0.907,1,0.847,2,1.324,3,0.73,4,0.73,5,0.625,6,0.36,7,0.73,8,0.73,9,0.847,10,1.5,11,1.298,12,1.306,13,1.306,14,1.306,15,1.306,16,1.579,17,1.528,18,0.36,19,0.715,21,1.13,22,0.73,23,1.187,24,0.724,25,0.057,26,1.36,27,0.979,28,0.847,29,0.979,30,1.13,31,1.528,32,1.306,33,1.324,34,1.13,35,0.73,36,1.13,37,0.625,38,1.13,39,1.13,40,1.306,41,1.306,42,1.252,43,1.306,44,1.298,45,1.306,46,1.306,47,1.306,48,1.306,49,0.979,50,1.13,51,0.979,52,1.306,53,1.324,54,1.607,55,0.847,56,1.13,57,1.324,58,1.13,59,1.13,60,1.13,61,0.724,62,1.528,63,1.146,64,1.13,65,1.324,66,1.528,67,0.987,68,0.847,69,0.715,70,1.13,71,1.13,72,0.979,73,1.146,74,1.306,75,1.13,76,1.13,77,0.038,78,0.038]],["title/components/PaginationComponent.html",[79,1.317,177,1.53]],["body/components/PaginationComponent.html",[3,0.342,4,0.342,5,0.292,6,0.641,8,0.901,18,0.349,19,0.405,20,1.395,22,1.02,23,0.7,24,0.765,25,0.057,26,0.342,35,0.559,37,0.478,42,0.559,44,0.648,50,1.265,54,0.458,55,0.397,56,0.529,57,1.827,58,0.529,61,0.207,63,1.046,68,0.648,69,0.872,77,0.021,78,0.021,79,1.612,80,0.71,81,1.363,82,1,83,1,84,1,88,1.363,90,3.394,97,1,98,3.223,99,2.637,100,1.634,101,1.995,102,1.634,103,2.072,104,1.634,106,1.634,109,1.161,113,1.634,120,1.634,123,1.634,124,2.289,125,2.681,129,2.688,136,2.199,140,3.394,144,1.873,145,2.212,146,2.36,152,1.471,153,2.072,154,0.71,155,0.834,156,0.458,159,1.161,162,1,164,1.873,169,1.363,170,1,171,2.392,172,1.995,173,1,174,2.392,175,1,176,1,177,1.699,178,1,179,0.834,180,1,181,1,182,1,183,1,184,1.634,185,2.046,186,3.543,187,3.899,188,2.995,189,4.641,190,2.046,191,2.046,192,2.046,193,2.995,194,1.634,195,2.046,196,2.594,197,2.046,198,2.046,199,2.594,200,2.594,201,2.046,202,2.046,203,2.995,204,2.046,205,2.046,206,3.543,207,3.301,208,3.301,209,2.594,210,3.301,211,3.301,212,3.301,213,3.301,214,2.995,215,2.594,216,2.594,217,1.252,218,1.634,219,2.392,220,2.046,221,2.046,222,1.634,223,1.252,224,1.252,225,2.046,226,1.252,227,1.252,228,1.252,229,1,230,1.252,231,2.046,232,1.252,233,1.252,234,2.046,235,1.252,236,2.046,237,2.046,238,3.899,239,2.83,240,3.543,241,2.995,242,2.995,243,2.046,244,2.995,245,2.594,246,1.252,247,2.046,248,2.046,249,2.046,250,2.046,251,2.046,252,2.046,253,2.046,254,2.046,255,2.046,256,2.046,257,1.252,258,2.046,259,1.252,260,2.046,261,2.046,262,2.046,263,1.252,264,2.046,265,2.046,266,2.046,267,2.046,268,1.252,269,2.046,270,2.046,271,1.252,272,1.252,273,1.252,274,3.543,275,1,276,1.252,277,2.046,278,1.252,279,1.363,280,1.252,281,1.252,282,2.995,283,2.046,284,1.252,285,1.252,286,1.252,287,2.594,288,1.252,289,1.252,290,2.046,291,1.252,292,1.252,293,2.046]],["title/interfaces/RangeState.html",[0,0.533,55,0.854]],["body/interfaces/RangeState.html",[0,0.907,1,0.847,2,1.324,3,0.73,4,0.73,5,0.625,6,0.36,7,0.73,8,0.73,9,0.847,10,1.5,11,1.298,12,1.306,13,1.306,14,1.306,15,1.306,16,1.498,17,1.528,18,0.36,19,0.715,21,1.13,22,0.73,23,1.129,24,0.724,25,0.057,26,1.36,27,0.979,28,0.847,29,0.979,30,1.13,31,1.528,32,1.306,33,1.324,34,1.13,35,0.73,36,1.13,37,0.625,38,1.13,39,1.13,40,1.306,41,1.306,42,1.252,43,1.306,44,1.298,45,1.306,46,1.306,47,1.306,48,1.306,49,0.979,50,1.13,51,0.979,52,1.306,53,0.979,54,0.979,55,1.146,56,1.855,57,1.731,58,1.855,59,1.13,60,1.13,61,0.724,62,1.528,63,1.146,64,1.13,65,1.324,66,1.528,67,0.987,68,0.847,69,0.715,70,1.13,71,1.13,72,0.979,73,1.146,74,1.306,75,1.13,76,1.13,77,0.038,78,0.038]],["title/interfaces/SortState.html",[0,0.533,51,0.987]],["body/interfaces/SortState.html",[0,0.896,1,0.818,2,1.474,3,0.705,4,0.705,5,0.603,6,0.348,7,0.705,8,0.964,9,0.818,10,1.474,11,1.275,12,1.261,13,1.261,14,1.261,15,1.261,16,1.585,17,1.492,18,0.348,19,0.699,21,1.091,22,0.705,23,1.156,24,0.714,25,0.057,26,1.351,27,0.946,28,0.818,29,0.946,30,1.091,31,1.701,32,1.261,33,1.585,34,1.091,35,0.705,36,1.091,37,0.603,38,1.091,39,1.091,40,1.725,41,1.725,42,1.308,43,1.725,44,1.436,45,1.725,46,1.725,47,1.725,48,1.725,49,1.293,50,1.492,51,1.293,52,2.113,53,0.946,54,0.946,55,0.818,56,1.091,57,1.293,58,1.091,59,1.091,60,1.091,61,0.714,62,1.492,63,1.119,64,1.091,65,1.293,66,1.492,67,0.964,68,0.818,69,0.699,70,1.091,71,1.091,72,0.946,73,1.119,74,1.261,75,1.091,76,1.091,77,0.037,78,0.037]],["title/interfaces/Table.html",[0,0.533,61,0.445]],["body/interfaces/Table.html",[0,0.896,1,0.817,2,1.292,3,0.704,4,0.704,5,0.602,6,0.347,7,0.704,8,1.098,9,0.817,10,1.472,11,1.37,12,1.259,13,1.259,14,1.259,15,1.259,16,1.482,17,1.49,18,0.347,19,0.698,20,1.49,21,1.089,22,0.704,23,1.155,24,0.747,25,0.057,26,1.35,27,0.944,28,0.817,29,0.944,30,1.089,31,1.49,32,1.259,33,1.292,34,1.089,35,0.704,36,1.089,37,0.602,38,1.089,39,1.089,40,1.259,41,1.259,42,1.366,43,1.259,44,1.274,45,1.259,46,1.259,47,1.259,48,1.259,49,0.944,50,1.089,51,0.944,52,1.259,53,0.944,54,0.944,55,0.817,56,1.089,57,1.292,58,1.089,59,1.089,60,1.089,61,0.771,62,1.699,63,1.118,64,1.089,65,1.583,66,1.49,67,1.098,68,0.817,69,0.698,70,1.089,71,1.089,72,0.944,73,1.37,74,1.722,75,1.827,76,1.827,77,0.037,78,0.037]],["title/injectables/TableDataService.html",[294,1.53,295,1.797]],["body/injectables/TableDataService.html",[3,0.347,4,0.716,5,0.297,6,0.575,8,0.974,9,0.403,10,0.759,11,0.403,16,0.403,18,0.171,19,0.41,20,1.59,22,1.071,23,1.107,24,0.669,25,0.057,26,0.347,27,1.306,28,0.403,29,0.466,35,0.347,42,1.375,44,0.656,49,0.466,61,0.818,67,0.825,69,0.598,73,0.831,75,0.537,76,2.057,77,0.032,78,0.022,88,1.381,101,1.381,109,1.175,124,1.715,125,2.366,136,1.747,142,1.016,143,1.016,144,2.135,145,2.366,146,0.847,152,2.024,154,0.722,156,0.466,159,2.225,164,2.024,165,2.614,169,0.847,172,1.381,194,2.094,219,1.016,229,1.655,275,1.016,279,2.614,294,1.175,295,1.381,296,1.272,297,3.41,298,1.016,299,2.072,300,2.072,301,2.072,302,4.43,303,2.851,304,1.655,305,2.072,306,2.072,307,2.072,308,2.072,309,2.072,310,2.072,311,2.072,312,3.023,313,1.655,314,2.072,315,2.622,316,3.569,317,3.569,318,2.622,319,2.622,320,3.023,321,2.072,322,2.072,323,2.072,324,2.072,325,2.072,326,1.272,327,1.272,328,3.023,329,1.272,330,2.072,331,2.072,332,1.272,333,4.355,334,3.023,335,3.328,336,3.569,337,4.43,338,3.569,339,2.072,340,1.272,341,3.328,342,3.569,343,3.328,344,3.006,345,1.655,346,2.415,347,1.655,348,3.328,349,2.072,350,2.072,351,2.072,352,2.072,353,2.072,354,2.072,355,1.272,356,2.072,357,2.072,358,2.072,359,2.072,360,2.094,361,2.072,362,1.272,363,2.072,364,2.072,365,3.328,366,1.272,367,2.072,368,2.094,369,1.272,370,3.328,371,1.272,372,1.272,373,1.272,374,1.272,375,1.272,376,2.072,377,1.272,378,1.272,379,2.072,380,2.072,381,1.272,382,1.272,383,1.272,384,1.272,385,1.272,386,1.016,387,1.272,388,2.072,389,1.016,390,1.272,391,1.272,392,1.272,393,1.272,394,3.328,395,1.272,396,1.272,397,1.272,398,1.272,399,1.272,400,1.272,401,1.016,402,0.722,403,1.272,404,1.272,405,1.272,406,1.272,407,1.272,408,1.272,409,2.072,410,2.072,411,1.272,412,1.272,413,2.622,414,1.272,415,1.272,416,1.272,417,1.272,418,1.272,419,2.072,420,2.072,421,2.622,422,1.272,423,1.272,424,1.272,425,1.272,426,1.272,427,1.272,428,1.272,429,1.272,430,1.272,431,1.272,432,1.272,433,1.272,434,1.272,435,2.072,436,1.272,437,1.272,438,1.272,439,1.272,440,1.272,441,2.072,442,1.272,443,1.272]],["title/classes/TableUtils.html",[156,0.987,402,1.53]],["body/classes/TableUtils.html",[1,0.827,3,0.465,4,0.465,5,0.398,6,0.479,8,0.971,11,1.127,16,1.335,17,1.503,18,0.351,19,0.704,20,1.341,21,0.72,22,1.217,23,0.741,24,0.717,25,0.057,26,0.465,27,1.665,33,1.303,35,0.713,37,0.398,42,1.217,49,0.956,57,0.956,61,0.75,65,1.482,67,0.971,68,1.127,72,0.956,73,1.466,77,0.027,78,0.027,109,2.019,125,1.801,129,3.031,144,1.801,145,2.296,152,0.966,156,0.624,164,2.019,165,1.135,239,2.085,279,2.556,303,2.085,304,2.085,344,3.796,347,2.085,360,3.065,368,1.361,389,1.361,402,1.481,444,1.703,445,2.842,446,1.361,447,2.611,448,4.627,449,2.611,450,2.611,451,2.611,452,2.611,453,2.611,454,1.703,455,4.048,456,1.739,457,2.611,458,2.611,459,3.174,460,3.174,461,2.611,462,2.611,463,1.703,464,3.174,465,2.611,466,2.611,467,2.611,468,2.085,469,2.611,470,2.611,471,2.611,472,3.558,473,1.703,474,2.611,475,4.457,476,3.558,477,2.611,478,2.611,479,3.174,480,3.558,481,2.611,482,2.611,483,2.611,484,2.611,485,1.703,486,2.611,487,1.703,488,1.703,489,3.174,490,1.703,491,1.703,492,3.174,493,1.703,494,2.611,495,1.703,496,1.703,497,1.703,498,1.703,499,2.611,500,1.703,501,1.703,502,2.611,503,1.703,504,1.703,505,2.611,506,1.703,507,2.611,508,4.214,509,1.703,510,4.048,511,1.703,512,3.174]],["title/coverage.html",[513,2.905]],["body/coverage.html",[0,0.965,1,1.027,5,0.757,6,0.706,7,1.361,24,0.535,25,0.056,28,1.027,35,1.12,51,1.187,53,1.187,55,1.027,61,0.677,77,0.043,78,0.043,79,2.198,80,1.84,85,2.59,86,2.59,87,2.59,156,1.187,159,1.84,177,1.84,179,2.161,183,2.59,222,3.278,294,1.84,295,2.161,297,2.59,298,2.59,402,1.84,445,2.59,446,2.59,513,2.59,514,3.243,515,3.243,516,3.243,517,3.243,518,3.243,519,3.243,520,3.243,521,3.243,522,3.243,523,3.243,524,3.243,525,3.243,526,3.243,527,3.243,528,3.243,529,4.103,530,4.103,531,4.103,532,3.243,533,3.243,534,3.243,535,3.243,536,3.243]],["title/dependencies.html",[537,1.816,538,2.581]],["body/dependencies.html",[25,0.057,77,0.046,78,0.046,154,2.056,155,2.414,401,2.895,538,2.895,539,3.624,540,5.269,541,3.624,542,2.895,543,3.624,544,3.624,545,4.396,546,4.396,547,3.624,548,3.624,549,3.624,550,3.624,551,3.624,552,3.624,553,3.624,554,3.624,555,3.624,556,3.624,557,3.624,558,3.624,559,3.624]],["title/miscellaneous/enumerations.html",[560,0.96,561,2.581]],["body/miscellaneous/enumerations.html",[6,0.531,7,1.077,10,1.444,16,1.249,18,0.531,25,0.053,30,1.666,31,1.666,33,1.693,34,1.666,36,1.666,37,0.921,38,1.666,39,1.666,69,0.914,77,0.049,78,0.049,560,1.666,561,3.15,562,2.628]],["title/index.html",[18,0.306,563,2.273,564,2.273]],["body/index.html",[2,1.208,9,1.046,25,0.044,77,0.044,78,0.044,92,2.636,184,3.314,313,2.636,345,2.636,386,2.636,456,2.199,542,2.636,565,3.301,566,3.301,567,3.301,568,3.301,569,4.538,570,4.149,571,4.906,572,3.301,573,4.906,574,4.149,575,3.301,576,3.301,577,3.301,578,4.762,579,4.538,580,4.538,581,3.301,582,4.149,583,4.149,584,3.301,585,4.149,586,3.301,587,3.301,588,3.301,589,3.301,590,3.301,591,3.301,592,4.538,593,3.301,594,3.301,595,3.301,596,3.301,597,3.301,598,3.301,599,4.762,600,3.301,601,3.301,602,3.301,603,3.301,604,4.149,605,4.149,606,3.301,607,3.301,608,3.301,609,3.301,610,3.301]],["title/modules.html",[611,2.905]],["body/modules.html",[25,0.05,77,0.05,78,0.05,611,3.354]],["title/overview.html",[612,2.905]],["body/overview.html",[2,1.499,25,0.05,37,1.104,77,0.05,78,0.05,81,2.727,156,1.499,218,3.27,294,2.322,612,3.27,613,4.093]],["title/properties.html",[19,0.639,537,1.816]],["body/properties.html",[19,0.822,25,0.053,77,0.05,78,0.05,456,2.771,614,4.159]],["title/miscellaneous/typealiases.html",[560,0.96,615,3.231]],["body/miscellaneous/typealiases.html",[6,0.515,7,1.045,11,1.212,18,0.515,24,0.631,25,0.048,44,1.212,59,1.617,60,1.617,61,0.749,62,1.617,63,1.439,64,1.617,65,1.663,66,1.919,67,1.045,68,1.212,69,0.898,70,1.617,71,1.617,72,1.401,73,1.439,77,0.048,78,0.048,560,1.617,562,3.026,616,3.827]],["title/miscellaneous/variables.html",[560,0.96,617,2.581]],["body/miscellaneous/variables.html",[6,0.529,7,1.073,18,0.529,23,1.078,24,0.648,25,0.053,28,1.462,29,1.439,42,1.073,67,1.073,69,0.777,77,0.048,78,0.048,89,3.141,124,2.23,346,3.141,468,3.141,560,1.661,562,2.62,617,3.141,618,3.932]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":35,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["0.0.0",{"_index":614,"title":{},"body":{"properties.html":{}}}],["0.0.0.0",{"_index":596,"title":{},"body":{"index.html":{}}}],["0.14.3",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["0/3",{"_index":531,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":37,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["1/1",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":533,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":530,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":219,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["100",{"_index":222,"title":{},"body":{"components/PaginationComponent.html":{},"coverage.html":{}}}],["12.0.2",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["18.0.0",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["18.0.1",{"_index":542,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["2",{"_index":39,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["2.3.0",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":220,"title":{},"body":{"components/PaginationComponent.html":{}}}],["23/60",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":529,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":613,"title":{},"body":{"overview.html":{}}}],["3.3.1",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["31",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["38",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["4/14",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":528,"title":{},"body":{"coverage.html":{}}}],["4342",{"_index":586,"title":{},"body":{"index.html":{}}}],["5",{"_index":218,"title":{},"body":{"components/PaginationComponent.html":{},"overview.html":{}}}],["50",{"_index":221,"title":{},"body":{"components/PaginationComponent.html":{}}}],["54",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["6/11",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["6/19",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["__index",{"_index":29,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/variables.html":{}}}],["_categories",{"_index":108,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["_categories.indexof(categorydefaultvalue",{"_index":168,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["_currentpage",{"_index":199,"title":{},"body":{"components/PaginationComponent.html":{}}}],["_currentpage+1",{"_index":293,"title":{},"body":{"components/PaginationComponent.html":{}}}],["_totalitems",{"_index":200,"title":{},"body":{"components/PaginationComponent.html":{}}}],["a[columnname",{"_index":509,"title":{},"body":{"classes/TableUtils.html":{}}}],["accessible",{"_index":251,"title":{},"body":{"components/PaginationComponent.html":{}}}],["accessors",{"_index":123,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["actual_component",{"_index":182,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["aliases",{"_index":616,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alike",{"_index":491,"title":{},"body":{"classes/TableUtils.html":{}}}],["analysing",{"_index":465,"title":{},"body":{"classes/TableUtils.html":{}}}],["angular",{"_index":574,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":398,"title":{},"body":{"injectables/TableDataService.html":{}}}],["angular/compiler",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":154,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":155,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":335,"title":{},"body":{"injectables/TableDataService.html":{}}}],["api/file",{"_index":310,"title":{},"body":{"injectables/TableDataService.html":{}}}],["application",{"_index":583,"title":{},"body":{"index.html":{}}}],["array",{"_index":165,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["arrays",{"_index":490,"title":{},"body":{"classes/TableUtils.html":{}}}],["artifacts",{"_index":600,"title":{},"body":{"index.html":{}}}],["asc",{"_index":38,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["assignment",{"_index":566,"title":{},"body":{"index.html":{}}}],["assignment.md",{"_index":568,"title":{},"body":{"index.html":{}}}],["available",{"_index":345,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["aval",{"_index":508,"title":{},"body":{"classes/TableUtils.html":{}}}],["b",{"_index":507,"title":{},"body":{"classes/TableUtils.html":{}}}],["b[columnname",{"_index":511,"title":{},"body":{"classes/TableUtils.html":{}}}],["baader",{"_index":99,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["based",{"_index":49,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["being",{"_index":352,"title":{},"body":{"injectables/TableDataService.html":{}}}],["beware",{"_index":386,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["boolean",{"_index":229,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["browser",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":599,"title":{},"body":{"index.html":{}}}],["button",{"_index":256,"title":{},"body":{"components/PaginationComponent.html":{}}}],["buttons",{"_index":250,"title":{},"body":{"components/PaginationComponent.html":{}}}],["bval",{"_index":510,"title":{},"body":{"classes/TableUtils.html":{}}}],["cache",{"_index":317,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cached",{"_index":302,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cached/overwrite",{"_index":350,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cachedresponse",{"_index":410,"title":{},"body":{"injectables/TableDataService.html":{}}}],["calculate",{"_index":269,"title":{},"body":{"components/PaginationComponent.html":{}}}],["categories",{"_index":95,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["category",{"_index":114,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorychange",{"_index":121,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorydefaultvalue",{"_index":115,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorylabel",{"_index":116,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categoryselect",{"_index":117,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categoryselect(categories",{"_index":157,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["change",{"_index":240,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changed",{"_index":143,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{}}}],["changepage",{"_index":201,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changepage(direction",{"_index":234,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changes",{"_index":194,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["check",{"_index":254,"title":{},"body":{"components/PaginationComponent.html":{}}}],["class",{"_index":156,"title":{"classes/TableUtils.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":444,"title":{},"body":{"classes/TableUtils.html":{}}}],["clear",{"_index":134,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["cli",{"_index":576,"title":{},"body":{"index.html":{}}}],["column",{"_index":16,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{}}}],["columnname",{"_index":480,"title":{},"body":{"classes/TableUtils.html":{}}}],["columns",{"_index":11,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["columns[key",{"_index":502,"title":{},"body":{"classes/TableUtils.html":{}}}],["columns[key].datatype",{"_index":505,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort",{"_index":33,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{}}}],["columnsort.asc",{"_index":483,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort.desc",{"_index":484,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort.none",{"_index":504,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnspec",{"_index":1,"title":{"interfaces/ColumnSpec.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["columnspecs",{"_index":64,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["combination",{"_index":74,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["compare",{"_index":481,"title":{},"body":{"classes/TableUtils.html":{}}}],["compares",{"_index":477,"title":{},"body":{"classes/TableUtils.html":{}}}],["compatibility",{"_index":594,"title":{},"body":{"index.html":{}}}],["component",{"_index":79,"title":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":175,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["components",{"_index":81,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"overview.html":{}}}],["configured",{"_index":184,"title":{},"body":{"components/PaginationComponent.html":{},"index.html":{}}}],["confirm",{"_index":255,"title":{},"body":{"components/PaginationComponent.html":{}}}],["console.log(`cached",{"_index":422,"title":{},"body":{"injectables/TableDataService.html":{}}}],["console.log(`replacing",{"_index":438,"title":{},"body":{"injectables/TableDataService.html":{}}}],["console.log(`updated",{"_index":427,"title":{},"body":{"injectables/TableDataService.html":{}}}],["const",{"_index":27,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["constructor",{"_index":326,"title":{},"body":{"injectables/TableDataService.html":{}}}],["constructor(http",{"_index":327,"title":{},"body":{"injectables/TableDataService.html":{}}}],["constructor(private",{"_index":408,"title":{},"body":{"injectables/TableDataService.html":{}}}],["container",{"_index":571,"title":{},"body":{"index.html":{}}}],["containing",{"_index":261,"title":{},"body":{"components/PaginationComponent.html":{}}}],["context",{"_index":315,"title":{},"body":{"injectables/TableDataService.html":{}}}],["continue",{"_index":501,"title":{},"body":{"classes/TableUtils.html":{}}}],["copies",{"_index":351,"title":{},"body":{"injectables/TableDataService.html":{}}}],["copy",{"_index":461,"title":{},"body":{"classes/TableUtils.html":{}}}],["coverage",{"_index":513,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":89,"title":{},"body":{"components/FilterInputComponent.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":306,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cval",{"_index":512,"title":{},"body":{"classes/TableUtils.html":{}}}],["data",{"_index":42,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["data.service.ts",{"_index":298,"title":{},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["data.service.ts:118",{"_index":371,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:131",{"_index":362,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:16",{"_index":329,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:20",{"_index":395,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:21",{"_index":397,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:23",{"_index":396,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:31",{"_index":355,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:40",{"_index":332,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:51",{"_index":340,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:92",{"_index":366,"title":{},"body":{"injectables/TableDataService.html":{}}}],["datasourcechanged",{"_index":318,"title":{},"body":{"injectables/TableDataService.html":{}}}],["datatype",{"_index":17,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["default",{"_index":124,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":125,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["definition",{"_index":385,"title":{},"body":{"injectables/TableDataService.html":{}}}],["depend",{"_index":314,"title":{},"body":{"injectables/TableDataService.html":{}}}],["dependencies",{"_index":538,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deriving",{"_index":392,"title":{},"body":{"injectables/TableDataService.html":{}}}],["desc",{"_index":36,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":10,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/enumerations.html":{}}}],["describes",{"_index":60,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["describing",{"_index":470,"title":{},"body":{"classes/TableUtils.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["desired",{"_index":264,"title":{},"body":{"components/PaginationComponent.html":{}}}],["details",{"_index":313,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["dev",{"_index":573,"title":{},"body":{"index.html":{}}}],["development",{"_index":577,"title":{},"body":{"index.html":{}}}],["direction",{"_index":239,"title":{},"body":{"components/PaginationComponent.html":{},"classes/TableUtils.html":{}}}],["directive",{"_index":173,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["directives",{"_index":181,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["directly",{"_index":265,"title":{},"body":{"components/PaginationComponent.html":{}}}],["directory",{"_index":603,"title":{},"body":{"index.html":{}}}],["display",{"_index":13,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["displayname",{"_index":21,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["dist",{"_index":602,"title":{},"body":{"index.html":{}}}],["docker",{"_index":570,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":514,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":83,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["dropdown",{"_index":266,"title":{},"body":{"components/PaginationComponent.html":{}}}],["dynamic",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":469,"title":{},"body":{"classes/TableUtils.html":{}}}],["element",{"_index":172,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["endpoint",{"_index":336,"title":{},"body":{"injectables/TableDataService.html":{}}}],["enter",{"_index":292,"title":{},"body":{"components/PaginationComponent.html":{}}}],["entry",{"_index":468,"title":{},"body":{"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":32,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["enumerations",{"_index":561,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":405,"title":{},"body":{"injectables/TableDataService.html":{}}}],["environment.prod",{"_index":421,"title":{},"body":{"injectables/TableDataService.html":{}}}],["environments/environment",{"_index":406,"title":{},"body":{"injectables/TableDataService.html":{}}}],["event",{"_index":140,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["event.target",{"_index":161,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["eventemitter",{"_index":136,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["events",{"_index":253,"title":{},"body":{"components/PaginationComponent.html":{}}}],["execute",{"_index":608,"title":{},"body":{"index.html":{}}}],["expects",{"_index":356,"title":{},"body":{"injectables/TableDataService.html":{}}}],["export",{"_index":26,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["externally",{"_index":267,"title":{},"body":{"components/PaginationComponent.html":{}}}],["false",{"_index":443,"title":{},"body":{"injectables/TableDataService.html":{}}}],["features",{"_index":92,"title":{},"body":{"components/FilterInputComponent.html":{},"index.html":{}}}],["fetch",{"_index":333,"title":{},"body":{"injectables/TableDataService.html":{}}}],["fetched",{"_index":338,"title":{},"body":{"injectables/TableDataService.html":{}}}],["fetching",{"_index":300,"title":{},"body":{"injectables/TableDataService.html":{}}}],["field",{"_index":142,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{}}}],["fields",{"_index":91,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["filter",{"_index":54,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["filterchange",{"_index":122,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filtered",{"_index":46,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["filterinputcomponent",{"_index":80,"title":{"components/FilterInputComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["filterlabel",{"_index":118,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filterstate",{"_index":53,"title":{"interfaces/FilterState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["filtervaluechanged",{"_index":110,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filtervaluechanged(event",{"_index":139,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["flatten",{"_index":460,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattened",{"_index":455,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattening",{"_index":388,"title":{},"body":{"injectables/TableDataService.html":{}}}],["flattenobjecttorow",{"_index":450,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattenobjecttorow(o",{"_index":453,"title":{},"body":{"classes/TableUtils.html":{}}}],["fn",{"_index":482,"title":{},"body":{"classes/TableUtils.html":{}}}],["following",{"_index":40,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["form",{"_index":466,"title":{},"body":{"classes/TableUtils.html":{}}}],["formsmodule",{"_index":103,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["forward",{"_index":587,"title":{},"body":{"index.html":{}}}],["function",{"_index":476,"title":{},"body":{"classes/TableUtils.html":{}}}],["further",{"_index":311,"title":{},"body":{"injectables/TableDataService.html":{}}}],["generate",{"_index":474,"title":{},"body":{"classes/TableUtils.html":{}}}],["generated",{"_index":575,"title":{},"body":{"index.html":{}}}],["generic",{"_index":88,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["getdata",{"_index":320,"title":{},"body":{"injectables/TableDataService.html":{}}}],["getdata$(url",{"_index":331,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettable",{"_index":321,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettable$(url",{"_index":339,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettabledata",{"_index":322,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettabledata$(url",{"_index":354,"title":{},"body":{"injectables/TableDataService.html":{}}}],["getting",{"_index":563,"title":{"index.html":{}},"body":{}}],["handle",{"_index":260,"title":{},"body":{"components/PaginationComponent.html":{}}}],["header",{"_index":15,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["here",{"_index":374,"title":{},"body":{"injectables/TableDataService.html":{}}}],["host",{"_index":582,"title":{},"body":{"index.html":{}}}],["html",{"_index":171,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["htmlinputelement).value",{"_index":162,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["http",{"_index":330,"title":{},"body":{"injectables/TableDataService.html":{}}}],["http://localhost:4342",{"_index":590,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":328,"title":{},"body":{"injectables/TableDataService.html":{}}}],["i.e",{"_index":44,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/typealiases.html":{}}}],["identifier",{"_index":515,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":435,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implementation",{"_index":312,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implemented",{"_index":373,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implements",{"_index":195,"title":{},"body":{"components/PaginationComponent.html":{}}}],["import",{"_index":152,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["imports",{"_index":102,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["increase/decrease",{"_index":236,"title":{},"body":{"components/PaginationComponent.html":{}}}],["index",{"_index":18,"title":{"index.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infer",{"_index":464,"title":{},"body":{"classes/TableUtils.html":{}}}],["infercolumntypes",{"_index":451,"title":{},"body":{"classes/TableUtils.html":{}}}],["infercolumntypes(rows",{"_index":462,"title":{},"body":{"classes/TableUtils.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["injectable",{"_index":294,"title":{"injectables/TableDataService.html":{}},"body":{"injectables/TableDataService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":296,"title":{},"body":{"injectables/TableDataService.html":{}}}],["input",{"_index":90,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["input'},{'name",{"_index":176,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["input.component.css",{"_index":107,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.html",{"_index":105,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts",{"_index":87,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["input.component.ts:20",{"_index":130,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:23",{"_index":150,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:25",{"_index":126,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:26",{"_index":137,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:28",{"_index":131,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:29",{"_index":138,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:31",{"_index":133,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:32",{"_index":128,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:34",{"_index":127,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:36",{"_index":135,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:42",{"_index":141,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:51",{"_index":149,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:59",{"_index":147,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input/filter",{"_index":86,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["inputs",{"_index":113,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["instead",{"_index":358,"title":{},"body":{"injectables/TableDataService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"index.html":{},"overview.html":{}}}],["iscached",{"_index":323,"title":{},"body":{"injectables/TableDataService.html":{}}}],["iscached(url",{"_index":361,"title":{},"body":{"injectables/TableDataService.html":{}}}],["it's",{"_index":62,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["items",{"_index":187,"title":{},"body":{"components/PaginationComponent.html":{}}}],["json",{"_index":334,"title":{},"body":{"injectables/TableDataService.html":{}}}],["karma",{"_index":610,"title":{},"body":{"index.html":{}}}],["keeping",{"_index":390,"title":{},"body":{"injectables/TableDataService.html":{}}}],["key",{"_index":68,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["keyboard",{"_index":252,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyboardevent",{"_index":245,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyevent",{"_index":244,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyevent.code",{"_index":290,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyof",{"_index":488,"title":{},"body":{"classes/TableUtils.html":{}}}],["legend",{"_index":170,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["length",{"_index":58,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["list",{"_index":94,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["listen",{"_index":595,"title":{},"body":{"index.html":{}}}],["looked",{"_index":48,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["machine",{"_index":588,"title":{},"body":{"index.html":{}}}],["make",{"_index":247,"title":{},"body":{"components/PaginationComponent.html":{}}}],["map",{"_index":394,"title":{},"body":{"injectables/TableDataService.html":{}}}],["map(response",{"_index":416,"title":{},"body":{"injectables/TableDataService.html":{}}}],["mapping",{"_index":391,"title":{},"body":{"injectables/TableDataService.html":{}}}],["markdown",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":78,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this._totalitems",{"_index":281,"title":{},"body":{"components/PaginationComponent.html":{}}}],["math.max(1",{"_index":280,"title":{},"body":{"components/PaginationComponent.html":{}}}],["math.min(math.max(0",{"_index":284,"title":{},"body":{"components/PaginationComponent.html":{}}}],["memory",{"_index":378,"title":{},"body":{"injectables/TableDataService.html":{}}}],["metadata",{"_index":97,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["methods",{"_index":109,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["miscellaneous",{"_index":560,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":500,"title":{},"body":{"classes/TableUtils.html":{}}}],["mixed",{"_index":506,"title":{},"body":{"classes/TableUtils.html":{}}}],["mode",{"_index":52,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["modules",{"_index":611,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":381,"title":{},"body":{"injectables/TableDataService.html":{}}}],["multiple",{"_index":304,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["n",{"_index":274,"title":{},"body":{"components/PaginationComponent.html":{}}}],["n='direction",{"_index":237,"title":{},"body":{"components/PaginationComponent.html":{}}}],["name",{"_index":22,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["names",{"_index":14,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["navbuttonkbd",{"_index":202,"title":{},"body":{"components/PaginationComponent.html":{}}}],["navbuttonkbd(direction",{"_index":243,"title":{},"body":{"components/PaginationComponent.html":{}}}],["need",{"_index":380,"title":{},"body":{"injectables/TableDataService.html":{}}}],["needed",{"_index":270,"title":{},"body":{"components/PaginationComponent.html":{}}}],["negative",{"_index":242,"title":{},"body":{"components/PaginationComponent.html":{}}}],["nested",{"_index":389,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["nested[nestedkey",{"_index":497,"title":{},"body":{"classes/TableUtils.html":{}}}],["nestedkey",{"_index":494,"title":{},"body":{"classes/TableUtils.html":{}}}],["new",{"_index":159,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"coverage.html":{}}}],["newrowdata",{"_index":370,"title":{},"body":{"injectables/TableDataService.html":{}}}],["newrowdata[table_index_column_name",{"_index":437,"title":{},"body":{"injectables/TableDataService.html":{}}}],["next",{"_index":248,"title":{},"body":{"components/PaginationComponent.html":{}}}],["nextlabel",{"_index":207,"title":{},"body":{"components/PaginationComponent.html":{}}}],["ng",{"_index":580,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":203,"title":{},"body":{"components/PaginationComponent.html":{}}}],["ngx",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":34,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["note",{"_index":593,"title":{},"body":{"index.html":{}}}],["notify_changes",{"_index":419,"title":{},"body":{"injectables/TableDataService.html":{}}}],["notifying",{"_index":429,"title":{},"body":{"injectables/TableDataService.html":{}}}],["null",{"_index":129,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"classes/TableUtils.html":{}}}],["number",{"_index":57,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["number((event.target",{"_index":288,"title":{},"body":{"components/PaginationComponent.html":{}}}],["o",{"_index":459,"title":{},"body":{"classes/TableUtils.html":{}}}],["o['a']['b']['c",{"_index":457,"title":{},"body":{"classes/TableUtils.html":{}}}],["o['a.b.c",{"_index":458,"title":{},"body":{"classes/TableUtils.html":{}}}],["o[key",{"_index":492,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat",{"_index":486,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat[`${key}.${nestedkey",{"_index":496,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat[key",{"_index":498,"title":{},"body":{"classes/TableUtils.html":{}}}],["object",{"_index":344,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["object.keys(nested",{"_index":495,"title":{},"body":{"classes/TableUtils.html":{}}}],["object.keys(o",{"_index":487,"title":{},"body":{"classes/TableUtils.html":{}}}],["object.keys(table.spec).length",{"_index":423,"title":{},"body":{"injectables/TableDataService.html":{}}}],["objects",{"_index":368,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["observable",{"_index":337,"title":{},"body":{"injectables/TableDataService.html":{}}}],["of(cachedresponse",{"_index":412,"title":{},"body":{"injectables/TableDataService.html":{}}}],["old",{"_index":440,"title":{},"body":{"injectables/TableDataService.html":{}}}],["once",{"_index":591,"title":{},"body":{"index.html":{}}}],["ongoingrequest",{"_index":413,"title":{},"body":{"injectables/TableDataService.html":{}}}],["ongoingrequests",{"_index":319,"title":{},"body":{"injectables/TableDataService.html":{}}}],["oninit",{"_index":196,"title":{},"body":{"components/PaginationComponent.html":{}}}],["operation",{"_index":377,"title":{},"body":{"injectables/TableDataService.html":{}}}],["optional",{"_index":20,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["otherwise",{"_index":359,"title":{},"body":{"injectables/TableDataService.html":{}}}],["output",{"_index":153,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["outputs",{"_index":120,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["outside",{"_index":598,"title":{},"body":{"index.html":{}}}],["overview",{"_index":612,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":537,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":189,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagechanged",{"_index":215,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagechanges",{"_index":191,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemoptions",{"_index":208,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitems",{"_index":209,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschange",{"_index":216,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschanged",{"_index":204,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschanged(event",{"_index":258,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemslabel",{"_index":210,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagelabel",{"_index":211,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pages",{"_index":238,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagination",{"_index":50,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["pagination'},{'name",{"_index":178,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["pagination.component.css",{"_index":198,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagination.component.html",{"_index":197,"title":{},"body":{"components/PaginationComponent.html":{}}}],["paginationcomponent",{"_index":177,"title":{"components/PaginationComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["pairs",{"_index":70,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["param",{"_index":164,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["parameters",{"_index":144,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["per",{"_index":188,"title":{},"body":{"components/PaginationComponent.html":{}}}],["placeholder",{"_index":308,"title":{},"body":{"injectables/TableDataService.html":{}}}],["port",{"_index":585,"title":{},"body":{"index.html":{}}}],["positive",{"_index":241,"title":{},"body":{"components/PaginationComponent.html":{}}}],["possible",{"_index":71,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["preferred",{"_index":12,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["prev",{"_index":249,"title":{},"body":{"components/PaginationComponent.html":{}}}],["previouslabel",{"_index":212,"title":{},"body":{"components/PaginationComponent.html":{}}}],["previously",{"_index":428,"title":{},"body":{"injectables/TableDataService.html":{}}}],["primeflex",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":316,"title":{},"body":{"injectables/TableDataService.html":{}}}],["process",{"_index":341,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processed",{"_index":353,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processing",{"_index":301,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processtabledata",{"_index":324,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processtabledata(raw",{"_index":364,"title":{},"body":{"injectables/TableDataService.html":{}}}],["project",{"_index":569,"title":{},"body":{"index.html":{}}}],["proper",{"_index":379,"title":{},"body":{"injectables/TableDataService.html":{}}}],["properly",{"_index":382,"title":{},"body":{"injectables/TableDataService.html":{}}}],["properties",{"_index":19,"title":{"properties.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"properties.html":{}}}],["property",{"_index":479,"title":{},"body":{"classes/TableUtils.html":{}}}],["provide",{"_index":93,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["providedin",{"_index":407,"title":{},"body":{"injectables/TableDataService.html":{}}}],["r[table_index_column_name",{"_index":436,"title":{},"body":{"injectables/TableDataService.html":{}}}],["range",{"_index":47,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["rangestate",{"_index":55,"title":{"interfaces/RangeState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["raw",{"_index":367,"title":{},"body":{"injectables/TableDataService.html":{}}}],["raw.map(tableutils.flattenobjecttorow",{"_index":433,"title":{},"body":{"injectables/TableDataService.html":{}}}],["record",{"_index":66,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["records",{"_index":357,"title":{},"body":{"injectables/TableDataService.html":{}}}],["replace",{"_index":376,"title":{},"body":{"injectables/TableDataService.html":{}}}],["replaceindex",{"_index":439,"title":{},"body":{"injectables/TableDataService.html":{}}}],["represent",{"_index":41,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["request",{"_index":348,"title":{},"body":{"injectables/TableDataService.html":{}}}],["resetfilter",{"_index":111,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["resetlabel",{"_index":119,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["response",{"_index":342,"title":{},"body":{"injectables/TableDataService.html":{}}}],["rest",{"_index":384,"title":{},"body":{"injectables/TableDataService.html":{}}}],["result",{"_index":347,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["results",{"_index":77,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":279,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["returns",{"_index":145,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["reusable",{"_index":447,"title":{},"body":{"classes/TableUtils.html":{}}}],["root",{"_index":343,"title":{},"body":{"injectables/TableDataService.html":{}}}],["row",{"_index":67,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["row[key",{"_index":499,"title":{},"body":{"classes/TableUtils.html":{}}}],["rows",{"_index":360,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["run",{"_index":579,"title":{},"body":{"index.html":{}}}],["running",{"_index":592,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":401,"title":{},"body":{"injectables/TableDataService.html":{},"dependencies.html":{}}}],["same",{"_index":307,"title":{},"body":{"injectables/TableDataService.html":{}}}],["save",{"_index":372,"title":{},"body":{"injectables/TableDataService.html":{}}}],["savetablechages",{"_index":325,"title":{},"body":{"injectables/TableDataService.html":{}}}],["savetablechages(src",{"_index":369,"title":{},"body":{"injectables/TableDataService.html":{}}}],["saving",{"_index":309,"title":{},"body":{"injectables/TableDataService.html":{}}}],["search",{"_index":132,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["see",{"_index":567,"title":{},"body":{"index.html":{}}}],["select",{"_index":96,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selected",{"_index":193,"title":{},"body":{"components/PaginationComponent.html":{}}}],["selectedcategorychanged",{"_index":112,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selectedcategorychanged(event",{"_index":148,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selector",{"_index":98,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["seperator",{"_index":393,"title":{},"body":{"injectables/TableDataService.html":{}}}],["serve",{"_index":581,"title":{},"body":{"index.html":{}}}],["server",{"_index":578,"title":{},"body":{"index.html":{}}}],["service",{"_index":299,"title":{},"body":{"injectables/TableDataService.html":{}}}],["set",{"_index":63,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["setcategoryselect(categories",{"_index":151,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["setpage",{"_index":205,"title":{},"body":{"components/PaginationComponent.html":{}}}],["setpage(page",{"_index":262,"title":{},"body":{"components/PaginationComponent.html":{}}}],["setting",{"_index":185,"title":{},"body":{"components/PaginationComponent.html":{}}}],["settotalitems(n",{"_index":273,"title":{},"body":{"components/PaginationComponent.html":{}}}],["shared/table",{"_index":403,"title":{},"body":{"injectables/TableDataService.html":{}}}],["shared/table.model",{"_index":275,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["sharereplay",{"_index":399,"title":{},"body":{"injectables/TableDataService.html":{}}}],["sharereplay(1",{"_index":431,"title":{},"body":{"injectables/TableDataService.html":{}}}],["show",{"_index":225,"title":{},"body":{"components/PaginationComponent.html":{}}}],["showpageitemsselection",{"_index":213,"title":{},"body":{"components/PaginationComponent.html":{}}}],["simple",{"_index":375,"title":{},"body":{"injectables/TableDataService.html":{}}}],["sort",{"_index":475,"title":{},"body":{"classes/TableUtils.html":{}}}],["sorted",{"_index":45,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["sorting",{"_index":30,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["sortmode",{"_index":472,"title":{},"body":{"classes/TableUtils.html":{}}}],["sortstate",{"_index":51,"title":{"interfaces/SortState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["sorttablefn",{"_index":452,"title":{},"body":{"classes/TableUtils.html":{}}}],["sorttablefn(columnname",{"_index":471,"title":{},"body":{"classes/TableUtils.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["space",{"_index":291,"title":{},"body":{"components/PaginationComponent.html":{}}}],["spec",{"_index":75,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{}}}],["src",{"_index":365,"title":{},"body":{"injectables/TableDataService.html":{}}}],["src/.../table.model.ts",{"_index":562,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/baader",{"_index":6,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":100,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["start",{"_index":56,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["started",{"_index":564,"title":{"index.html":{}},"body":{}}],["state",{"_index":31,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["statements",{"_index":516,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":448,"title":{},"body":{"classes/TableUtils.html":{}}}],["still",{"_index":349,"title":{},"body":{"injectables/TableDataService.html":{}}}],["stored",{"_index":601,"title":{},"body":{"index.html":{}}}],["string",{"_index":23,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":106,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["subset",{"_index":467,"title":{},"body":{"classes/TableUtils.html":{}}}],["such",{"_index":303,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["table",{"_index":61,"title":{"interfaces/Table.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["table!.data[replaceindex",{"_index":441,"title":{},"body":{"injectables/TableDataService.html":{}}}],["table.data.length",{"_index":424,"title":{},"body":{"injectables/TableDataService.html":{}}}],["table.model",{"_index":485,"title":{},"body":{"classes/TableUtils.html":{}}}],["table/components/filter",{"_index":85,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["table/components/pagination/pagination.component.ts",{"_index":183,"title":{},"body":{"components/PaginationComponent.html":{},"coverage.html":{}}}],["table/components/pagination/pagination.component.ts:20",{"_index":224,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:22",{"_index":233,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:25",{"_index":223,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:28",{"_index":230,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:31",{"_index":231,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:35",{"_index":232,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:37",{"_index":227,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:38",{"_index":228,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:39",{"_index":217,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:40",{"_index":226,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:42",{"_index":272,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:43",{"_index":271,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:45",{"_index":257,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:53",{"_index":268,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:63",{"_index":263,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:75",{"_index":235,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:83",{"_index":259,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:94",{"_index":246,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/table",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["table/services/table",{"_index":297,"title":{},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["table/shared/table",{"_index":445,"title":{},"body":{"classes/TableUtils.html":{},"coverage.html":{}}}],["table/shared/table.model.ts",{"_index":7,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["table_index_column_name",{"_index":28,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tableassignment",{"_index":565,"title":{},"body":{"index.html":{}}}],["tabledataservice",{"_index":295,"title":{"injectables/TableDataService.html":{}},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["tablerow",{"_index":73,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["tablerows",{"_index":478,"title":{},"body":{"classes/TableUtils.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["tablespec",{"_index":65,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["tablespect",{"_index":59,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["tableutils",{"_index":402,"title":{"classes/TableUtils.html":{}},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["tableutils.flattenobjecttorow(o[key",{"_index":493,"title":{},"body":{"classes/TableUtils.html":{}}}],["tableutils.infercolumntypes(data.slice(0",{"_index":434,"title":{},"body":{"injectables/TableDataService.html":{}}}],["tableviewcomponent",{"_index":179,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["tap",{"_index":400,"title":{},"body":{"injectables/TableDataService.html":{}}}],["tap(table",{"_index":418,"title":{},"body":{"injectables/TableDataService.html":{}}}],["template",{"_index":82,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["templateurl",{"_index":104,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["test",{"_index":607,"title":{},"body":{"index.html":{}}}],["tests",{"_index":605,"title":{},"body":{"index.html":{}}}],["this._categories",{"_index":158,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this._currentpage",{"_index":283,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this._totalitems",{"_index":277,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.cache.get(url",{"_index":411,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.cache.has(url",{"_index":420,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.cache.set(url",{"_index":425,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.category",{"_index":166,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.categorychange.emit(this.category",{"_index":167,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.datasourcechanged.emit(src",{"_index":442,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.datasourcechanged.emit(url",{"_index":430,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.filter",{"_index":160,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.filterchange.emit(this.filter",{"_index":163,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.gettabledata$(url).pipe",{"_index":415,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.http.get(url",{"_index":409,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.delete(url",{"_index":426,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.get(url",{"_index":414,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.set(url",{"_index":432,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.pagechanged.emit",{"_index":286,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.pageitems",{"_index":282,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.pageitemschange.emit(this.pageitems",{"_index":289,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.processtabledata(response",{"_index":417,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.setpage(0",{"_index":278,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.setpage(this._currentpage",{"_index":287,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.totalpages",{"_index":285,"title":{},"body":{"components/PaginationComponent.html":{}}}],["todo",{"_index":606,"title":{},"body":{"index.html":{}}}],["total",{"_index":186,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalitems",{"_index":214,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalitems(n",{"_index":276,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalpages",{"_index":206,"title":{},"body":{"components/PaginationComponent.html":{}}}],["track",{"_index":169,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["tracking",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":84,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["triggers",{"_index":190,"title":{},"body":{"components/PaginationComponent.html":{}}}],["true",{"_index":101,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["tslib",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":24,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":615,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":489,"title":{},"body":{"classes/TableUtils.html":{}}}],["types",{"_index":72,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["undefined",{"_index":503,"title":{},"body":{"classes/TableUtils.html":{}}}],["under",{"_index":589,"title":{},"body":{"index.html":{}}}],["undo",{"_index":387,"title":{},"body":{"injectables/TableDataService.html":{}}}],["unit",{"_index":604,"title":{},"body":{"index.html":{}}}],["update",{"_index":383,"title":{},"body":{"injectables/TableDataService.html":{}}}],["url",{"_index":76,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{}}}],["use",{"_index":346,"title":{},"body":{"injectables/TableDataService.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":9,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"index.html":{}}}],["using",{"_index":584,"title":{},"body":{"index.html":{}}}],["utils",{"_index":404,"title":{},"body":{"injectables/TableDataService.html":{}}}],["utils.ts",{"_index":446,"title":{},"body":{"classes/TableUtils.html":{},"coverage.html":{}}}],["utils.ts:15",{"_index":454,"title":{},"body":{"classes/TableUtils.html":{}}}],["utils.ts:37",{"_index":463,"title":{},"body":{"classes/TableUtils.html":{}}}],["utils.ts:67",{"_index":473,"title":{},"body":{"classes/TableUtils.html":{}}}],["value",{"_index":69,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":174,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["variable",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":617,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":456,"title":{},"body":{"classes/TableUtils.html":{},"index.html":{},"properties.html":{}}}],["via",{"_index":609,"title":{},"body":{"index.html":{}}}],["view",{"_index":180,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["view.component.ts",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["view/table",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["viewed",{"_index":43,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["views",{"_index":305,"title":{},"body":{"injectables/TableDataService.html":{}}}],["void",{"_index":146,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["vscodes",{"_index":572,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":192,"title":{},"body":{"components/PaginationComponent.html":{}}}],["working",{"_index":449,"title":{},"body":{"classes/TableUtils.html":{}}}],["yes",{"_index":363,"title":{},"body":{"injectables/TableDataService.html":{}}}],["you're",{"_index":597,"title":{},"body":{"index.html":{}}}],["zone.js",{"_index":558,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ColumnSpec.html":{"url":"interfaces/ColumnSpec.html","title":"interface - ColumnSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ColumnSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dataType\n                                        \n                                \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    name: string;\n    displayName: string;\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\nexport interface SortState {\n    column: string;\n    mode: ColumnSort;\n}\n\nexport interface FilterState {\n    column: string;\n    filter: string;\n}\n\nexport interface RangeState {\n    start: number;\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FilterInputComponent.html":{"url":"components/FilterInputComponent.html","title":"component - FilterInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FilterInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/baader-table/components/filter-input/filter-input.component.ts\n\n\n\n    \n        Description\n    \n    \n        A generic component that can be used to create filter input fields.\nOptional features are:\n\nProvide a list of categories to select from for the filter\n\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                baader-filter-input\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./filter-input.component.html\n            \n\n\n\n            \n                styleUrl\n                ./filter-input.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _categories\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filterValueChanged\n                            \n                            \n                                resetFilter\n                            \n                            \n                                selectedCategoryChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                categoryDefaultValue\n                            \n                            \n                                categoryLabel\n                            \n                            \n                                categorySelect\n                            \n                            \n                                filter\n                            \n                            \n                                filterLabel\n                            \n                            \n                                resetLabel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                categoryChange\n                            \n                            \n                                filterChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    categorySelect\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        category\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        categoryDefaultValue\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:34\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        categoryLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"In Category:\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        categorySelect\n                    \n                \n                \n                    \n                        Type :     [] | null\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filter\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filterLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Search:\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:31\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resetLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Clear\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:36\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        categoryChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filterChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:29\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        filterValueChanged\n                        \n                    \n                \n            \n            \n                \nfilterValueChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:42\n                        \n                    \n\n\n            \n                \n                        Input field for filter string changed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetFilter\n                        \n                    \n                \n            \n            \n                \nresetFilter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:59\n                        \n                    \n\n\n            \n                \n                        Clear all filter parameters\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedCategoryChanged\n                        \n                    \n                \n            \n            \n                \nselectedCategoryChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:51\n                        \n                    \n\n\n            \n                \n                        Which category to filter on changed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        categorySelect\n                    \n                \n\n\n                \n                    \n                        setcategorySelect(categories: string[] | null)\n                    \n                \n                            \n                                \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:20\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            categories\n                                                    \n                                                            \n                                                                        string[] | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n\n/**\n * A generic component that can be used to create filter input fields.\n * Optional features are:\n *  - Provide a list of categories to select from for the filter\n */\n@Component({\n  selector: 'baader-filter-input',\n  standalone: true,\n  imports: [FormsModule],\n  templateUrl: './filter-input.component.html',\n  styleUrl: './filter-input.component.css'\n})\nexport class FilterInputComponent {\n\n  @Input()\n  set categorySelect(categories: string[] | null) {\n    this._categories = categories;\n  }\n  _categories: string[] | null = null;\n\n  @Input() category = \"\";\n  @Output() categoryChange = new EventEmitter();\n\n  @Input() filter = \"\";\n  @Output() filterChange = new EventEmitter();\n\n  @Input() filterLabel = \"Search:\";\n  @Input() categoryLabel = \"In Category:\";\n\n  @Input() categoryDefaultValue = \"\";\n\n  @Input() resetLabel = \"Clear\";\n\n\n  /**\n   * Input field for filter string changed\n   */\n  filterValueChanged(event: Event) {\n    this.filter = (event.target as HTMLInputElement).value;\n    this.filterChange.emit(this.filter);\n  }\n\n  /**\n   * Which category to filter on changed \n   * @param index index of the _categories array\n   */\n  selectedCategoryChanged(event: Event) {\n    this.category = (event.target as HTMLInputElement).value;\n    this.categoryChange.emit(this.category);\n  }\n\n  /**\n   * Clear all filter parameters\n   */\n  resetFilter() {\n    this.category = \"\";\n    this.filter = \"\";\n    this.categoryChange.emit(this.category);\n    this.filterChange.emit(this.filter);\n  }\n\n}\n\n    \n\n    \n        \n    \n        {{filterLabel}}\n    \n    \n        \n    \n    @if (_categories) {\n    \n        \n            {{categoryLabel}}\n        \n        \n            \n                @if (_categories.indexOf(categoryDefaultValue) === -1) {\n                \n                }\n                @for (category of _categories; track $index) {\n                {{category}}\n                }\n            \n        \n    \n    }\n    \n        {{resetLabel}}\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{filterLabel}}                        @if (_categories) {                        {{categoryLabel}}                                            @if (_categories.indexOf(categoryDefaultValue) === -1) {                                }                @for (category of _categories; track $index) {                {{category}}                }                            }            {{resetLabel}}    '\n    var COMPONENTS = [{'name': 'FilterInputComponent', 'selector': 'baader-filter-input'},{'name': 'PaginationComponent', 'selector': 'baader-pagination'},{'name': 'TableViewComponent', 'selector': 'baader-table-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FilterInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterState.html":{"url":"interfaces/FilterState.html","title":"interface - FilterState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FilterState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            filter\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filter:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    name: string;\n    displayName: string;\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\nexport interface SortState {\n    column: string;\n    mode: ColumnSort;\n}\n\nexport interface FilterState {\n    column: string;\n    filter: string;\n}\n\nexport interface RangeState {\n    start: number;\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PaginationComponent.html":{"url":"components/PaginationComponent.html","title":"component - PaginationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PaginationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/baader-table/components/pagination/pagination.component.ts\n\n\n\n    \n        Description\n    \n    \n        Generic Pagination component.\nConfigured by setting total items and items per page.\nTriggers pageChanges event whenever the selected page changes.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                baader-pagination\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./pagination.component.html\n            \n\n\n\n            \n                styleUrl\n                ./pagination.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _currentPage\n                            \n                            \n                                _totalItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePage\n                            \n                            \n                                navButtonKbd\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                pageItemsChanged\n                            \n                            \n                                setPage\n                            \n                            \n                                totalPages\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                nextLabel\n                            \n                            \n                                pageItemOptions\n                            \n                            \n                                pageItems\n                            \n                            \n                                pageItemsLabel\n                            \n                            \n                                pageLabel\n                            \n                            \n                                previousLabel\n                            \n                            \n                                showPageItemsSelection\n                            \n                            \n                                totalItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                pageChanged\n                            \n                            \n                                pageItemsChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    totalItems\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        nextLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"→\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemOptions\n                    \n                \n                \n                    \n                        Type :     {}\n\n                    \n                \n                \n                    \n                        Default value : [5, 10, 20, 50, 100]\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItems\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemsLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Show Items\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Page\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        previousLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"←\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showPageItemsSelection\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        totalItems\n                    \n                \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:31\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        pageChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:35\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemsChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:22\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changePage\n                        \n                    \n                \n            \n            \n                \nchangePage(direction: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:75\n                        \n                    \n\n\n            \n                \n                        Increase/decrease page by n='direction' pages\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    number of pages to change (positive or negative)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navButtonKbd\n                        \n                    \n                \n            \n            \n                \nnavButtonKbd(direction: number, keyEvent: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:94\n                        \n                    \n\n\n            \n                \n                        Make the \"Next\" and \"Prev\" buttons accessible by keyboard events.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    number of pages to change (positive or negative)\n\n                                            \n                                        \n                                        \n                                                keyEvent\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    check if key event is a \"confirm-like\" button.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageItemsChanged\n                        \n                    \n                \n            \n            \n                \npageItemsChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:83\n                        \n                    \n\n\n            \n                \n                        Handle the number of items per page selector value change.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Event from HTML Input element (selector) containing selected value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPage\n                        \n                    \n                \n            \n            \n                \nsetPage(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:63\n                        \n                    \n\n\n            \n                \n                        Set desired page directly (i.e. from dropdown or externally)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    page to set to\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPages\n                        \n                    \n                \n            \n            \n                \ntotalPages()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:53\n                        \n                    \n\n\n            \n                \n                        Calculate total number of pages\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                total number needed for all data\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _currentPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/pagination/pagination.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _totalItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/pagination/pagination.component.ts:42\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        totalItems\n                    \n                \n\n\n                \n                    \n                        settotalItems(n: number | null)\n                    \n                \n                            \n                                \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:31\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            n\n                                                    \n                                                            \n                                                                        number | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RangeState } from '../../shared/table.model';\n\n/**\n * Generic Pagination component.\n * Configured by setting total items and items per page.\n * Triggers pageChanges event whenever the selected page changes.\n */\n@Component({\n  selector: 'baader-pagination',\n  standalone: true,\n  imports: [FormsModule],\n  templateUrl: './pagination.component.html',\n  styleUrl: './pagination.component.css'\n})\nexport class PaginationComponent implements OnInit {\n\n  @Input()\n  pageItems = 10;\n\n  @Output() pageItemsChange = new EventEmitter();\n\n  @Input()\n  pageItemOptions = [5, 10, 20, 50, 100];\n\n  @Input()\n  showPageItemsSelection = true;\n\n  @Input()\n  set totalItems(n: number | null) {\n    this._totalItems = n;\n  }\n\n  @Output() pageChanged = new EventEmitter();\n\n  @Input() pageLabel = \"Page\";\n  @Input() previousLabel = \"←\";\n  @Input() nextLabel = \"→\";\n  @Input() pageItemsLabel = \"Show Items\";\n\n  _totalItems: number | null = null;\n  _currentPage = 0;\n\n  ngOnInit() {\n    this.setPage(0);\n  }\n\n  /**\n   * Calculate total number of pages\n   * @returns total number needed for all data\n   */\n  totalPages(): number {\n    if (this._totalItems === null)\n      return 1;\n    return Math.max(1, Math.ceil(this._totalItems / this.pageItems));\n  }\n\n  /**\n   * Set desired page directly (i.e. from dropdown or externally)\n   * @param page page to set to\n   */\n  setPage(page: number) {\n    this._currentPage = Math.min(Math.max(0, page), this.totalPages() - 1);\n    this.pageChanged.emit({\n      start: this._currentPage * this.pageItems,\n      length: this.pageItems\n    });\n  }\n\n  /**\n   * Increase/decrease page by n='direction' pages\n   * @param direction number of pages to change (positive or negative)\n   */\n  changePage(direction: number) {\n    this.setPage(this._currentPage + direction);\n  }\n\n  /**\n   * Handle the number of items per page selector value change.\n   * @param event Event from HTML Input element (selector) containing selected value\n   */\n  pageItemsChanged(event: Event) {\n    this.pageItems = Number((event.target as HTMLInputElement).value);\n    this.pageItemsChange.emit(this.pageItems);\n    this.setPage(this._currentPage);\n  }\n\n  /**\n   * Make the \"Next\" and \"Prev\" buttons accessible by keyboard events.\n   * @param direction number of pages to change (positive or negative)\n   * @param keyEvent check if key event is a \"confirm-like\" button.\n   */\n  navButtonKbd(direction: number, keyEvent: KeyboardEvent) {\n    if (keyEvent.code === \"Space\" || keyEvent.code === \"Enter\") {\n      this.setPage(this._currentPage + direction);\n    }\n  }\n}\n\n    \n\n    \n        \n    \n        \n        {{previousLabel}}\n        {{pageLabel}} {{_currentPage+1}} / {{totalPages()}}\n        {{nextLabel}}\n        @if (showPageItemsSelection) {\n        \n            \n                {{pageItemsLabel}}\n            \n            \n                @for (n of pageItemOptions; track $index) {\n                {{n}}\n                }\n            \n        \n        }\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{previousLabel}}        {{pageLabel}} {{_currentPage+1}} / {{totalPages()}}        {{nextLabel}}        @if (showPageItemsSelection) {                                    {{pageItemsLabel}}                                        @for (n of pageItemOptions; track $index) {                {{n}}                }                            }    '\n    var COMPONENTS = [{'name': 'FilterInputComponent', 'selector': 'baader-filter-input'},{'name': 'PaginationComponent', 'selector': 'baader-pagination'},{'name': 'TableViewComponent', 'selector': 'baader-table-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PaginationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RangeState.html":{"url":"interfaces/RangeState.html","title":"interface - RangeState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RangeState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            start\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    name: string;\n    displayName: string;\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\nexport interface SortState {\n    column: string;\n    mode: ColumnSort;\n}\n\nexport interface FilterState {\n    column: string;\n    filter: string;\n}\n\nexport interface RangeState {\n    start: number;\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SortState.html":{"url":"interfaces/SortState.html","title":"interface - SortState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SortState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                The following interfaces represent the state of the data viewed,\nI.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:         ColumnSort\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColumnSort\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    name: string;\n    displayName: string;\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\nexport interface SortState {\n    column: string;\n    mode: ColumnSort;\n}\n\nexport interface FilterState {\n    column: string;\n    filter: string;\n}\n\nexport interface RangeState {\n    start: number;\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Table.html":{"url":"interfaces/Table.html","title":"interface - Table","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Table\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                A Table is the combination of row data data and description of it's columns\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            spec\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         TableRow[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TableRow[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        spec\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        spec:         TableSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TableSpec\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    name: string;\n    displayName: string;\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\nexport interface SortState {\n    column: string;\n    mode: ColumnSort;\n}\n\nexport interface FilterState {\n    column: string;\n    filter: string;\n}\n\nexport interface RangeState {\n    start: number;\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TableDataService.html":{"url":"injectables/TableDataService.html","title":"injectable - TableDataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TableDataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/services/table-data.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for fetching & processing table data.\nTable data is cached, such that multiple table views can be created of the same data.\nThere is a placeholder for saving changes to API/File. Further implementation details would depend on the context.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                dataSourceChanged\n                            \n                            \n                                    Private\n                                ongoingRequests\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData$\n                            \n                            \n                                getTable$\n                            \n                            \n                                getTableData$\n                            \n                            \n                                isCached\n                            \n                            \n                                processTableData\n                            \n                            \n                                saveTableChages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/baader-table/services/table-data.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData$\n                        \n                    \n                \n            \n            \n                \ngetData$(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Fetch json data from some url (such as an API endpoint)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL to fetch data from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of the fetched data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTable$\n                        \n                    \n                \n            \n            \n                \ngetTable$(url: string, cached)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Fetch data from an endpoint with table data and process it.\nCache the results.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    the url to fetch data from. Response data must be a table-like response with an array as the root object\n\n                                            \n                                        \n                                        \n                                                cached\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    if available, use a cached result (request will still be cached/overwrite cached copies)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable of the table being fetched and processed\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTableData$\n                        \n                    \n                \n            \n            \n                \ngetTableData$(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Fetch json table data from some url (such as an API endpoint)\nExpects the root element of the response to be an array-of-records-type (use getData$() instead otherwise)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL to fetch data from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of the fetched table rows.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCached\n                        \n                    \n                \n            \n            \n                \nisCached(url?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        processTableData\n                        \n                    \n                \n            \n            \n                \nprocessTableData(raw: object[], src?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Process generic array object to Table data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                raw\n                                            \n                                                        object[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    array of objects\n\n                                            \n                                        \n                                        \n                                                src\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    string to describe the source (url) of the Table\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Table\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveTableChages\n                        \n                    \n                \n            \n            \n                \nsaveTableChages(src: string, newRowData: TableRow)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Save a changed row: implemented here as a simple replace operation on the cached memory.\nFor a proper implementation this would need more context to properly update the data (i.e. a REST API definition).\nAlso beware that for a proper implementation, we would need to be able to undo the flattening process of nested objects\ni.e. by keeping track of a mapping when flattening, or by deriving it from the seperator used in the column name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                src\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the url of the table in cache\n\n                                            \n                                        \n                                        \n                                                newRowData\n                                            \n                                                            TableRow\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the new row data (will replace the row based on the __index field in newRowData)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataSourceChanged\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new EventEmitter()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ongoingRequests\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map>()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map, of, shareReplay, tap } from 'rxjs';\nimport { TABLE_INDEX_COLUMN_NAME, Table, TableRow } from '../shared/table.model';\nimport { TableUtils } from '../shared/table-utils';\nimport { environment } from '../../../environments/environment';\n\n/**\n * Service for fetching & processing table data. \n * Table data is cached, such that multiple table views can be created of the same data.\n * There is a placeholder for saving changes to API/File. Further implementation details would depend on the context.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableDataService {\n\n  constructor(private http: HttpClient) { }\n\n  private cache = new Map();\n  private ongoingRequests = new Map>();\n\n  dataSourceChanged = new EventEmitter();\n\n  /**\n   * Fetch json table data from some url (such as an API endpoint)\n   * Expects the root element of the response to be an array-of-records-type (use getData$() instead otherwise)\n   * @param url The URL to fetch data from.\n   * @returns An Observable of the fetched table rows.\n   */\n  getTableData$(url: string): Observable {\n    return this.http.get(url);\n  }\n\n  /**\n   * Fetch json data from some url (such as an API endpoint)\n   * @param url The URL to fetch data from.\n   * @returns An Observable of the fetched data.\n   */\n  getData$(url: string): Observable {\n    return this.http.get(url);\n  }\n\n  /**\n   * Fetch data from an endpoint with table data and process it.\n   * Cache the results.\n   * @param url the url to fetch data from. Response data must be a table-like response with an array as the root object\n   * @param cached if available, use a cached result (request will still be cached/overwrite cached copies)\n   * @returns An Observable of the table being fetched and processed\n   */\n  getTable$(url: string, cached = true): Observable {\n    const cachedResponse = this.cache.get(url);\n    if (cached && cachedResponse) {\n      return of(cachedResponse);\n    }\n\n    const ongoingRequest = this.ongoingRequests.get(url);\n    if (ongoingRequest) {\n      return ongoingRequest;\n    }\n\n    const request$ = this.getTableData$(url).pipe(\n      map(response => {\n        return this.processTableData(response, url)\n      }),\n      tap(table => {\n        const notify_changes = this.cache.has(url);\n        if (!environment.prod)\n          console.log(`Cached ${url} with a table of ${Object.keys(table.spec).length} columns and ${table.data.length} rows`);\n        this.cache.set(url, table);\n        this.ongoingRequests.delete(url);\n\n        if (notify_changes) {\n          if (!environment.prod)\n            console.log(`Updated previously cached table. Notifying of changes`);\n          this.dataSourceChanged.emit(url);\n        }\n      }),\n      shareReplay(1)\n    );\n\n    this.ongoingRequests.set(url, request$);\n    return request$;\n  }\n\n  /**\n   * Process generic array object to Table data\n   * @param raw array of objects\n   * @param src string to describe the source (url) of the Table\n   * @returns \n   */\n  processTableData(raw: object[], src?: string): Table {\n    const data = raw.map(TableUtils.flattenObjectToRow);\n\n    const spec = TableUtils.inferColumnTypes(data.slice(0, 10));\n\n    for (let idx = 0; idx  (r[TABLE_INDEX_COLUMN_NAME] == newRowData[TABLE_INDEX_COLUMN_NAME]));\n    if (!environment.prod)\n      console.log(`Replacing row ${replaceIndex} Old Data / New Data:`, table!.data[replaceIndex], newRowData);\n    table!.data[replaceIndex] = newRowData;\n    this.dataSourceChanged.emit(src);\n  }\n\n  isCached(url?: string): boolean {\n    if (!url)\n      return false;\n    return this.cache.has(url);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TableUtils.html":{"url":"classes/TableUtils.html","title":"class - TableUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TableUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table-utils.ts\n        \n\n\n            \n                Description\n            \n            \n                Reusable static methods for working with table data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                flattenObjectToRow\n                            \n                            \n                                    Static\n                                inferColumnTypes\n                            \n                            \n                                    Static\n                                sortTableFn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        flattenObjectToRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    flattenObjectToRow(o: object)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:15\n                        \n                    \n\n\n            \n                \n                        Return a flattened version of an object, such that all properties in o['a']['b']['c'] are\nproperties o['a.b.c'] in the result\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                o\n                                            \n                                                            object\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An object to flatten.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TableRow\n\n                        \n                            \n                                A flattened copy of the object of type TableRow\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        inferColumnTypes\n                        \n                    \n                \n            \n            \n                \n                        \n                    inferColumnTypes(rows: TableRow[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:37\n                        \n                    \n\n\n            \n                \n                        Infer data types in the table columns by analysing multiple rows of a table\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                rows\n                                            \n                                                            TableRow[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    table row data in flattened form (can be a subset of the table).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TableSpec\n\n                        \n                            \n                                a TableSpec object with an entry for each column by name, describing column data type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        sortTableFn\n                        \n                    \n                \n            \n            \n                \n                        \n                    sortTableFn(columnName: string, sortMode: ColumnSort)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:67\n                        \n                    \n\n\n            \n                \n                        Generate a sort function that compares TableRows based on property columnName.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                columnName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the column to compare in the sort fn\n\n                                            \n                                        \n                                        \n                                                sortMode\n                                            \n                                                            ColumnSort\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Sort direction, either ColumnSort.ASC or ColumnSort.DESC\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                a sort function\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ColumnSpec, TableSpec, TableRow, ColumnSort } from \"./table.model\";\n\n\n/**\n * Reusable static methods for working with table data\n */\nexport class TableUtils {\n\n  /**\n   * Return a flattened version of an object, such that all properties in o['a']['b']['c'] are\n   * properties o['a.b.c'] in the result\n   * @param o An object to flatten.\n   * @returns A flattened copy of the object of type TableRow\n   */\n  static flattenObjectToRow(o: object): TableRow {\n    const o_flat: TableRow = {};\n    for (const key of Object.keys(o) as (keyof typeof o)[]) {\n      // This will flatten arrays and objects alike\n      if (typeof (o[key]) === 'object' && o[key] !== null) {\n        const nested = TableUtils.flattenObjectToRow(o[key]);\n        // nestedKey is either property name of object or index of array.\n        for (const nestedKey of Object.keys(nested)) {\n          o_flat[`${key}.${nestedKey}`] = nested[nestedKey];\n        }\n      } else {\n        o_flat[key] = o[key];\n      }\n    }\n    return o_flat;\n  }\n\n  /**\n   * Infer data types in the table columns by analysing multiple rows of a table\n   * @param rows table row data in flattened form (can be a subset of the table).\n   * @returns a TableSpec object with an entry for each column by name, describing column data type.\n   */\n  static inferColumnTypes(rows: TableRow[]): TableSpec {\n    const columns: TableSpec = {};\n    for (const row of rows) {\n      for (const key in row) {\n        const dataType = typeof row[key];\n\n        if (row[key] === null) // Do not infer column type from missing data\n          continue;\n\n        if (columns[key] === undefined) {\n          columns[key] = {\n            name: key,\n            displayName: key,\n            dataType: dataType,\n            sort: ColumnSort.NONE\n          } as ColumnSpec;\n        } else if (columns[key].dataType !== dataType) {\n          columns[key].dataType = \"mixed\";\n        }\n      }\n    }\n    return columns;\n  }\n\n  /**\n   * Generate a sort function that compares TableRows based on property columnName.\n   * @param columnName Name of the column to compare in the sort fn\n   * @param sortMode Sort direction, either ColumnSort.ASC or ColumnSort.DESC\n   * @returns a sort function\n   */\n  static sortTableFn(columnName: string, sortMode: ColumnSort): (a: TableRow, b: TableRow) => number {\n    return (a, b) => {\n      const aval = a[columnName];\n      const bval = b[columnName];\n      let cval = 0;\n      if (bval === null && aval === null) {\n        cval = 0;\n      } else if (aval !== null && bval !== null && aval > bval || aval === null && bval !== null) {\n        cval = 1;\n      } else if (aval !== null && bval !== null && aval \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/baader-table/components/filter-input/filter-input.component.ts\n            \n            component\n            FilterInputComponent\n            \n                28 %\n                (4/14)\n            \n        \n        \n            \n                \n                src/app/baader-table/components/pagination/pagination.component.ts\n            \n            component\n            PaginationComponent\n            \n                31 %\n                (6/19)\n            \n        \n        \n            \n                \n                src/app/baader-table/components/table-view/table-view.component.ts\n            \n            component\n            TableViewComponent\n            \n                38 %\n                (23/60)\n            \n        \n        \n            \n                \n                src/app/baader-table/services/table-data.service.ts\n            \n            injectable\n            TableDataService\n            \n                54 %\n                (6/11)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table-utils.ts\n            \n            class\n            TableUtils\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            ColumnSpec\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            FilterState\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            RangeState\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            SortState\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            Table\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            variable\n            TABLE_INDEX_COLUMN_NAME\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.0.0\n        \n            @angular/cdk : ^18.0.1\n        \n            @angular/common : ^18.0.0\n        \n            @angular/compiler : ^18.0.0\n        \n            @angular/core : ^18.0.0\n        \n            @angular/forms : ^18.0.0\n        \n            @angular/platform-browser : ^18.0.0\n        \n            @angular/platform-browser-dynamic : ^18.0.0\n        \n            @angular/router : ^18.0.0\n        \n            marked : ^12.0.2\n        \n            ngx-markdown : ^18.0.0\n        \n            primeflex : ^3.3.1\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ColumnSort   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ColumnSort\n                    \n                \n                    \n                        \n                            Describe sorting state of a column\n\n                        \n                    \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nTableAssignment\nFor details on the Assignment, see ASSIGNMENT.md.\nThis project is a docker container that can be used with VSCodes Dev Container features.\nThe angular project was generated with Angular CLI version 18.0.1.\nDevelopment server\nRun ng serve to host the application using the dev server.\nThe port is :4342. This container is configured to forward this port to your machine.\nThe application should be available under http://localhost:4342/ once the dev server is running.\nNote that for Dev Container compatibility, this dev server is configured to listen to host 0.0.0.0 (all interfaces). \nSo beware if you're running this outside of a docker container.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nTODO\nRun ng test to execute the unit tests via Karma.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    3 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TableRow   (src/.../table.model.ts)\n                        \n                        \n                            TableSpec   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n    \n        \n            \n                \n                    \n                    TableRow\n                \n            \n            \n                \n                    A table row is a set of key value pairs with these possible value types.\n\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TableSpec\n                \n            \n            \n                \n                    A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TABLE_INDEX_COLUMN_NAME   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TABLE_INDEX_COLUMN_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__index'\n                    \n                \n\n            \n                \n                    Use this string to create a tracking entry for row data.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
