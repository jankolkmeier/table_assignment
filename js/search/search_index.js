var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ColumnSpec.html",[0,0.533,1,0.854]],["body/interfaces/ColumnSpec.html",[0,0.862,1,1.039,2,1.201,3,0.634,4,0.895,5,0.542,6,0.312,7,0.634,8,0.895,9,1.513,10,1.596,11,1.381,12,1.601,13,2.018,14,1.601,15,2.018,16,1.584,17,1.912,18,0.441,19,0.649,20,1.386,21,1.746,22,1.297,23,1.199,24,0.767,25,0.058,26,1.157,27,1.601,28,1.201,29,1.601,30,1.601,31,1.039,32,1.386,33,1.19,34,1.319,35,0.85,36,0.735,37,0.85,38,1.386,39,1.607,40,1.134,41,1.201,42,0.981,43,0.735,44,0.981,45,0.542,46,0.981,47,0.981,48,1.134,49,1.134,50,1.134,51,1.038,52,1.601,53,1.134,54,1.386,55,1.134,56,0.735,57,0.981,58,1.857,59,0.609,60,0.85,61,1.386,62,1.601,63,1.134,64,0.634,65,0.85,66,1.134,67,1.746,68,0.981,69,1.134,70,0.735,71,1.134,72,1.201,73,1.134,74,0.735,75,0.981,76,1.134,77,0.981,78,1.392,79,0.85,80,0.981,81,0.981,82,0.981,83,0.981,84,1.386,85,1.039,86,0.981,87,1.201,88,1.386,89,0.735,90,0.649,91,0.981,92,0.981,93,0.85,94,1.039,95,1.134,96,1.134,97,1.386,98,1.134,99,0.981,100,0.034,101,0.034]],["title/components/FilterInputComponent.html",[102,1.317,103,1.53]],["body/components/FilterInputComponent.html",[3,0.422,4,0.422,5,0.361,6,0.626,8,0.422,9,0.887,16,0.768,18,0.494,19,0.479,20,1.551,22,1.002,23,1.181,24,0.745,25,0.058,26,0.566,28,1.703,34,0.815,45,0.566,56,1.071,59,0.208,64,1.063,67,1.871,70,0.946,72,1.871,85,0.49,90,0.77,100,0.041,101,0.025,102,1.987,103,2.208,104,1.615,105,1.236,106,1.236,107,1.236,108,3.716,109,3.716,110,1.236,111,1.615,112,1.936,113,2.423,114,2.423,115,2.423,116,2.423,117,3.893,118,2.423,119,1.936,120,1.936,121,2.7,122,2.7,123,1.936,124,1.094,125,1.936,126,4.708,127,2.423,128,2.423,129,2.423,130,2.423,131,2.423,132,2.7,133,2.082,134,2.423,135,1.236,136,2.932,137,2.932,138,1.936,139,1.615,140,2.386,141,2.423,142,1.936,143,2.423,144,4.212,145,1.375,146,2.423,147,3.38,148,2.423,149,1.936,150,2.987,151,3.67,152,3.38,153,3.67,154,3.67,155,1.936,156,2.987,157,1.936,158,2.603,159,1.547,160,1.547,161,2.806,162,2.423,163,1.547,164,1.547,165,3.38,166,1.547,167,1.99,168,1.547,169,2.423,170,3.364,171,1.547,172,1.936,173,2.7,174,2.082,175,1.918,176,2.252,177,1.547,178,2.423,179,1.547,180,1.547,181,1.547,182,1.695,183,1.936,184,0.878,185,1.031,186,1.031,187,1.236,188,2.386,189,1.547,190,1.547,191,2.423,192,2.423,193,1.936,194,2.987,195,0.878,196,1.031,197,2.423,198,2.423,199,1.936,200,1.236,201,1.615,202,1.236,203,2.7,204,1.236,205,1.236,206,0.878,207,1.236,208,1.031,209,1.236,210,1.236,211,1.236]],["title/interfaces/FilterState.html",[0,0.533,70,0.854]],["body/interfaces/FilterState.html",[0,0.872,1,0.759,2,1.227,3,0.654,4,0.915,5,0.559,6,0.322,7,0.654,8,0.915,9,1.227,10,1.416,11,1.397,12,1.169,13,1.637,14,1.169,15,1.637,16,1.605,17,1.416,18,0.451,19,0.663,21,1.012,22,1.056,23,1.204,24,0.727,25,0.058,26,1.136,27,1.169,28,0.877,29,1.169,30,1.169,31,0.759,32,1.012,33,1.144,34,1.328,35,0.877,36,0.759,37,0.877,38,1.416,39,1.77,40,1.169,41,1.227,42,1.012,43,0.759,44,1.012,45,0.559,46,1.012,47,1.012,48,1.169,49,1.169,50,1.169,51,1.056,52,1.637,53,1.169,54,1.416,55,1.169,56,0.759,57,1.012,58,2.046,59,0.615,60,0.877,61,1.416,62,1.888,63,1.169,64,0.654,65,0.877,66,1.169,67,2.023,68,1.416,69,1.637,70,1.062,71,1.637,72,1.673,73,1.169,74,0.759,75,1.012,76,1.169,77,1.012,78,1.416,79,0.877,80,1.012,81,1.012,82,1.012,83,1.012,84,1.416,85,1.062,86,1.012,87,1.227,88,1.416,89,0.759,90,0.663,91,1.012,92,1.012,93,0.877,94,1.062,95,1.169,96,1.169,97,1.416,98,1.169,99,1.012,100,0.035,101,0.035]],["title/components/PaginationComponent.html",[102,1.317,206,1.53]],["body/components/PaginationComponent.html",[3,0.363,4,0.363,5,0.31,6,0.648,8,0.929,18,0.363,19,0.424,20,1.438,22,1.046,23,0.724,24,0.775,25,0.058,26,0.724,28,1.583,34,0.737,43,0.68,45,0.501,51,0.586,54,0.906,57,1.31,59,0.179,64,1.124,65,1.333,72,0.486,74,0.855,77,0.561,78,1.841,80,1.31,81,0.561,85,1.078,89,0.68,90,0.886,100,0.023,101,0.023,102,1.871,103,0.753,104,1.43,105,1.061,106,1.061,107,1.061,111,1.43,119,1.714,120,1.714,121,2.477,122,2.477,123,1.714,124,0.988,125,1.714,133,1.217,135,1.061,136,3.29,137,2.719,138,1.714,139,2.066,140,2.157,142,1.714,145,1.217,149,1.714,155,1.714,157,1.714,158,2.711,161,2.744,167,2.268,170,3.455,174,1.931,175,2.262,176,2.425,182,1.532,183,2.157,184,0.753,185,0.885,186,0.885,187,1.061,188,2.719,193,1.061,195,1.931,199,1.714,200,1.061,201,2.066,202,1.061,203,2.477,204,1.061,205,1.061,206,2.065,207,1.061,208,0.885,209,2.157,210,1.061,211,1.061,212,1.061,213,1.714,214,2.146,215,3.64,216,2.146,217,2.146,218,2.146,219,2.146,220,3.1,221,4.602,222,1.714,223,3.1,224,1.43,225,2.146,226,2.146,227,1.43,228,2.146,229,2.146,230,2.146,231,2.146,232,2.7,233,2.146,234,2.146,235,2.7,236,2.7,237,2.146,238,2.146,239,3.1,240,2.146,241,2.146,242,3.64,243,3.403,244,3.403,245,2.7,246,3.403,247,3.403,248,3.403,249,3.403,250,2.7,251,2.7,252,1.328,253,1.714,254,2.477,255,2.146,256,2.146,257,1.714,258,1.328,259,1.328,260,3.1,261,1.328,262,1.328,263,1.328,264,1.061,265,1.328,266,2.146,267,1.328,268,1.328,269,2.146,270,1.328,271,2.146,272,2.146,273,3.988,274,3.64,275,3.1,276,3.1,277,2.146,278,3.1,279,2.7,280,1.328,281,1.714,282,2.146,283,2.146,284,2.146,285,2.146,286,2.146,287,2.146,288,2.146,289,2.146,290,2.146,291,1.328,292,2.146,293,1.328,294,2.146,295,2.146,296,2.146,297,2.146,298,1.328,299,2.146,300,2.146,301,2.146,302,2.146,303,1.328,304,2.146,305,3.1,306,2.146,307,1.328,308,1.328,309,1.328,310,3.64,311,1.328,312,2.146,313,1.328,314,1.43,315,1.328,316,1.328,317,3.1,318,2.146,319,1.328,320,1.328,321,1.328,322,2.7,323,1.328,324,1.328,325,2.146,326,1.328,327,1.328,328,2.146]],["title/interfaces/RangeState.html",[0,0.533,74,0.854]],["body/interfaces/RangeState.html",[0,0.874,1,0.762,2,1.231,3,0.657,4,0.918,5,0.562,6,0.324,7,0.657,8,0.918,9,1.231,10,1.419,11,1.33,12,1.174,13,1.642,14,1.174,15,1.642,16,1.543,17,1.421,18,0.522,19,0.665,21,1.016,22,1.058,23,1.152,24,0.729,25,0.058,26,1.152,27,1.174,28,0.881,29,1.174,30,1.174,31,0.762,32,1.016,33,1.206,34,1.33,35,0.881,36,0.762,37,0.881,38,1.421,39,1.638,40,1.174,41,1.231,42,1.016,43,0.762,44,1.016,45,0.562,46,1.016,47,1.016,48,1.174,49,1.174,50,1.174,51,1.058,52,1.642,53,1.174,54,1.638,55,1.174,56,0.762,57,1.016,58,2.05,59,0.632,60,0.881,61,1.421,62,1.642,63,1.174,64,0.657,65,0.881,66,1.174,67,1.774,68,1.016,69,1.174,70,0.762,71,1.174,72,1.231,73,1.642,74,1.065,75,1.421,76,1.642,77,1.774,78,1.755,79,1.231,80,1.421,81,1.774,82,1.016,83,1.016,84,1.421,85,1.065,86,1.016,87,1.231,88,1.421,89,0.762,90,0.665,91,1.016,92,1.016,93,0.881,94,1.065,95,1.174,96,1.174,97,1.421,98,1.174,99,1.016,100,0.035,101,0.035]],["title/interfaces/SortState.html",[0,0.533,60,0.987]],["body/interfaces/SortState.html",[0,0.874,1,0.762,2,1.231,3,0.657,4,0.918,5,0.562,6,0.324,7,0.657,8,0.918,9,1.231,10,1.419,11,1.33,12,1.174,13,1.642,14,1.174,15,1.642,16,1.606,17,1.421,18,0.453,19,0.665,21,1.016,22,1.058,23,1.184,24,0.729,25,0.058,26,1.138,27,1.174,28,0.881,29,1.174,30,1.174,31,0.762,32,1.016,33,1.146,34,1.33,35,0.881,36,0.762,37,0.881,38,1.638,39,1.638,40,1.174,41,1.537,42,1.016,43,0.762,44,1.016,45,0.562,46,1.016,47,1.016,48,1.174,49,1.174,50,1.174,51,1.058,52,1.893,53,1.174,54,1.421,55,1.174,56,0.762,57,1.016,58,2.05,59,0.632,60,1.231,61,1.774,62,1.893,63,1.642,64,0.918,65,1.231,66,2.05,67,1.774,68,1.016,69,1.174,70,0.762,71,1.174,72,1.231,73,1.174,74,0.762,75,1.016,76,1.174,77,1.016,78,1.419,79,0.881,80,1.016,81,1.016,82,1.016,83,1.016,84,1.421,85,1.065,86,1.016,87,1.231,88,1.421,89,0.762,90,0.665,91,1.016,92,1.016,93,0.881,94,1.065,95,1.174,96,1.174,97,1.421,98,1.174,99,1.016,100,0.035,101,0.035]],["title/interfaces/Table.html",[0,0.533,59,0.363]],["body/interfaces/Table.html",[0,0.869,1,0.751,2,1.218,3,0.647,4,1.05,5,0.554,6,0.319,7,0.647,8,1.05,9,1.218,10,1.408,11,1.392,12,1.157,13,1.625,14,1.157,15,1.625,16,1.538,17,1.406,18,0.448,19,0.658,20,1.406,21,1.001,22,1.05,23,1.172,24,0.751,25,0.058,26,1.196,27,1.157,28,0.868,29,1.157,30,1.157,31,0.751,32,1.001,33,1.199,34,1.325,35,0.868,36,0.751,37,0.868,38,1.406,39,1.625,40,1.157,41,1.218,42,1.001,43,0.751,44,1.001,45,0.554,46,1.001,47,1.001,48,1.157,49,1.157,50,1.157,51,1.05,52,1.625,53,1.157,54,1.406,55,1.157,56,0.751,57,1.001,58,1.878,59,0.643,60,0.868,61,1.406,62,1.625,63,1.157,64,0.647,65,0.868,66,1.157,67,1.762,68,1.001,69,1.157,70,0.751,71,1.157,72,1.218,73,1.157,74,0.751,75,1.001,76,1.157,77,1.001,78,1.408,79,0.868,80,1.001,81,1.001,82,1.001,83,1.001,84,1.625,85,1.054,86,1.001,87,1.527,88,1.406,89,0.751,90,0.658,91,1.001,92,1.001,93,0.868,94,1.321,95,1.625,96,1.625,97,1.924,98,1.625,99,1.762,100,0.035,101,0.035]],["title/injectables/TableDataService.html",[329,1.53,330,1.797]],["body/injectables/TableDataService.html",[3,0.393,4,0.778,5,0.336,6,0.596,8,1.08,10,0.838,11,0.456,18,0.194,19,0.453,20,1.672,22,1.08,23,1.133,24,0.698,25,0.057,26,1.205,31,1.029,33,0.886,34,0.393,35,1.381,36,0.456,37,0.527,43,0.456,51,0.625,56,0.456,59,0.688,64,0.886,79,1.043,90,0.642,94,0.903,97,2.14,99,0.608,100,0.034,101,0.024,111,1.525,124,0.527,132,1.149,133,2.33,139,1.525,145,1.298,158,2.46,167,1.898,172,1.149,173,1.149,174,2.245,175,2.511,176,0.959,182,2.141,184,0.816,186,0.959,195,2.245,196,2.736,201,1.525,222,2.276,224,2.636,227,0.959,254,1.149,264,1.828,314,2.736,329,1.298,330,1.525,331,1.439,332,3.536,333,1.149,334,2.288,335,2.288,336,2.288,337,4.572,338,3.014,339,1.828,340,2.288,341,2.288,342,3.247,343,2.288,344,2.288,345,2.288,346,2.288,347,2.849,348,1.828,349,2.288,350,2.849,351,3.773,352,4.106,353,2.849,354,2.849,355,3.247,356,2.288,357,2.288,358,2.288,359,2.288,360,2.288,361,1.439,362,1.439,363,3.247,364,1.439,365,2.849,366,2.288,367,1.439,368,4.504,369,3.247,370,3.543,371,3.773,372,4.572,373,3.773,374,2.288,375,1.439,376,3.247,377,3.773,378,3.543,379,1.828,380,1.828,381,3.957,382,1.828,383,2.288,384,2.288,385,2.288,386,2.288,387,2.288,388,1.439,389,2.288,390,2.288,391,2.288,392,2.288,393,2.288,394,1.439,395,2.288,396,2.288,397,3.543,398,1.439,399,2.288,400,1.828,401,1.439,402,3.543,403,1.439,404,1.439,405,1.439,406,1.439,407,2.288,408,1.439,409,1.439,410,1.439,411,1.439,412,1.439,413,1.439,414,1.439,415,1.439,416,3.543,417,1.439,418,1.439,419,1.439,420,1.439,421,1.439,422,1.439,423,1.149,424,0.816,425,1.439,426,1.439,427,1.439,428,1.439,429,1.439,430,1.439,431,2.288,432,2.288,433,1.439,434,1.439,435,1.439,436,1.439,437,1.439,438,1.439,439,1.439,440,1.439,441,1.439,442,1.149,443,1.439,444,1.439,445,1.439,446,2.849,447,1.439,448,1.439,449,1.439,450,1.439,451,1.439,452,2.288,453,2.288,454,2.849,455,1.439,456,1.439,457,1.439,458,1.439,459,1.439,460,1.439,461,1.439,462,1.439,463,1.439,464,1.439,465,1.439,466,1.439,467,1.439,468,2.288,469,1.439,470,1.439,471,1.439,472,1.439,473,1.439,474,2.288,475,1.439,476,1.439]],["title/classes/TableUtils.html",[124,0.987,424,1.53]],["body/classes/TableUtils.html",[1,0.907,3,0.526,4,0.526,5,0.45,6,0.51,8,1.034,11,1.199,16,1.392,17,1.599,18,0.385,19,0.749,20,1.444,21,0.813,22,1.259,23,0.799,24,0.744,25,0.058,26,1.077,32,1.444,33,1.034,34,0.526,35,1.718,41,1.386,43,0.907,45,0.45,56,0.907,59,0.632,61,1.948,65,1.048,68,1.599,78,1.048,79,1.482,87,1.553,89,1.199,93,1.048,94,1.509,100,0.03,101,0.03,124,0.705,145,2.148,158,1.939,161,3.127,174,1.939,175,2.406,182,1.092,195,2.148,196,1.283,224,3.247,314,2.696,338,2.287,339,2.287,380,2.287,400,1.538,424,1.624,477,1.925,478,3.024,479,1.538,480,2.863,481,4.762,482,2.863,483,2.863,484,2.863,485,2.863,486,2.863,487,1.925,488,4.242,489,1.908,490,2.863,491,2.863,492,3.419,493,3.419,494,2.863,495,2.863,496,1.925,497,3.419,498,2.863,499,2.863,500,2.863,501,2.287,502,2.863,503,2.863,504,2.863,505,3.786,506,1.925,507,2.863,508,2.863,509,2.863,510,3.786,511,2.863,512,2.863,513,2.863,514,2.863,515,1.925,516,2.863,517,1.925,518,1.925,519,3.419,520,1.925,521,1.925,522,3.419,523,1.925,524,1.925,525,2.863,526,1.925,527,1.925,528,1.925,529,1.925,530,2.863,531,1.925,532,1.925,533,2.863,534,1.925,535,1.925,536,2.863,537,1.925,538,2.863,539,4.393,540,1.925,541,4.242,542,1.925,543,3.419]],["title/coverage.html",[544,2.905]],["body/coverage.html",[0,0.979,1,1.078,5,0.795,6,0.71,7,1.378,24,0.561,25,0.056,36,1.078,59,0.569,60,1.245,70,1.078,74,1.078,100,0.044,101,0.044,102,2.247,103,1.93,108,2.717,109,2.717,110,2.717,124,1.245,133,1.93,206,1.93,208,2.267,212,2.717,257,4.031,329,1.93,330,2.267,332,2.717,333,2.717,424,1.93,478,2.717,479,2.717,544,2.717,545,2.717,546,3.402,547,3.402,548,3.402,549,3.402,550,3.402,551,3.402,552,3.402,553,3.402,554,3.402,555,3.402,556,3.402,557,3.402,558,3.402,559,4.229,560,4.601,561,3.402,562,3.402,563,3.402,564,3.402,565,3.402]],["title/dependencies.html",[566,1.816,567,2.153]],["body/dependencies.html",[25,0.057,100,0.047,101,0.047,184,2.119,185,2.489,423,2.984,567,2.489,568,3.735,569,5.294,570,3.735,571,2.984,572,3.735,573,3.735,574,4.477,575,4.477,576,3.735,577,3.735,578,3.735,579,3.735,580,3.735,581,3.735,582,3.735,583,3.735,584,3.735,585,3.735,586,3.735,587,3.735,588,3.735]],["title/miscellaneous/enumerations.html",[589,0.96,590,2.581]],["body/miscellaneous/enumerations.html",[6,0.539,7,1.094,10,1.467,16,1.269,18,0.539,25,0.053,38,1.693,39,1.693,41,1.708,42,1.693,44,1.693,45,0.936,46,1.693,47,1.693,90,0.923,100,0.049,101,0.049,589,1.693,590,3.2,591,2.669]],["title/index.html",[18,0.306,592,2.273,593,2.273]],["body/index.html",[2,1.082,9,1.082,25,0.041,31,0.936,51,0.807,59,0.398,75,1.249,100,0.041,101,0.041,213,3.088,227,2.576,281,3.088,348,2.361,379,2.361,382,2.361,442,2.361,489,2.87,545,2.361,567,2.576,571,2.361,594,2.956,595,2.956,596,2.956,597,3.866,598,2.956,599,2.956,600,2.956,601,3.866,602,4.569,603,2.956,604,2.956,605,2.956,606,4.308,607,4.864,608,2.956,609,2.956,610,3.866,611,2.956,612,4.569,613,4.308,614,5.129,615,5.083,616,4.308,617,2.956,618,2.956,619,3.866,620,2.956,621,3.866,622,2.956,623,3.866,624,3.866,625,4.308,626,3.866,627,2.956,628,2.956,629,4.569,630,2.956,631,2.956,632,2.956,633,4.569,634,2.956,635,2.956,636,3.866,637,3.866,638,4.308,639,4.308,640,4.308,641,4.864,642,2.956,643,2.956,644,2.956,645,2.956,646,2.956,647,2.956,648,2.956,649,2.956,650,2.956,651,2.956,652,3.866,653,3.866,654,2.956,655,3.866,656,2.956,657,2.956,658,2.956,659,2.956,660,2.956,661,2.956,662,2.956,663,2.956,664,2.956,665,2.956,666,2.956,667,2.956]],["title/modules.html",[668,2.905]],["body/modules.html",[25,0.05,100,0.05,101,0.05,668,3.369]],["title/overview.html",[669,2.905]],["body/overview.html",[2,1.512,25,0.05,45,1.109,100,0.05,101,0.05,104,2.752,124,1.512,253,3.299,329,2.343,669,3.299,670,4.13]],["title/properties.html",[19,0.639,566,1.816]],["body/properties.html",[19,0.827,25,0.053,100,0.05,101,0.05,489,2.788,671,4.184]],["title/miscellaneous/typealiases.html",[589,0.96,672,3.231]],["body/miscellaneous/typealiases.html",[6,0.526,7,1.067,11,1.238,18,0.526,24,0.645,25,0.048,33,1.067,51,1.067,59,0.619,82,1.651,83,1.651,84,1.651,85,1.457,86,1.651,87,1.684,88,1.943,89,1.238,90,0.909,91,1.651,92,1.651,93,1.431,94,1.457,100,0.048,101,0.048,589,1.651,591,3.064,673,3.909]],["title/miscellaneous/variables.html",[589,0.96,674,2.581]],["body/miscellaneous/variables.html",[6,0.538,7,1.091,18,0.538,23,1.088,24,0.659,25,0.053,26,0.933,31,1.266,33,1.091,36,1.476,37,1.463,64,1.091,90,0.79,100,0.049,101,0.049,112,3.192,501,3.192,589,1.688,591,2.663,674,3.192,675,3.996]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":43,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["0.0.0",{"_index":671,"title":{},"body":{"properties.html":{}}}],["0.0.0.0",{"_index":664,"title":{},"body":{"index.html":{}}}],["0.14.3",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":45,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["1/1",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":254,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["100",{"_index":257,"title":{},"body":{"components/PaginationComponent.html":{},"coverage.html":{}}}],["12.0.2",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["18.0.0",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["18.0.1",{"_index":571,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["2",{"_index":47,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["2.3.0",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":255,"title":{},"body":{"components/PaginationComponent.html":{}}}],["25",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["27/59",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":670,"title":{},"body":{"overview.html":{}}}],["3.3.1",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["31",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["4/12",{"_index":549,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["4342",{"_index":656,"title":{},"body":{"index.html":{}}}],["45",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":253,"title":{},"body":{"components/PaginationComponent.html":{},"overview.html":{}}}],["50",{"_index":256,"title":{},"body":{"components/PaginationComponent.html":{}}}],["500",{"_index":651,"title":{},"body":{"index.html":{}}}],["6/19",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["63",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["7/11",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["__index",{"_index":37,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/variables.html":{}}}],["_categories",{"_index":144,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["_categories.indexof(categorydefaultvalue",{"_index":198,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["_currentpage",{"_index":235,"title":{},"body":{"components/PaginationComponent.html":{}}}],["_currentpage+1",{"_index":328,"title":{},"body":{"components/PaginationComponent.html":{}}}],["_totalitems",{"_index":236,"title":{},"body":{"components/PaginationComponent.html":{}}}],["a[columnname",{"_index":540,"title":{},"body":{"classes/TableUtils.html":{}}}],["accessible",{"_index":285,"title":{},"body":{"components/PaginationComponent.html":{}}}],["accessors",{"_index":157,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["actual_component",{"_index":211,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["additional",{"_index":127,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["aliases",{"_index":673,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alike",{"_index":521,"title":{},"body":{"classes/TableUtils.html":{}}}],["analysing",{"_index":498,"title":{},"body":{"classes/TableUtils.html":{}}}],["angular",{"_index":606,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":420,"title":{},"body":{"injectables/TableDataService.html":{}}}],["angular/compiler",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":184,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":185,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":370,"title":{},"body":{"injectables/TableDataService.html":{}}}],["api/file",{"_index":345,"title":{},"body":{"injectables/TableDataService.html":{}}}],["application",{"_index":653,"title":{},"body":{"index.html":{}}}],["array",{"_index":196,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["arrays",{"_index":520,"title":{},"body":{"classes/TableUtils.html":{}}}],["asc",{"_index":46,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["assignment",{"_index":597,"title":{},"body":{"index.html":{}}}],["assinment",{"_index":596,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":634,"title":{},"body":{"index.html":{}}}],["available",{"_index":379,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["aval",{"_index":539,"title":{},"body":{"classes/TableUtils.html":{}}}],["b",{"_index":538,"title":{},"body":{"classes/TableUtils.html":{}}}],["b[columnname",{"_index":542,"title":{},"body":{"classes/TableUtils.html":{}}}],["baader",{"_index":137,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["based",{"_index":56,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["being",{"_index":385,"title":{},"body":{"injectables/TableDataService.html":{}}}],["beware",{"_index":665,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":264,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["browser",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["button",{"_index":290,"title":{},"body":{"components/PaginationComponent.html":{}}}],["buttons",{"_index":284,"title":{},"body":{"components/PaginationComponent.html":{}}}],["bval",{"_index":541,"title":{},"body":{"classes/TableUtils.html":{}}}],["cache",{"_index":352,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cached",{"_index":337,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cached/overwrite",{"_index":383,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cachedresponse",{"_index":432,"title":{},"body":{"injectables/TableDataService.html":{}}}],["caching",{"_index":435,"title":{},"body":{"injectables/TableDataService.html":{}}}],["calculate",{"_index":304,"title":{},"body":{"components/PaginationComponent.html":{}}}],["categories",{"_index":117,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["category",{"_index":126,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorychanged(c",{"_index":134,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorydefaultvalue",{"_index":150,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorylabel",{"_index":151,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categoryselect",{"_index":152,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categoryselect(categories",{"_index":189,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["causes",{"_index":228,"title":{},"body":{"components/PaginationComponent.html":{}}}],["change",{"_index":274,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changed",{"_index":173,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{}}}],["changepage",{"_index":237,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changepage(direction",{"_index":269,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changes",{"_index":222,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["check",{"_index":288,"title":{},"body":{"components/PaginationComponent.html":{}}}],["class",{"_index":124,"title":{"classes/TableUtils.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":477,"title":{},"body":{"classes/TableUtils.html":{}}}],["clear",{"_index":165,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["cli",{"_index":609,"title":{},"body":{"index.html":{}}}],["client",{"_index":646,"title":{},"body":{"index.html":{}}}],["clients",{"_index":438,"title":{},"body":{"injectables/TableDataService.html":{}}}],["clone",{"_index":624,"title":{},"body":{"index.html":{}}}],["column",{"_index":16,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{}}}],["columnname",{"_index":510,"title":{},"body":{"classes/TableUtils.html":{}}}],["columns",{"_index":11,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["columns[key",{"_index":533,"title":{},"body":{"classes/TableUtils.html":{}}}],["columns[key].datatype",{"_index":536,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort",{"_index":41,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{}}}],["columnsort.asc",{"_index":513,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort.desc",{"_index":514,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort.none",{"_index":535,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnspec",{"_index":1,"title":{"interfaces/ColumnSpec.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["columnspecs",{"_index":86,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["combination",{"_index":95,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["compare",{"_index":511,"title":{},"body":{"classes/TableUtils.html":{}}}],["compares",{"_index":508,"title":{},"body":{"classes/TableUtils.html":{}}}],["compatibility",{"_index":662,"title":{},"body":{"index.html":{}}}],["compatible",{"_index":643,"title":{},"body":{"index.html":{}}}],["component",{"_index":102,"title":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":204,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["components",{"_index":104,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"overview.html":{}}}],["configured",{"_index":213,"title":{},"body":{"components/PaginationComponent.html":{},"index.html":{}}}],["confirm",{"_index":289,"title":{},"body":{"components/PaginationComponent.html":{}}}],["console.log(`cached",{"_index":455,"title":{},"body":{"injectables/TableDataService.html":{}}}],["console.log(`replacing",{"_index":471,"title":{},"body":{"injectables/TableDataService.html":{}}}],["console.log(`updated",{"_index":460,"title":{},"body":{"injectables/TableDataService.html":{}}}],["const",{"_index":35,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["constructor",{"_index":361,"title":{},"body":{"injectables/TableDataService.html":{}}}],["constructor(http",{"_index":362,"title":{},"body":{"injectables/TableDataService.html":{}}}],["constructor(private",{"_index":430,"title":{},"body":{"injectables/TableDataService.html":{}}}],["container",{"_index":615,"title":{},"body":{"index.html":{}}}],["containers",{"_index":621,"title":{},"body":{"index.html":{}}}],["containing",{"_index":296,"title":{},"body":{"components/PaginationComponent.html":{}}}],["context",{"_index":350,"title":{},"body":{"injectables/TableDataService.html":{}}}],["continue",{"_index":532,"title":{},"body":{"classes/TableUtils.html":{}}}],["copies",{"_index":384,"title":{},"body":{"injectables/TableDataService.html":{}}}],["copy",{"_index":494,"title":{},"body":{"classes/TableUtils.html":{}}}],["coverage",{"_index":544,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":112,"title":{},"body":{"components/FilterInputComponent.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":341,"title":{},"body":{"injectables/TableDataService.html":{}}}],["ctrl+shift+p",{"_index":628,"title":{},"body":{"index.html":{}}}],["currently",{"_index":30,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["cval",{"_index":543,"title":{},"body":{"classes/TableUtils.html":{}}}],["data",{"_index":26,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["data.service.ts",{"_index":333,"title":{},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["data.service.ts:116",{"_index":403,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:136",{"_index":394,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:16",{"_index":364,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:20",{"_index":417,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:21",{"_index":419,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:23",{"_index":418,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:31",{"_index":388,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:40",{"_index":367,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:51",{"_index":375,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:94",{"_index":398,"title":{},"body":{"injectables/TableDataService.html":{}}}],["datasourcechanged",{"_index":353,"title":{},"body":{"injectables/TableDataService.html":{}}}],["datatype",{"_index":17,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["default",{"_index":64,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":158,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["definition",{"_index":415,"title":{},"body":{"injectables/TableDataService.html":{}}}],["demo",{"_index":611,"title":{},"body":{"index.html":{}}}],["depend",{"_index":349,"title":{},"body":{"injectables/TableDataService.html":{}}}],["dependencies",{"_index":567,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["desc",{"_index":44,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":10,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/enumerations.html":{}}}],["describes",{"_index":83,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["describing",{"_index":503,"title":{},"body":{"classes/TableUtils.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["desired",{"_index":299,"title":{},"body":{"components/PaginationComponent.html":{}}}],["desktop",{"_index":620,"title":{},"body":{"index.html":{}}}],["details",{"_index":348,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["dev",{"_index":614,"title":{},"body":{"index.html":{}}}],["development",{"_index":640,"title":{},"body":{"index.html":{}}}],["direction",{"_index":65,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["directive",{"_index":202,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["directives",{"_index":210,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["directly",{"_index":300,"title":{},"body":{"components/PaginationComponent.html":{}}}],["display",{"_index":13,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["displayname",{"_index":21,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["docker",{"_index":616,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":545,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dom",{"_index":106,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["dropdown",{"_index":301,"title":{},"body":{"components/PaginationComponent.html":{}}}],["dynamic",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":502,"title":{},"body":{"classes/TableUtils.html":{}}}],["element",{"_index":201,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["empty",{"_index":62,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["endpoint",{"_index":371,"title":{},"body":{"injectables/TableDataService.html":{}}}],["enter",{"_index":327,"title":{},"body":{"components/PaginationComponent.html":{}}}],["entry",{"_index":501,"title":{},"body":{"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":40,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["enumerations",{"_index":590,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":427,"title":{},"body":{"injectables/TableDataService.html":{}}}],["environment.prod",{"_index":454,"title":{},"body":{"injectables/TableDataService.html":{}}}],["environments/environment",{"_index":428,"title":{},"body":{"injectables/TableDataService.html":{}}}],["event",{"_index":170,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["event.target",{"_index":192,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["eventemitter",{"_index":167,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["events",{"_index":287,"title":{},"body":{"components/PaginationComponent.html":{}}}],["example",{"_index":119,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["expects",{"_index":389,"title":{},"body":{"injectables/TableDataService.html":{}}}],["export",{"_index":34,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["extension",{"_index":622,"title":{},"body":{"index.html":{}}}],["externally",{"_index":302,"title":{},"body":{"components/PaginationComponent.html":{}}}],["false",{"_index":476,"title":{},"body":{"injectables/TableDataService.html":{}}}],["feature",{"_index":618,"title":{},"body":{"index.html":{}}}],["features",{"_index":114,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["fetch",{"_index":368,"title":{},"body":{"injectables/TableDataService.html":{}}}],["fetched",{"_index":373,"title":{},"body":{"injectables/TableDataService.html":{}}}],["fetching",{"_index":335,"title":{},"body":{"injectables/TableDataService.html":{}}}],["field",{"_index":172,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{}}}],["fields",{"_index":113,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["filter",{"_index":72,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["filterchange",{"_index":156,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filterchanged(f",{"_index":131,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filtered",{"_index":53,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["filterinputcomponent",{"_index":103,"title":{"components/FilterInputComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["filterlabel",{"_index":153,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filterstate",{"_index":70,"title":{"interfaces/FilterState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["filtervaluechanged",{"_index":146,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filtervaluechanged(event",{"_index":169,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["first",{"_index":75,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"index.html":{}}}],["flatten",{"_index":493,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattened",{"_index":488,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattenobjecttorow",{"_index":483,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattenobjecttorow(o",{"_index":486,"title":{},"body":{"classes/TableUtils.html":{}}}],["fn",{"_index":512,"title":{},"body":{"classes/TableUtils.html":{}}}],["folder",{"_index":626,"title":{},"body":{"index.html":{}}}],["follow",{"_index":638,"title":{},"body":{"index.html":{}}}],["following",{"_index":48,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["form",{"_index":499,"title":{},"body":{"classes/TableUtils.html":{}}}],["formsmodule",{"_index":140,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["forward",{"_index":657,"title":{},"body":{"index.html":{}}}],["found",{"_index":601,"title":{},"body":{"index.html":{}}}],["function",{"_index":68,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["further",{"_index":346,"title":{},"body":{"injectables/TableDataService.html":{}}}],["future",{"_index":27,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["generate",{"_index":507,"title":{},"body":{"classes/TableUtils.html":{}}}],["generated",{"_index":608,"title":{},"body":{"index.html":{}}}],["generic",{"_index":111,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["getdata",{"_index":355,"title":{},"body":{"injectables/TableDataService.html":{}}}],["getdata$(url",{"_index":366,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettable",{"_index":356,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettable$(url",{"_index":374,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettabledata",{"_index":357,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettabledata$(url",{"_index":387,"title":{},"body":{"injectables/TableDataService.html":{}}}],["getting",{"_index":592,"title":{"index.html":{}},"body":{}}],["handle",{"_index":294,"title":{},"body":{"components/PaginationComponent.html":{}}}],["header",{"_index":15,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["here",{"_index":227,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"index.html":{}}}],["host",{"_index":652,"title":{},"body":{"index.html":{}}}],["html",{"_index":188,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["htmlinputelement).value",{"_index":193,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["http",{"_index":365,"title":{},"body":{"injectables/TableDataService.html":{}}}],["http://localhost:4342",{"_index":659,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":363,"title":{},"body":{"injectables/TableDataService.html":{}}}],["i.e",{"_index":51,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["identifier",{"_index":546,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":468,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implementation",{"_index":347,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implemented",{"_index":405,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implements",{"_index":231,"title":{},"body":{"components/PaginationComponent.html":{}}}],["import",{"_index":182,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["imports",{"_index":121,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["increase/decrease",{"_index":271,"title":{},"body":{"components/PaginationComponent.html":{}}}],["index",{"_index":18,"title":{"index.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infer",{"_index":497,"title":{},"body":{"classes/TableUtils.html":{}}}],["infercolumntypes",{"_index":484,"title":{},"body":{"classes/TableUtils.html":{}}}],["infercolumntypes(rows",{"_index":495,"title":{},"body":{"classes/TableUtils.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["injectable",{"_index":329,"title":{"injectables/TableDataService.html":{}},"body":{"injectables/TableDataService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":331,"title":{},"body":{"injectables/TableDataService.html":{}}}],["input",{"_index":28,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["input'},{'name",{"_index":205,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["input.component.css",{"_index":143,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.html",{"_index":141,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts",{"_index":110,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["input.component.ts:53",{"_index":162,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:56",{"_index":180,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:58",{"_index":163,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:59",{"_index":168,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:61",{"_index":164,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:62",{"_index":160,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:64",{"_index":159,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:65",{"_index":166,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:70",{"_index":171,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:79",{"_index":179,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:87",{"_index":177,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input/filter",{"_index":109,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["inputs",{"_index":149,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["inside",{"_index":647,"title":{},"body":{"index.html":{}}}],["install",{"_index":633,"title":{},"body":{"index.html":{}}}],["installed",{"_index":623,"title":{},"body":{"index.html":{}}}],["instead",{"_index":391,"title":{},"body":{"injectables/TableDataService.html":{}}}],["instructions",{"_index":639,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"index.html":{},"overview.html":{}}}],["iscached",{"_index":358,"title":{},"body":{"injectables/TableDataService.html":{}}}],["iscached(url",{"_index":393,"title":{},"body":{"injectables/TableDataService.html":{}}}],["it's",{"_index":84,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["items",{"_index":260,"title":{},"body":{"components/PaginationComponent.html":{}}}],["itemsperpage",{"_index":216,"title":{},"body":{"components/PaginationComponent.html":{}}}],["jankolkmeier.github.io/table_assignment",{"_index":605,"title":{},"body":{"index.html":{}}}],["json",{"_index":369,"title":{},"body":{"injectables/TableDataService.html":{}}}],["key",{"_index":89,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["keyboard",{"_index":286,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyboardevent",{"_index":279,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyevent",{"_index":278,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyevent.code",{"_index":325,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyof",{"_index":518,"title":{},"body":{"classes/TableUtils.html":{}}}],["legend",{"_index":200,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["length",{"_index":81,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["limit",{"_index":128,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["list",{"_index":116,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["listen",{"_index":663,"title":{},"body":{"index.html":{}}}],["live",{"_index":610,"title":{},"body":{"index.html":{}}}],["location",{"_index":441,"title":{},"body":{"injectables/TableDataService.html":{}}}],["logic",{"_index":226,"title":{},"body":{"components/PaginationComponent.html":{}}}],["look",{"_index":76,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["looked",{"_index":55,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["looking",{"_index":73,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["machine",{"_index":658,"title":{},"body":{"index.html":{}}}],["make",{"_index":281,"title":{},"body":{"components/PaginationComponent.html":{},"index.html":{}}}],["map",{"_index":416,"title":{},"body":{"injectables/TableDataService.html":{}}}],["map(response",{"_index":449,"title":{},"body":{"injectables/TableDataService.html":{}}}],["markdown",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":101,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this._totalitems",{"_index":316,"title":{},"body":{"components/PaginationComponent.html":{}}}],["math.max(1",{"_index":315,"title":{},"body":{"components/PaginationComponent.html":{}}}],["math.min(math.max(0",{"_index":319,"title":{},"body":{"components/PaginationComponent.html":{}}}],["means",{"_index":63,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["memory",{"_index":409,"title":{},"body":{"injectables/TableDataService.html":{}}}],["metadata",{"_index":135,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["methods",{"_index":145,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["miscellaneous",{"_index":589,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":531,"title":{},"body":{"classes/TableUtils.html":{}}}],["mixed",{"_index":537,"title":{},"body":{"classes/TableUtils.html":{}}}],["mode",{"_index":66,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["module",{"_index":604,"title":{},"body":{"index.html":{}}}],["modules",{"_index":668,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":412,"title":{},"body":{"injectables/TableDataService.html":{}}}],["multiple",{"_index":339,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["mydata",{"_index":223,"title":{},"body":{"components/PaginationComponent.html":{}}}],["n",{"_index":310,"title":{},"body":{"components/PaginationComponent.html":{}}}],["n='direction",{"_index":272,"title":{},"body":{"components/PaginationComponent.html":{}}}],["name",{"_index":22,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["names",{"_index":14,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["navbuttonkbd",{"_index":238,"title":{},"body":{"components/PaginationComponent.html":{}}}],["navbuttonkbd(direction",{"_index":277,"title":{},"body":{"components/PaginationComponent.html":{}}}],["need",{"_index":411,"title":{},"body":{"injectables/TableDataService.html":{}}}],["needed",{"_index":306,"title":{},"body":{"components/PaginationComponent.html":{}}}],["negative",{"_index":276,"title":{},"body":{"components/PaginationComponent.html":{}}}],["nested",{"_index":523,"title":{},"body":{"classes/TableUtils.html":{}}}],["nested[nestedkey",{"_index":528,"title":{},"body":{"classes/TableUtils.html":{}}}],["nestedkey",{"_index":525,"title":{},"body":{"classes/TableUtils.html":{}}}],["new",{"_index":133,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"coverage.html":{}}}],["newrowdata",{"_index":402,"title":{},"body":{"injectables/TableDataService.html":{}}}],["newrowdata[table_index_column_name",{"_index":470,"title":{},"body":{"injectables/TableDataService.html":{}}}],["next",{"_index":282,"title":{},"body":{"components/PaginationComponent.html":{}}}],["nextlabel",{"_index":243,"title":{},"body":{"components/PaginationComponent.html":{}}}],["ng",{"_index":648,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":239,"title":{},"body":{"components/PaginationComponent.html":{}}}],["ngx",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["node",{"_index":644,"title":{},"body":{"index.html":{}}}],["none",{"_index":42,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["note",{"_index":661,"title":{},"body":{"index.html":{}}}],["notify_changes",{"_index":452,"title":{},"body":{"injectables/TableDataService.html":{}}}],["notifying",{"_index":462,"title":{},"body":{"injectables/TableDataService.html":{}}}],["npm",{"_index":636,"title":{},"body":{"index.html":{}}}],["null",{"_index":161,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"classes/TableUtils.html":{}}}],["number",{"_index":78,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["number((event.target",{"_index":323,"title":{},"body":{"components/PaginationComponent.html":{}}}],["o",{"_index":492,"title":{},"body":{"classes/TableUtils.html":{}}}],["o['a']['b']['c",{"_index":490,"title":{},"body":{"classes/TableUtils.html":{}}}],["o['a.b.c",{"_index":491,"title":{},"body":{"classes/TableUtils.html":{}}}],["o[key",{"_index":522,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat",{"_index":516,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat[`${key}.${nestedkey",{"_index":527,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat[key",{"_index":529,"title":{},"body":{"classes/TableUtils.html":{}}}],["object",{"_index":224,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["object.keys(nested",{"_index":526,"title":{},"body":{"classes/TableUtils.html":{}}}],["object.keys(o",{"_index":517,"title":{},"body":{"classes/TableUtils.html":{}}}],["object.keys(table.spec).length",{"_index":456,"title":{},"body":{"injectables/TableDataService.html":{}}}],["objects",{"_index":400,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["observable",{"_index":372,"title":{},"body":{"injectables/TableDataService.html":{}}}],["of(cachedresponse",{"_index":434,"title":{},"body":{"injectables/TableDataService.html":{}}}],["old",{"_index":473,"title":{},"body":{"injectables/TableDataService.html":{}}}],["once",{"_index":660,"title":{},"body":{"index.html":{}}}],["ongoing",{"_index":436,"title":{},"body":{"injectables/TableDataService.html":{}}}],["ongoingrequest",{"_index":446,"title":{},"body":{"injectables/TableDataService.html":{}}}],["ongoingrequests",{"_index":354,"title":{},"body":{"injectables/TableDataService.html":{}}}],["oninit",{"_index":232,"title":{},"body":{"components/PaginationComponent.html":{}}}],["open",{"_index":625,"title":{},"body":{"index.html":{}}}],["operation",{"_index":408,"title":{},"body":{"injectables/TableDataService.html":{}}}],["optional",{"_index":20,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["optionally",{"_index":96,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["otherwise",{"_index":392,"title":{},"body":{"injectables/TableDataService.html":{}}}],["output",{"_index":183,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["outputs",{"_index":155,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["outside",{"_index":667,"title":{},"body":{"index.html":{}}}],["overview",{"_index":669,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":566,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":221,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagechanged",{"_index":250,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagechanges",{"_index":218,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemoptions",{"_index":244,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitems",{"_index":245,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschange",{"_index":251,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschanged",{"_index":240,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschanged(event",{"_index":292,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemslabel",{"_index":246,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagelabel",{"_index":247,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pages",{"_index":273,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagination",{"_index":57,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["pagination'},{'name",{"_index":207,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["pagination.component.css",{"_index":234,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagination.component.html",{"_index":233,"title":{},"body":{"components/PaginationComponent.html":{}}}],["paginationcomponent",{"_index":206,"title":{"components/PaginationComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["paginator",{"_index":230,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pairs",{"_index":91,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["param",{"_index":195,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["parameters",{"_index":174,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["per",{"_index":295,"title":{},"body":{"components/PaginationComponent.html":{}}}],["placeholder",{"_index":343,"title":{},"body":{"injectables/TableDataService.html":{}}}],["poll",{"_index":650,"title":{},"body":{"index.html":{}}}],["port",{"_index":655,"title":{},"body":{"index.html":{}}}],["positive",{"_index":275,"title":{},"body":{"components/PaginationComponent.html":{}}}],["possible",{"_index":92,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["preferred",{"_index":12,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["press",{"_index":627,"title":{},"body":{"index.html":{}}}],["prev",{"_index":283,"title":{},"body":{"components/PaginationComponent.html":{}}}],["previouslabel",{"_index":248,"title":{},"body":{"components/PaginationComponent.html":{}}}],["previously",{"_index":461,"title":{},"body":{"injectables/TableDataService.html":{}}}],["primeflex",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":351,"title":{},"body":{"injectables/TableDataService.html":{}}}],["process",{"_index":376,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processed",{"_index":386,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processing",{"_index":336,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processtabledata",{"_index":359,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processtabledata(raw",{"_index":396,"title":{},"body":{"injectables/TableDataService.html":{}}}],["products",{"_index":129,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["programming",{"_index":595,"title":{},"body":{"index.html":{}}}],["project",{"_index":607,"title":{},"body":{"index.html":{}}}],["proper",{"_index":410,"title":{},"body":{"injectables/TableDataService.html":{}}}],["properly",{"_index":413,"title":{},"body":{"injectables/TableDataService.html":{}}}],["properties",{"_index":19,"title":{"properties.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"properties.html":{}}}],["property",{"_index":32,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["provide",{"_index":115,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["provided",{"_index":229,"title":{},"body":{"components/PaginationComponent.html":{}}}],["providedin",{"_index":429,"title":{},"body":{"injectables/TableDataService.html":{}}}],["public/docs/description.md",{"_index":599,"title":{},"body":{"index.html":{}}}],["public/docs/report.md",{"_index":603,"title":{},"body":{"index.html":{}}}],["r[table_index_column_name",{"_index":469,"title":{},"body":{"injectables/TableDataService.html":{}}}],["range",{"_index":54,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["rangestate",{"_index":74,"title":{"interfaces/RangeState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["raw",{"_index":399,"title":{},"body":{"injectables/TableDataService.html":{}}}],["raw.map(tableutils.flattenobjecttorow",{"_index":466,"title":{},"body":{"injectables/TableDataService.html":{}}}],["rebuild",{"_index":630,"title":{},"body":{"index.html":{}}}],["record",{"_index":88,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["records",{"_index":390,"title":{},"body":{"injectables/TableDataService.html":{}}}],["reopen",{"_index":631,"title":{},"body":{"index.html":{}}}],["replace",{"_index":407,"title":{},"body":{"injectables/TableDataService.html":{}}}],["replaceindex",{"_index":472,"title":{},"body":{"injectables/TableDataService.html":{}}}],["report",{"_index":600,"title":{},"body":{"index.html":{}}}],["represent",{"_index":49,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["represents",{"_index":58,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["request",{"_index":381,"title":{},"body":{"injectables/TableDataService.html":{}}}],["requesting",{"_index":440,"title":{},"body":{"injectables/TableDataService.html":{}}}],["resetfilter",{"_index":147,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["resetlabel",{"_index":154,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["response",{"_index":377,"title":{},"body":{"injectables/TableDataService.html":{}}}],["rest",{"_index":414,"title":{},"body":{"injectables/TableDataService.html":{}}}],["result",{"_index":380,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["results",{"_index":100,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":314,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["returns",{"_index":175,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["reusable",{"_index":480,"title":{},"body":{"classes/TableUtils.html":{}}}],["root",{"_index":378,"title":{},"body":{"injectables/TableDataService.html":{}}}],["row",{"_index":33,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["row[key",{"_index":530,"title":{},"body":{"classes/TableUtils.html":{}}}],["rows",{"_index":79,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["run",{"_index":629,"title":{},"body":{"index.html":{}}}],["running",{"_index":612,"title":{},"body":{"index.html":{}}}],["runs",{"_index":635,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":423,"title":{},"body":{"injectables/TableDataService.html":{},"dependencies.html":{}}}],["same",{"_index":342,"title":{},"body":{"injectables/TableDataService.html":{}}}],["save",{"_index":404,"title":{},"body":{"injectables/TableDataService.html":{}}}],["savetablechages",{"_index":360,"title":{},"body":{"injectables/TableDataService.html":{}}}],["savetablechages(src",{"_index":401,"title":{},"body":{"injectables/TableDataService.html":{}}}],["saving",{"_index":344,"title":{},"body":{"injectables/TableDataService.html":{}}}],["search",{"_index":67,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["see",{"_index":598,"title":{},"body":{"index.html":{}}}],["select",{"_index":118,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selected",{"_index":220,"title":{},"body":{"components/PaginationComponent.html":{}}}],["selectedcategorychanged",{"_index":148,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selectedcategorychanged(event",{"_index":178,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selector",{"_index":136,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["serve",{"_index":649,"title":{},"body":{"index.html":{}}}],["server",{"_index":641,"title":{},"body":{"index.html":{}}}],["service",{"_index":334,"title":{},"body":{"injectables/TableDataService.html":{}}}],["set",{"_index":85,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["setcategoryselect(categories",{"_index":181,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["setpage",{"_index":241,"title":{},"body":{"components/PaginationComponent.html":{}}}],["setpage(page",{"_index":297,"title":{},"body":{"components/PaginationComponent.html":{}}}],["setrage(range",{"_index":225,"title":{},"body":{"components/PaginationComponent.html":{}}}],["setting",{"_index":214,"title":{},"body":{"components/PaginationComponent.html":{}}}],["settotalitems(n",{"_index":309,"title":{},"body":{"components/PaginationComponent.html":{}}}],["share",{"_index":443,"title":{},"body":{"injectables/TableDataService.html":{}}}],["shared/table",{"_index":425,"title":{},"body":{"injectables/TableDataService.html":{}}}],["shared/table.model",{"_index":186,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["sharereplay",{"_index":421,"title":{},"body":{"injectables/TableDataService.html":{}}}],["sharereplay(1",{"_index":464,"title":{},"body":{"injectables/TableDataService.html":{}}}],["show",{"_index":80,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["showpageitemsselection",{"_index":249,"title":{},"body":{"components/PaginationComponent.html":{}}}],["simple",{"_index":406,"title":{},"body":{"injectables/TableDataService.html":{}}}],["singe",{"_index":445,"title":{},"body":{"injectables/TableDataService.html":{}}}],["sort",{"_index":61,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["sorted",{"_index":52,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["sorting",{"_index":38,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["sortmode",{"_index":505,"title":{},"body":{"classes/TableUtils.html":{}}}],["sortstate",{"_index":60,"title":{"interfaces/SortState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["sorttablefn",{"_index":485,"title":{},"body":{"classes/TableUtils.html":{}}}],["sorttablefn(columnname",{"_index":504,"title":{},"body":{"classes/TableUtils.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["space",{"_index":326,"title":{},"body":{"components/PaginationComponent.html":{}}}],["spec",{"_index":99,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{}}}],["src",{"_index":397,"title":{},"body":{"injectables/TableDataService.html":{}}}],["src/.../table.model.ts",{"_index":591,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/baader",{"_index":6,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":138,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["start",{"_index":77,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["started",{"_index":593,"title":{"index.html":{}},"body":{}}],["state",{"_index":39,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["statements",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":481,"title":{},"body":{"classes/TableUtils.html":{}}}],["still",{"_index":382,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["stored",{"_index":98,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["string",{"_index":23,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":142,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["subset",{"_index":500,"title":{},"body":{"classes/TableUtils.html":{}}}],["such",{"_index":338,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["sure",{"_index":619,"title":{},"body":{"index.html":{}}}],["table",{"_index":59,"title":{"interfaces/Table.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["table!.data[replaceindex",{"_index":474,"title":{},"body":{"injectables/TableDataService.html":{}}}],["table.data.length",{"_index":457,"title":{},"body":{"injectables/TableDataService.html":{}}}],["table.model",{"_index":515,"title":{},"body":{"classes/TableUtils.html":{}}}],["table/components/filter",{"_index":108,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["table/components/pagination/pagination.component.ts",{"_index":212,"title":{},"body":{"components/PaginationComponent.html":{},"coverage.html":{}}}],["table/components/pagination/pagination.component.ts:107",{"_index":293,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:118",{"_index":280,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:44",{"_index":259,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:46",{"_index":268,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:49",{"_index":258,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:52",{"_index":265,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:55",{"_index":266,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:59",{"_index":267,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:61",{"_index":262,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:62",{"_index":263,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:63",{"_index":252,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:64",{"_index":261,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:66",{"_index":308,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:67",{"_index":307,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:69",{"_index":291,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:77",{"_index":303,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:87",{"_index":298,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:99",{"_index":270,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/table",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["table/services/table",{"_index":332,"title":{},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["table/shared/table",{"_index":478,"title":{},"body":{"classes/TableUtils.html":{},"coverage.html":{}}}],["table/shared/table.model.ts",{"_index":7,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["table_index_column_name",{"_index":36,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tableassignment",{"_index":594,"title":{},"body":{"index.html":{}}}],["tabledataservice",{"_index":330,"title":{"injectables/TableDataService.html":{}},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["tablerow",{"_index":94,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["tablerows",{"_index":509,"title":{},"body":{"classes/TableUtils.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["tablespec",{"_index":87,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["tablespect",{"_index":82,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["tableutils",{"_index":424,"title":{"classes/TableUtils.html":{}},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["tableutils.flattenobjecttorow(o[key",{"_index":524,"title":{},"body":{"classes/TableUtils.html":{}}}],["tableutils.infercolumntypes(data.slice(0",{"_index":467,"title":{},"body":{"injectables/TableDataService.html":{}}}],["tableview",{"_index":69,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["tableviewcomponent",{"_index":208,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["tableviews",{"_index":439,"title":{},"body":{"injectables/TableDataService.html":{}}}],["take",{"_index":632,"title":{},"body":{"index.html":{}}}],["tap",{"_index":422,"title":{},"body":{"injectables/TableDataService.html":{}}}],["tap(table",{"_index":451,"title":{},"body":{"injectables/TableDataService.html":{}}}],["template",{"_index":105,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["templateurl",{"_index":122,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["terminal",{"_index":637,"title":{},"body":{"index.html":{}}}],["this._categories",{"_index":190,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this._currentpage",{"_index":318,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this._totalitems",{"_index":312,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.cache.get(url",{"_index":433,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.cache.has(url",{"_index":453,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.cache.set(url",{"_index":458,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.datasourcechanged.emit(src",{"_index":475,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.datasourcechanged.emit(url",{"_index":463,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.filter.column",{"_index":197,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.filter.filter",{"_index":191,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.filterchange.emit(this.filter",{"_index":194,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.gettabledata$(url).pipe",{"_index":448,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.http.get(url",{"_index":431,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.delete(url",{"_index":459,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.get(url",{"_index":447,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.set(url",{"_index":465,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.pagechanged.emit",{"_index":321,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.pageitems",{"_index":317,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.pageitemschange.emit(this.pageitems",{"_index":324,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.processtabledata(response",{"_index":450,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.setpage(0",{"_index":313,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.setpage(this._currentpage",{"_index":322,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.totalpages",{"_index":320,"title":{},"body":{"components/PaginationComponent.html":{}}}],["through",{"_index":71,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["time",{"_index":442,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["total",{"_index":305,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalitems",{"_index":215,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalitems(n",{"_index":311,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalpages",{"_index":242,"title":{},"body":{"components/PaginationComponent.html":{}}}],["track",{"_index":199,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["tracking",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":107,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["triggers",{"_index":217,"title":{},"body":{"components/PaginationComponent.html":{}}}],["true",{"_index":139,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["tslib",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":437,"title":{},"body":{"injectables/TableDataService.html":{}}}],["type",{"_index":24,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":672,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":519,"title":{},"body":{"classes/TableUtils.html":{}}}],["types",{"_index":93,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["typescript",{"_index":187,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["undefined",{"_index":534,"title":{},"body":{"classes/TableUtils.html":{}}}],["under",{"_index":602,"title":{},"body":{"index.html":{}}}],["update",{"_index":132,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{}}}],["url",{"_index":97,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{}}}],["use",{"_index":31,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":9,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"index.html":{}}}],["users",{"_index":130,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["using",{"_index":654,"title":{},"body":{"index.html":{}}}],["utils",{"_index":426,"title":{},"body":{"injectables/TableDataService.html":{}}}],["utils.ts",{"_index":479,"title":{},"body":{"classes/TableUtils.html":{},"coverage.html":{}}}],["utils.ts:15",{"_index":487,"title":{},"body":{"classes/TableUtils.html":{}}}],["utils.ts:37",{"_index":496,"title":{},"body":{"classes/TableUtils.html":{}}}],["utils.ts:67",{"_index":506,"title":{},"body":{"classes/TableUtils.html":{}}}],["v18",{"_index":645,"title":{},"body":{"index.html":{}}}],["validation",{"_index":29,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["value",{"_index":90,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":203,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["variable",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":674,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":489,"title":{},"body":{"classes/TableUtils.html":{},"index.html":{},"properties.html":{}}}],["view",{"_index":209,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["view.component.ts",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["view/table",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["viewed",{"_index":50,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["views",{"_index":340,"title":{},"body":{"injectables/TableDataService.html":{}}}],["void",{"_index":176,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["vscode",{"_index":613,"title":{},"body":{"index.html":{}}}],["vscode's",{"_index":617,"title":{},"body":{"index.html":{}}}],["wait",{"_index":444,"title":{},"body":{"injectables/TableDataService.html":{}}}],["whenever",{"_index":219,"title":{},"body":{"components/PaginationComponent.html":{}}}],["without",{"_index":642,"title":{},"body":{"index.html":{}}}],["working",{"_index":482,"title":{},"body":{"classes/TableUtils.html":{}}}],["yes",{"_index":395,"title":{},"body":{"injectables/TableDataService.html":{}}}],["you're",{"_index":666,"title":{},"body":{"index.html":{}}}],["your.component.html",{"_index":123,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["your.component.ts",{"_index":120,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["yourcomponent",{"_index":125,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["zone.js",{"_index":587,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ColumnSpec.html":{"url":"interfaces/ColumnSpec.html","title":"interface - ColumnSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ColumnSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dataType\n                                        \n                                \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data type of the column data. May be used in the future for input validation. Currently not in use.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name to display in the header\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The property name of the row\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FilterInputComponent.html":{"url":"components/FilterInputComponent.html","title":"component - FilterInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FilterInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/baader-table/components/filter-input/filter-input.component.ts\n\n\n\n    \n        Description\n    \n    \n        A generic component that can be used to create filter input fields.\nOptional features are:\n\nProvide a list of categories to select from for the filter\n\nExample :// your.component.ts\n\n@Component({\n  // ...\n  imports: [FilterInputComponent],\n  templateUrl: './your.component.html',\n  // ...\n})\nexport class YourComponent {\n  filter: string = \"\"; // Search string to filter data on\n  category: string = \"\"; // Additional category to limit search to\n  categories: string[] = [ \"products\", \"users\" ];\n\n  filterChanged(f : string) {\n    // update search results based on new filter string\n  }\n\n  categoryChanged(c : string) {\n    // update search results based on new category\n  }\n}Example :\n\n\n\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                baader-filter-input\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./filter-input.component.html\n            \n\n\n\n            \n                styleUrl\n                ./filter-input.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _categories\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filterValueChanged\n                            \n                            \n                                resetFilter\n                            \n                            \n                                selectedCategoryChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                categoryDefaultValue\n                            \n                            \n                                categoryLabel\n                            \n                            \n                                categorySelect\n                            \n                            \n                                filter\n                            \n                            \n                                filterLabel\n                            \n                            \n                                resetLabel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                filterChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    categorySelect\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        categoryDefaultValue\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:64\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        categoryLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"In Category:\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        categorySelect\n                    \n                \n                \n                    \n                        Type :     [] | null\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:53\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filter\n                    \n                \n                \n                    \n                        Type :         FilterState\n\n                    \n                \n                \n                    \n                        Default value : { column: \"\", filter: \"\" }\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:58\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filterLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Search:\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resetLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Clear\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:65\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        filterChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:59\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        filterValueChanged\n                        \n                    \n                \n            \n            \n                \nfilterValueChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:70\n                        \n                    \n\n\n            \n                \n                        Input field for filter string changed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetFilter\n                        \n                    \n                \n            \n            \n                \nresetFilter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:87\n                        \n                    \n\n\n            \n                \n                        Clear all filter parameters\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedCategoryChanged\n                        \n                    \n                \n            \n            \n                \nselectedCategoryChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:79\n                        \n                    \n\n\n            \n                \n                        Which category to filter on changed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:56\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        categorySelect\n                    \n                \n\n\n                \n                    \n                        setcategorySelect(categories: string[] | null)\n                    \n                \n                            \n                                \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:53\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            categories\n                                                    \n                                                            \n                                                                        string[] | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FilterState } from '../../shared/table.model';\n\n\n/**\n * A generic component that can be used to create filter input fields.\n * Optional features are:\n *  - Provide a list of categories to select from for the filter\n * \n * ```typescript\n * // your.component.ts\n * \n * @Component({\n *   // ...\n *   imports: [FilterInputComponent],\n *   templateUrl: './your.component.html',\n *   // ...\n * })\n * export class YourComponent {\n *   filter: string = \"\"; // Search string to filter data on\n *   category: string = \"\"; // Additional category to limit search to\n *   categories: string[] = [ \"products\", \"users\" ];\n *   \n *   filterChanged(f : string) {\n *     // update search results based on new filter string\n *   }\n * \n *   categoryChanged(c : string) {\n *     // update search results based on new category\n *   }\n * }\n * ```\n * \n * ```html\n * \n * \n * \n * \n * \n * ```\n */\n@Component({\n  selector: 'baader-filter-input',\n  standalone: true,\n  imports: [FormsModule],\n  templateUrl: './filter-input.component.html',\n  styleUrl: './filter-input.component.css'\n})\nexport class FilterInputComponent {\n\n  @Input()\n  set categorySelect(categories: string[] | null) {\n    this._categories = categories;\n  }\n  _categories: string[] | null = null;\n\n  @Input() filter: FilterState = { column: \"\", filter: \"\" };\n  @Output() filterChange = new EventEmitter();\n\n  @Input() filterLabel = \"Search:\";\n  @Input() categoryLabel = \"In Category:\";\n\n  @Input() categoryDefaultValue = \"\";\n  @Input() resetLabel = \"Clear\";\n\n  /**\n   * Input field for filter string changed\n   */\n  filterValueChanged(event: Event) {\n    this.filter.filter = (event.target as HTMLInputElement).value;\n    this.filterChange.emit(this.filter);\n  }\n\n  /**\n   * Which category to filter on changed \n   * @param index index of the _categories array\n   */\n  selectedCategoryChanged(event: Event) {\n    this.filter.column = (event.target as HTMLInputElement).value;\n    this.filterChange.emit(this.filter);\n  }\n\n  /**\n   * Clear all filter parameters\n   */\n  resetFilter() {\n    this.filter.filter = \"\";\n    this.filter.column = \"\";\n    this.filterChange.emit(this.filter);\n  }\n\n}\n\n    \n\n    \n        \n    \n        {{filterLabel}}\n    \n    \n        \n    \n    @if (_categories) {\n    \n        \n            {{categoryLabel}}\n        \n        \n            \n                @if (_categories.indexOf(categoryDefaultValue) === -1) {\n                \n                }\n                @for (category of _categories; track $index) {\n                {{category}}\n                }\n            \n        \n    \n    }\n    \n        {{resetLabel}}\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{filterLabel}}                        @if (_categories) {                        {{categoryLabel}}                                            @if (_categories.indexOf(categoryDefaultValue) === -1) {                                }                @for (category of _categories; track $index) {                {{category}}                }                            }            {{resetLabel}}    '\n    var COMPONENTS = [{'name': 'FilterInputComponent', 'selector': 'baader-filter-input'},{'name': 'PaginationComponent', 'selector': 'baader-pagination'},{'name': 'TableViewComponent', 'selector': 'baader-table-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FilterInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterState.html":{"url":"interfaces/FilterState.html","title":"interface - FilterState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FilterState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the search function state of a TableView\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            filter\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The column to search in (search through all columns if empty string)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filter:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The search string to filter on.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PaginationComponent.html":{"url":"components/PaginationComponent.html","title":"component - PaginationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PaginationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/baader-table/components/pagination/pagination.component.ts\n\n\n\n    \n        Description\n    \n    \n        Generic Pagination component.\nConfigured by setting totalItems and itemsPerPage.\nTriggers pageChanges event whenever the selected page changes.\nExample :// your.component.ts\n\n@Component({\n  // ...\n  imports: [PaginationComponent],\n  templateUrl: './your.component.html',\n  // ...\n})\nexport class YourComponent {\n  mydata : object[] = [];\n\n  setRage(range : RangeState) {\n    // Your logic here that causes the view of mydata to show only the range of data provided by the paginator.\n  }\n}Example :\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                baader-pagination\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./pagination.component.html\n            \n\n\n\n            \n                styleUrl\n                ./pagination.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _currentPage\n                            \n                            \n                                _totalItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePage\n                            \n                            \n                                navButtonKbd\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                pageItemsChanged\n                            \n                            \n                                setPage\n                            \n                            \n                                totalPages\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                nextLabel\n                            \n                            \n                                pageItemOptions\n                            \n                            \n                                pageItems\n                            \n                            \n                                pageItemsLabel\n                            \n                            \n                                pageLabel\n                            \n                            \n                                previousLabel\n                            \n                            \n                                showPageItemsSelection\n                            \n                            \n                                totalItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                pageChanged\n                            \n                            \n                                pageItemsChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    totalItems\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        nextLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"→\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemOptions\n                    \n                \n                \n                    \n                        Type :     {}\n\n                    \n                \n                \n                    \n                        Default value : [5, 10, 20, 50, 100]\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItems\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemsLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Show Items\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:64\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Page\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        previousLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"←\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showPageItemsSelection\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:52\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        totalItems\n                    \n                \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:55\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        pageChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:59\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemsChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:46\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changePage\n                        \n                    \n                \n            \n            \n                \nchangePage(direction: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:99\n                        \n                    \n\n\n            \n                \n                        Increase/decrease page by n='direction' pages\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    number of pages to change (positive or negative)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navButtonKbd\n                        \n                    \n                \n            \n            \n                \nnavButtonKbd(direction: number, keyEvent: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Make the \"Next\" and \"Prev\" buttons accessible by keyboard events.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    number of pages to change (positive or negative)\n\n                                            \n                                        \n                                        \n                                                keyEvent\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    check if key event is a \"confirm-like\" button.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageItemsChanged\n                        \n                    \n                \n            \n            \n                \npageItemsChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:107\n                        \n                    \n\n\n            \n                \n                        Handle the number of items per page selector value change.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Event from HTML Input element (selector) containing selected value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPage\n                        \n                    \n                \n            \n            \n                \nsetPage(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:87\n                        \n                    \n\n\n            \n                \n                        Set desired page directly (i.e. from dropdown or externally)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    page to set to\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPages\n                        \n                    \n                \n            \n            \n                \ntotalPages()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Calculate total number of pages\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                total number needed for all data\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _currentPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/pagination/pagination.component.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _totalItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/pagination/pagination.component.ts:66\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        totalItems\n                    \n                \n\n\n                \n                    \n                        settotalItems(n: number | null)\n                    \n                \n                            \n                                \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:55\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            n\n                                                    \n                                                            \n                                                                        number | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RangeState } from '../../shared/table.model';\n\n/**\n * Generic Pagination component.\n * Configured by setting totalItems and itemsPerPage.\n * Triggers pageChanges event whenever the selected page changes.\n * \n * ```typescript\n * // your.component.ts\n * \n * @Component({\n *   // ...\n *   imports: [PaginationComponent],\n *   templateUrl: './your.component.html',\n *   // ...\n * })\n * export class YourComponent {\n *   mydata : object[] = [];\n * \n *   setRage(range : RangeState) {\n *     // Your logic here that causes the view of mydata to show only the range of data provided by the paginator.\n *   }\n * }\n * ```\n * \n * ```html\n * \n * \n * \n * ```\n */\n@Component({\n  selector: 'baader-pagination',\n  standalone: true,\n  imports: [FormsModule],\n  templateUrl: './pagination.component.html',\n  styleUrl: './pagination.component.css'\n})\nexport class PaginationComponent implements OnInit {\n\n  @Input()\n  pageItems = 10;\n\n  @Output() pageItemsChange = new EventEmitter();\n\n  @Input()\n  pageItemOptions = [5, 10, 20, 50, 100];\n\n  @Input()\n  showPageItemsSelection = true;\n\n  @Input()\n  set totalItems(n: number | null) {\n    this._totalItems = n;\n  }\n\n  @Output() pageChanged = new EventEmitter();\n\n  @Input() pageLabel = \"Page\";\n  @Input() previousLabel = \"←\";\n  @Input() nextLabel = \"→\";\n  @Input() pageItemsLabel = \"Show Items\";\n\n  _totalItems: number | null = null;\n  _currentPage = 0;\n\n  ngOnInit() {\n    this.setPage(0);\n  }\n\n  /**\n   * Calculate total number of pages\n   * @returns total number needed for all data\n   */\n  totalPages(): number {\n    if (this._totalItems === null)\n      return 1;\n    return Math.max(1, Math.ceil(this._totalItems / this.pageItems));\n  }\n\n  /**\n   * Set desired page directly (i.e. from dropdown or externally)\n   * @param page page to set to\n   */\n  setPage(page: number) {\n    this._currentPage = Math.min(Math.max(0, page), this.totalPages() - 1);\n    this.pageChanged.emit({\n      start: this._currentPage * this.pageItems,\n      length: this.pageItems\n    });\n  }\n\n  /**\n   * Increase/decrease page by n='direction' pages\n   * @param direction number of pages to change (positive or negative)\n   */\n  changePage(direction: number) {\n    this.setPage(this._currentPage + direction);\n  }\n\n  /**\n   * Handle the number of items per page selector value change.\n   * @param event Event from HTML Input element (selector) containing selected value\n   */\n  pageItemsChanged(event: Event) {\n    this.pageItems = Number((event.target as HTMLInputElement).value);\n    this.pageItemsChange.emit(this.pageItems);\n    this.setPage(this._currentPage);\n  }\n\n  /**\n   * Make the \"Next\" and \"Prev\" buttons accessible by keyboard events.\n   * @param direction number of pages to change (positive or negative)\n   * @param keyEvent check if key event is a \"confirm-like\" button.\n   */\n  navButtonKbd(direction: number, keyEvent: KeyboardEvent) {\n    if (keyEvent.code === \"Space\" || keyEvent.code === \"Enter\") {\n      this.setPage(this._currentPage + direction);\n    }\n  }\n}\n\n    \n\n    \n        \n    \n        \n        {{previousLabel}}\n        {{pageLabel}} {{_currentPage+1}} / {{totalPages()}}\n        {{nextLabel}}\n        @if (showPageItemsSelection) {\n        \n            \n                {{pageItemsLabel}}\n            \n            \n                @for (n of pageItemOptions; track $index) {\n                {{n}}\n                }\n            \n        \n        }\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{previousLabel}}        {{pageLabel}} {{_currentPage+1}} / {{totalPages()}}        {{nextLabel}}        @if (showPageItemsSelection) {                                    {{pageItemsLabel}}                                        @for (n of pageItemOptions; track $index) {                {{n}}                }                            }    '\n    var COMPONENTS = [{'name': 'FilterInputComponent', 'selector': 'baader-filter-input'},{'name': 'PaginationComponent', 'selector': 'baader-pagination'},{'name': 'TableViewComponent', 'selector': 'baader-table-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PaginationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RangeState.html":{"url":"interfaces/RangeState.html","title":"interface - RangeState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RangeState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the range of data a table is looking at.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            start\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The number of rows to show after.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The index of the first row to look at.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SortState.html":{"url":"interfaces/SortState.html","title":"interface - SortState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SortState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents how a table is sorted.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The column to sort by (empty string means default sorting)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:         ColumnSort\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColumnSort\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The direction to sort in.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Table.html":{"url":"interfaces/Table.html","title":"interface - Table","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Table\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                A Table is the combination of row data data and description of it's columns.\nOptionally, the data source url can be stored.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            spec\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         TableRow[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TableRow[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        spec\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        spec:         TableSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TableSpec\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TableDataService.html":{"url":"injectables/TableDataService.html","title":"injectable - TableDataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TableDataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/services/table-data.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for fetching & processing table data.\nTable data is cached, such that multiple table views can be created of the same data.\nThere is a placeholder for saving changes to API/File. Further implementation details would depend on the context.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                dataSourceChanged\n                            \n                            \n                                    Private\n                                ongoingRequests\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData$\n                            \n                            \n                                getTable$\n                            \n                            \n                                getTableData$\n                            \n                            \n                                isCached\n                            \n                            \n                                processTableData\n                            \n                            \n                                saveTableChages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/baader-table/services/table-data.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData$\n                        \n                    \n                \n            \n            \n                \ngetData$(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Fetch json data from some url (such as an API endpoint)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL to fetch data from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of the fetched data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTable$\n                        \n                    \n                \n            \n            \n                \ngetTable$(url: string, cached)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Fetch data from an endpoint with table data and process it.\nCache the results.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    the url to fetch data from. Response data must be a table-like response with an array as the root object\n\n                                            \n                                        \n                                        \n                                                cached\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    if available, use a cached result (request will still be cached/overwrite cached copies)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable of the table being fetched and processed\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTableData$\n                        \n                    \n                \n            \n            \n                \ngetTableData$(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Fetch json table data from some url (such as an API endpoint)\nExpects the root element of the response to be an array-of-records-type (use getData$() instead otherwise)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL to fetch data from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of the fetched table rows.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCached\n                        \n                    \n                \n            \n            \n                \nisCached(url?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Is a table data of this url in the cache.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    table data url\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        processTableData\n                        \n                    \n                \n            \n            \n                \nprocessTableData(raw: object[], src?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Process generic array object to Table data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                raw\n                                            \n                                                        object[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    array of objects\n\n                                            \n                                        \n                                        \n                                                src\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    string to describe the source (url) of the Table\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Table\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveTableChages\n                        \n                    \n                \n            \n            \n                \nsaveTableChages(src: string, newRowData: TableRow)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Save a changed row: implemented here as a simple replace operation on the cached memory.\nFor a proper implementation this would need more context to properly update the data (i.e. a REST API definition).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                src\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the url of the table in cache\n\n                                            \n                                        \n                                        \n                                                newRowData\n                                            \n                                                            TableRow\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the new row data (will replace the row based on the __index field in newRowData)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataSourceChanged\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new EventEmitter()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ongoingRequests\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map>()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map, of, shareReplay, tap } from 'rxjs';\nimport { TABLE_INDEX_COLUMN_NAME, Table, TableRow } from '../shared/table.model';\nimport { TableUtils } from '../shared/table-utils';\nimport { environment } from '../../../environments/environment';\n\n/**\n * Service for fetching & processing table data. \n * Table data is cached, such that multiple table views can be created of the same data.\n * There is a placeholder for saving changes to API/File. Further implementation details would depend on the context.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableDataService {\n\n  constructor(private http: HttpClient) { }\n\n  private cache = new Map();\n  private ongoingRequests = new Map>();\n\n  dataSourceChanged = new EventEmitter();\n\n  /**\n   * Fetch json table data from some url (such as an API endpoint)\n   * Expects the root element of the response to be an array-of-records-type (use getData$() instead otherwise)\n   * @param url The URL to fetch data from.\n   * @returns An Observable of the fetched table rows.\n   */\n  getTableData$(url: string): Observable {\n    return this.http.get(url);\n  }\n\n  /**\n   * Fetch json data from some url (such as an API endpoint)\n   * @param url The URL to fetch data from.\n   * @returns An Observable of the fetched data.\n   */\n  getData$(url: string): Observable {\n    return this.http.get(url);\n  }\n\n  /**\n   * Fetch data from an endpoint with table data and process it.\n   * Cache the results.\n   * @param url the url to fetch data from. Response data must be a table-like response with an array as the root object\n   * @param cached if available, use a cached result (request will still be cached/overwrite cached copies)\n   * @returns An Observable of the table being fetched and processed\n   */\n  getTable$(url: string, cached = true): Observable {\n    const cachedResponse = this.cache.get(url);\n    if (cached && cachedResponse) {\n      return of(cachedResponse);\n    }\n\n    // By caching ongoing request, two clients (i.e. TableViews) requesting the same location at the same time\n    // can share and wait for a singe http request.\n    const ongoingRequest = this.ongoingRequests.get(url);\n    if (ongoingRequest) {\n      return ongoingRequest;\n    }\n\n    const request$ = this.getTableData$(url).pipe(\n      map(response => {\n        return this.processTableData(response, url)\n      }),\n      tap(table => {\n        const notify_changes = this.cache.has(url);\n        if (!environment.prod)\n          console.log(`Cached ${url} with a table of ${Object.keys(table.spec).length} columns and ${table.data.length} rows`);\n        this.cache.set(url, table);\n        this.ongoingRequests.delete(url);\n\n        if (notify_changes) {\n          if (!environment.prod)\n            console.log(`Updated previously cached table. Notifying of changes`);\n          this.dataSourceChanged.emit(url);\n        }\n      }),\n      shareReplay(1)\n    );\n\n    this.ongoingRequests.set(url, request$);\n    return request$;\n  }\n\n  /**\n   * Process generic array object to Table data\n   * @param raw array of objects\n   * @param src string to describe the source (url) of the Table\n   * @returns \n   */\n  processTableData(raw: object[], src?: string): Table {\n    const data = raw.map(TableUtils.flattenObjectToRow);\n\n    const spec = TableUtils.inferColumnTypes(data.slice(0, 10));\n\n    for (let idx = 0; idx  (r[TABLE_INDEX_COLUMN_NAME] == newRowData[TABLE_INDEX_COLUMN_NAME]));\n    if (!environment.prod)\n      console.log(`Replacing row ${replaceIndex} Old Data / New Data:`, table!.data[replaceIndex], newRowData);\n    table!.data[replaceIndex] = newRowData;\n    this.dataSourceChanged.emit(src);\n  }\n\n  /**\n   * Is a table data of this url in the cache.\n   * @param url table data url\n   * @returns \n   */\n  isCached(url?: string): boolean {\n    if (!url)\n      return false;\n    return this.cache.has(url);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TableUtils.html":{"url":"classes/TableUtils.html","title":"class - TableUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TableUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table-utils.ts\n        \n\n\n            \n                Description\n            \n            \n                Reusable static methods for working with table data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                flattenObjectToRow\n                            \n                            \n                                    Static\n                                inferColumnTypes\n                            \n                            \n                                    Static\n                                sortTableFn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        flattenObjectToRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    flattenObjectToRow(o: object)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:15\n                        \n                    \n\n\n            \n                \n                        Return a flattened version of an object, such that all properties in o['a']['b']['c'] are\nproperties o['a.b.c'] in the result\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                o\n                                            \n                                                            object\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An object to flatten.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TableRow\n\n                        \n                            \n                                A flattened copy of the object of type TableRow\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        inferColumnTypes\n                        \n                    \n                \n            \n            \n                \n                        \n                    inferColumnTypes(rows: TableRow[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:37\n                        \n                    \n\n\n            \n                \n                        Infer data types in the table columns by analysing multiple rows of a table\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                rows\n                                            \n                                                            TableRow[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    table row data in flattened form (can be a subset of the table).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TableSpec\n\n                        \n                            \n                                a TableSpec object with an entry for each column by name, describing column data type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        sortTableFn\n                        \n                    \n                \n            \n            \n                \n                        \n                    sortTableFn(columnName: string, sortMode: ColumnSort)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:67\n                        \n                    \n\n\n            \n                \n                        Generate a sort function that compares TableRows based on property columnName.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                columnName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the column to compare in the sort fn\n\n                                            \n                                        \n                                        \n                                                sortMode\n                                            \n                                                            ColumnSort\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Sort direction, either ColumnSort.ASC or ColumnSort.DESC\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                a sort function\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ColumnSpec, TableSpec, TableRow, ColumnSort } from \"./table.model\";\n\n\n/**\n * Reusable static methods for working with table data\n */\nexport class TableUtils {\n\n  /**\n   * Return a flattened version of an object, such that all properties in o['a']['b']['c'] are\n   * properties o['a.b.c'] in the result\n   * @param o An object to flatten.\n   * @returns A flattened copy of the object of type TableRow\n   */\n  static flattenObjectToRow(o: object): TableRow {\n    const o_flat: TableRow = {};\n    for (const key of Object.keys(o) as (keyof typeof o)[]) {\n      // This will flatten arrays and objects alike\n      if (typeof (o[key]) === 'object' && o[key] !== null) {\n        const nested = TableUtils.flattenObjectToRow(o[key]);\n        // nestedKey is either property name of object or index of array.\n        for (const nestedKey of Object.keys(nested)) {\n          o_flat[`${key}.${nestedKey}`] = nested[nestedKey];\n        }\n      } else {\n        o_flat[key] = o[key];\n      }\n    }\n    return o_flat;\n  }\n\n  /**\n   * Infer data types in the table columns by analysing multiple rows of a table\n   * @param rows table row data in flattened form (can be a subset of the table).\n   * @returns a TableSpec object with an entry for each column by name, describing column data type.\n   */\n  static inferColumnTypes(rows: TableRow[]): TableSpec {\n    const columns: TableSpec = {};\n    for (const row of rows) {\n      for (const key in row) {\n        const dataType = typeof row[key];\n\n        if (row[key] === null) // Do not infer column type from missing data\n          continue;\n\n        if (columns[key] === undefined) {\n          columns[key] = {\n            name: key,\n            displayName: key,\n            dataType: dataType,\n            sort: ColumnSort.NONE\n          } as ColumnSpec;\n        } else if (columns[key].dataType !== dataType) {\n          columns[key].dataType = \"mixed\";\n        }\n      }\n    }\n    return columns;\n  }\n\n  /**\n   * Generate a sort function that compares TableRows based on property columnName.\n   * @param columnName Name of the column to compare in the sort fn\n   * @param sortMode Sort direction, either ColumnSort.ASC or ColumnSort.DESC\n   * @returns a sort function\n   */\n  static sortTableFn(columnName: string, sortMode: ColumnSort): (a: TableRow, b: TableRow) => number {\n    return (a, b) => {\n      const aval = a[columnName];\n      const bval = b[columnName];\n      let cval = 0;\n      if (bval === null && aval === null) {\n        cval = 0;\n      } else if (aval !== null && bval !== null && aval > bval || aval === null && bval !== null) {\n        cval = 1;\n      } else if (aval !== null && bval !== null && aval \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/baader-table/components/filter-input/filter-input.component.ts\n            \n            component\n            FilterInputComponent\n            \n                33 %\n                (4/12)\n            \n        \n        \n            \n                \n                src/app/baader-table/components/pagination/pagination.component.ts\n            \n            component\n            PaginationComponent\n            \n                31 %\n                (6/19)\n            \n        \n        \n            \n                \n                src/app/baader-table/components/table-view/table-view.component.ts\n            \n            component\n            TableViewComponent\n            \n                45 %\n                (27/59)\n            \n        \n        \n            \n                \n                src/app/baader-table/services/table-data.service.ts\n            \n            injectable\n            TableDataService\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table-utils.ts\n            \n            class\n            TableUtils\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            ColumnSpec\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            FilterState\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            RangeState\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            SortState\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            Table\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            variable\n            TABLE_INDEX_COLUMN_NAME\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.0.0\n        \n            @angular/cdk : ^18.0.1\n        \n            @angular/common : ^18.0.0\n        \n            @angular/compiler : ^18.0.0\n        \n            @angular/core : ^18.0.0\n        \n            @angular/forms : ^18.0.0\n        \n            @angular/platform-browser : ^18.0.0\n        \n            @angular/platform-browser-dynamic : ^18.0.0\n        \n            @angular/router : ^18.0.0\n        \n            marked : ^12.0.2\n        \n            ngx-markdown : ^18.0.0\n        \n            primeflex : ^3.3.1\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ColumnSort   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ColumnSort\n                    \n                \n                    \n                        \n                            Describe sorting state of a column.\n\n                        \n                    \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nTableAssignment\nThis is a programming assinment. For details on the assignment, see public/docs/description.md. \nMy report on the assignment can be found under public/docs/report.md. \nThe documentation of the table module can be found here: jankolkmeier.github.io/table_assignment. \nThe angular project was generated with Angular CLI version 18.0.1.\nLive Demo\nA live version may still be running here.\nUse with as VSCode Dev Container\nThis project is a docker container that can be used with VSCode's Dev Container feature. \nMake sure you have Docker Desktop and the Dev Containers Extension installed for VSCode.\nClone this project and open the folder with VSCode, then press ctrl+shift+p and run Dev Containers: Rebuild and Reopen in Container. This will take a while for the first time.\nThis should also install all the project dependencies (i.e it automatically runs npm install).\nThen open a terminal in the dev container and follow the instructions under Development Server.\nRun without a Dev Container\nMake sure you have a compatible node version and the angular v18 client installed. If not, follow these instructions.\nClone this project and open a terminal inside the project folder. Run npm install to install all dependencies.\nThen follow the instructions under Development Server.\nRunning Development Server\nRun ng serve --poll 500 to host the application using the dev server.\nThe port is :4342. This container is configured to forward this port to your machine.\nThe application should be available under http://localhost:4342/ once the dev server is running.\nNote that for Dev Container compatibility, this dev server is configured to listen to host 0.0.0.0 (all interfaces). So beware if you're running this outside of a docker container.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    3 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TableRow   (src/.../table.model.ts)\n                        \n                        \n                            TableSpec   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n    \n        \n            \n                \n                    \n                    TableRow\n                \n            \n            \n                \n                    A table row is a set of key value pairs with these possible value types.\n\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TableSpec\n                \n            \n            \n                \n                    A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TABLE_INDEX_COLUMN_NAME   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TABLE_INDEX_COLUMN_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__index'\n                    \n                \n\n            \n                \n                    Use this string to create a tracking entry for row data.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
