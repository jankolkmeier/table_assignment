var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ColumnSpec.html",[0,0.533,1,0.854]],["body/interfaces/ColumnSpec.html",[0,0.854,1,1.02,2,1.179,3,0.617,4,0.879,5,0.528,6,0.304,7,0.617,8,0.879,9,1.495,10,1.58,11,1.368,12,1.572,13,1.994,14,1.572,15,1.994,16,1.822,17,1.895,18,0.433,19,0.637,20,1.36,21,1.726,22,1.288,23,1.195,24,0.761,25,0.058,26,1.345,27,1.572,28,1.179,29,1.572,30,1.572,31,1.02,32,1.36,33,1.178,34,1.311,35,0.828,36,0.716,37,0.828,38,1.36,39,1.584,40,1.104,41,1.179,42,0.955,43,0.716,44,0.955,45,0.528,46,0.955,47,0.955,48,1.104,49,1.104,50,1.104,51,1.023,52,1.572,53,1.104,54,1.572,55,1.104,56,0.828,57,0.955,58,1.83,59,0.604,60,0.828,61,1.36,62,1.572,63,1.104,64,0.617,65,0.828,66,1.104,67,1.726,68,0.955,69,1.104,70,0.828,71,1.104,72,1.179,73,1.104,74,0.716,75,0.955,76,1.104,77,0.955,78,1.372,79,0.828,80,0.955,81,0.955,82,0.955,83,0.955,84,1.36,85,1.02,86,0.955,87,1.179,88,1.36,89,0.716,90,0.637,91,0.955,92,0.955,93,0.828,94,1.02,95,1.104,96,1.104,97,1.36,98,1.104,99,0.955,100,0.034,101,0.034]],["title/components/FilterInputComponent.html",[102,1.317,103,1.53]],["body/components/FilterInputComponent.html",[3,0.48,4,0.48,5,0.411,6,0.657,8,0.48,9,0.98,18,0.524,19,0.529,20,1.644,22,1.063,23,1.118,24,0.789,25,0.057,28,1.77,34,0.48,45,0.625,59,0.237,64,1.163,67,1.13,72,1.844,85,0.557,90,0.843,100,0.028,101,0.028,102,1.901,103,2.053,104,1.783,105,1.405,106,1.405,107,1.405,108,3.897,109,3.897,110,1.405,111,1.783,112,2.137,113,2.676,114,2.676,115,2.676,116,2.676,117,3.618,118,2.676,119,1.405,120,3.109,121,3.109,122,2.137,123,1.783,124,2.137,125,2.587,126,2.137,127,2.676,128,2.137,129,2.676,130,4.392,131,1.518,132,2.676,133,3.618,134,2.676,135,2.137,136,4.664,137,3.238,138,3.892,139,3.618,140,3.892,141,3.892,142,2.137,143,3.238,144,3.238,145,2.137,146,2.743,147,1.759,148,1.759,149,1.759,150,2.926,151,2.676,152,1.759,153,1.759,154,3.618,155,1.759,156,2.593,157,1.759,158,1.759,159,2.676,160,3.508,161,1.759,162,2.137,163,2.89,164,2.208,165,2.053,166,2.411,167,1.759,168,2.676,169,1.759,170,1.759,171,1.759,172,1.518,173,2.587,174,0.998,175,1.172,176,0.644,177,1.759,178,1.759,179,1.518,180,2.676,181,2.676,182,2.137,183,2.676,184,0.998,185,1.172,186,2.676,187,2.676,188,2.676,189,2.137,190,1.405,191,2.137,192,1.783,193,1.405,194,2.89,195,1.405,196,1.405,197,0.998,198,1.405,199,1.172,200,1.405,201,1.405,202,1.405]],["title/interfaces/FilterState.html",[0,0.533,70,0.987]],["body/interfaces/FilterState.html",[0,0.864,1,0.74,2,1.206,3,0.637,4,0.899,5,0.545,6,0.314,7,0.637,8,0.899,9,1.206,10,1.397,11,1.384,12,1.14,13,1.608,14,1.14,15,1.608,16,1.847,17,1.391,18,0.443,19,0.651,21,0.986,22,1.041,23,1.2,24,0.72,25,0.058,26,1.321,27,1.14,28,0.855,29,1.14,30,1.14,31,0.74,32,0.986,33,1.131,34,1.321,35,0.855,36,0.74,37,0.855,38,1.391,39,1.75,40,1.14,41,1.206,42,0.986,43,0.74,44,0.986,45,0.545,46,0.986,47,0.986,48,1.14,49,1.14,50,1.14,51,1.041,52,1.608,53,1.14,54,1.608,55,1.14,56,0.855,57,0.986,58,2.023,59,0.61,60,0.855,61,1.391,62,1.863,63,1.14,64,0.637,65,0.855,66,1.14,67,2.01,68,1.391,69,1.608,70,1.206,71,1.608,72,1.66,73,1.14,74,0.74,75,0.986,76,1.14,77,0.986,78,1.397,79,0.855,80,0.986,81,0.986,82,0.986,83,0.986,84,1.391,85,1.043,86,0.986,87,1.206,88,1.391,89,0.74,90,0.651,91,0.986,92,0.986,93,0.855,94,1.043,95,1.14,96,1.14,97,1.391,98,1.14,99,0.986,100,0.035,101,0.035]],["title/components/PaginationComponent.html",[102,1.317,197,1.53]],["body/components/PaginationComponent.html",[3,0.381,4,0.381,5,0.326,6,0.654,8,0.952,18,0.376,19,0.441,20,1.474,22,1.067,23,0.745,24,0.783,25,0.057,26,0.609,28,1.606,34,0.381,43,0.707,45,0.521,51,0.609,57,1.347,59,0.188,64,1.143,65,1.362,72,0.511,74,0.442,77,0.589,78,1.853,80,0.943,81,0.589,85,1.105,89,0.707,90,0.897,100,0.023,101,0.023,102,1.703,103,0.791,104,1.487,105,1.114,106,1.114,107,1.114,111,1.487,119,1.114,120,3.345,121,2.787,122,1.783,123,2.125,124,1.783,125,2.229,126,1.783,128,1.783,131,1.266,135,1.783,142,1.783,145,1.783,146,2.736,150,2.79,156,2.324,160,3.504,164,1.979,165,2.303,166,2.48,172,1.583,173,2.229,174,0.791,175,0.929,176,0.511,179,1.266,182,1.114,184,1.979,189,1.783,190,1.114,191,2.548,192,2.125,193,1.114,194,2.548,195,1.114,196,1.114,197,1.809,198,1.114,199,0.929,200,1.114,201,1.114,202,1.114,203,1.114,204,1.783,205,2.232,206,3.722,207,4.06,208,3.189,209,4.747,210,2.232,211,2.232,212,2.232,213,3.189,214,1.783,215,2.232,216,2.79,217,2.232,218,2.232,219,2.79,220,2.79,221,2.232,222,2.232,223,3.189,224,2.232,225,2.232,226,3.722,227,3.489,228,3.489,229,2.79,230,3.489,231,3.489,232,3.489,233,3.489,234,3.189,235,2.79,236,2.79,237,1.395,238,1.783,239,2.548,240,2.232,241,2.232,242,1.783,243,1.395,244,1.395,245,1.395,246,1.395,247,1.395,248,1.114,249,1.395,250,2.232,251,1.395,252,1.395,253,2.232,254,1.395,255,2.232,256,2.232,257,4.06,258,3.722,259,3.189,260,3.189,261,2.232,262,3.189,263,2.79,264,1.395,265,1.783,266,2.232,267,2.232,268,2.232,269,2.232,270,2.232,271,2.232,272,2.232,273,2.232,274,2.232,275,1.395,276,2.232,277,1.395,278,2.232,279,2.232,280,2.232,281,1.395,282,2.232,283,2.232,284,2.232,285,2.232,286,1.395,287,2.232,288,2.232,289,1.395,290,1.395,291,1.395,292,3.722,293,1.114,294,1.395,295,2.232,296,1.395,297,1.487,298,1.395,299,1.395,300,3.189,301,2.232,302,1.395,303,1.395,304,1.395,305,2.79,306,1.395,307,1.395,308,2.232,309,1.395,310,1.395,311,2.232]],["title/interfaces/RangeState.html",[0,0.533,74,0.854]],["body/interfaces/RangeState.html",[0,0.865,1,0.743,2,1.21,3,0.64,4,0.902,5,0.548,6,0.316,7,0.64,8,0.902,9,1.21,10,1.4,11,1.315,12,1.145,13,1.613,14,1.145,15,1.613,16,1.773,17,1.396,18,0.515,19,0.653,21,0.991,22,1.044,23,1.146,24,0.722,25,0.058,26,1.34,27,1.145,28,0.859,29,1.145,30,1.145,31,0.743,32,0.991,33,1.195,34,1.322,35,0.859,36,0.743,37,0.859,38,1.396,39,1.616,40,1.145,41,1.21,42,0.991,43,0.743,44,0.991,45,0.548,46,0.991,47,0.991,48,1.145,49,1.145,50,1.145,51,1.044,52,1.613,53,1.145,54,1.867,55,1.145,56,0.859,57,0.991,58,2.027,59,0.628,60,0.859,61,1.396,62,1.613,63,1.145,64,0.64,65,0.859,66,1.145,67,1.754,68,0.991,69,1.145,70,0.859,71,1.145,72,1.21,73,1.613,74,1.047,75,1.396,76,1.613,77,1.754,78,1.744,79,1.21,80,1.396,81,1.754,82,0.991,83,0.991,84,1.396,85,1.047,86,0.991,87,1.21,88,1.396,89,0.743,90,0.653,91,0.991,92,0.991,93,0.859,94,1.047,95,1.145,96,1.145,97,1.396,98,1.145,99,0.991,100,0.035,101,0.035]],["title/interfaces/SortState.html",[0,0.533,60,0.987]],["body/interfaces/SortState.html",[0,0.865,1,0.743,2,1.21,3,0.64,4,0.902,5,0.548,6,0.316,7,0.64,8,0.902,9,1.21,10,1.4,11,1.315,12,1.145,13,1.613,14,1.145,15,1.613,16,1.849,17,1.396,18,0.445,19,0.653,21,0.991,22,1.044,23,1.179,24,0.722,25,0.058,26,1.322,27,1.145,28,0.859,29,1.145,30,1.145,31,0.743,32,0.991,33,1.133,34,1.322,35,0.859,36,0.743,37,0.859,38,1.616,39,1.616,40,1.145,41,1.52,42,0.991,43,0.743,44,0.991,45,0.548,46,0.991,47,0.991,48,1.145,49,1.145,50,1.145,51,1.044,52,1.867,53,1.145,54,1.613,55,1.145,56,0.859,57,0.991,58,2.027,59,0.628,60,1.21,61,1.754,62,1.867,63,1.613,64,0.902,65,1.21,66,2.027,67,1.754,68,0.991,69,1.145,70,0.859,71,1.145,72,1.21,73,1.145,74,0.743,75,0.991,76,1.145,77,0.991,78,1.4,79,0.859,80,0.991,81,0.991,82,0.991,83,0.991,84,1.396,85,1.047,86,0.991,87,1.21,88,1.396,89,0.743,90,0.653,91,0.991,92,0.991,93,0.859,94,1.047,95,1.145,96,1.145,97,1.396,98,1.145,99,0.991,100,0.035,101,0.035]],["title/interfaces/Table.html",[0,0.533,59,0.363]],["body/interfaces/Table.html",[0,0.86,1,0.732,2,1.196,3,0.631,4,1.035,5,0.54,6,0.311,7,0.631,8,1.035,9,1.196,10,1.389,11,1.379,12,1.128,13,1.596,14,1.128,15,1.596,16,1.767,17,1.381,18,0.44,19,0.646,20,1.381,21,0.976,22,1.035,23,1.167,24,0.745,25,0.058,26,1.393,27,1.128,28,0.846,29,1.128,30,1.128,31,0.732,32,0.976,33,1.188,34,1.317,35,0.846,36,0.732,37,0.846,38,1.381,39,1.602,40,1.128,41,1.196,42,0.976,43,0.732,44,0.976,45,0.54,46,0.976,47,0.976,48,1.128,49,1.128,50,1.128,51,1.035,52,1.596,53,1.128,54,1.596,55,1.128,56,0.846,57,0.976,58,1.852,59,0.639,60,0.846,61,1.381,62,1.596,63,1.128,64,0.631,65,0.846,66,1.128,67,1.742,68,0.976,69,1.128,70,0.846,71,1.128,72,1.196,73,1.128,74,0.732,75,0.976,76,1.128,77,0.976,78,1.389,79,0.846,80,0.976,81,0.976,82,0.976,83,0.976,84,1.602,85,1.035,86,0.976,87,1.51,88,1.381,89,0.732,90,0.646,91,0.976,92,0.976,93,0.846,94,1.306,95,1.596,96,1.596,97,1.909,98,1.596,99,1.742,100,0.034,101,0.034]],["title/injectables/TableDataService.html",[312,1.53,313,1.797]],["body/injectables/TableDataService.html",[3,0.378,4,0.758,5,0.324,6,0.589,8,1.064,10,0.813,11,0.439,18,0.186,19,0.439,20,1.647,22,1.064,23,1.125,24,0.689,25,0.057,26,1.403,31,1.007,33,0.867,34,0.378,35,1.359,36,0.439,37,0.507,43,0.439,51,0.606,56,0.507,59,0.685,64,0.867,79,1.017,90,0.628,94,0.88,97,2.129,99,0.585,100,0.033,101,0.023,111,1.479,123,1.479,131,1.26,146,2.432,156,1.851,162,1.107,163,1.107,164,2.211,165,2.484,166,0.923,172,2.105,174,0.786,176,0.507,179,2.298,184,2.211,185,2.699,192,1.479,214,2.219,239,1.107,248,1.774,293,1.107,297,2.699,312,1.26,313,1.479,314,1.386,315,3.498,316,1.107,317,2.22,318,2.22,319,2.22,320,4.53,321,2.964,322,1.774,323,2.22,324,2.22,325,3.178,326,2.22,327,2.22,328,2.22,329,2.22,330,2.778,331,1.774,332,2.22,333,2.778,334,3.711,335,4.051,336,2.778,337,2.778,338,3.178,339,2.22,340,2.22,341,2.22,342,2.22,343,2.22,344,1.386,345,1.386,346,3.178,347,1.386,348,2.778,349,2.22,350,1.386,351,4.459,352,3.178,353,3.477,354,3.711,355,4.53,356,3.711,357,2.22,358,1.386,359,3.178,360,3.711,361,3.477,362,3.114,363,1.774,364,1.774,365,3.898,366,1.774,367,2.22,368,2.22,369,2.22,370,2.22,371,2.22,372,1.386,373,2.22,374,2.22,375,2.22,376,2.22,377,2.22,378,1.386,379,2.22,380,2.22,381,3.477,382,1.386,383,2.22,384,1.774,385,1.386,386,3.477,387,1.386,388,1.386,389,1.386,390,1.107,391,1.386,392,2.22,393,1.386,394,1.386,395,1.386,396,1.386,397,1.386,398,1.386,399,1.386,400,1.386,401,1.386,402,3.477,403,1.386,404,1.386,405,1.386,406,1.386,407,1.386,408,1.386,409,1.107,410,0.786,411,1.386,412,1.386,413,1.386,414,1.386,415,1.386,416,1.386,417,2.22,418,2.22,419,1.386,420,1.386,421,1.386,422,1.386,423,1.386,424,1.386,425,1.386,426,1.386,427,1.386,428,1.107,429,1.386,430,1.386,431,1.386,432,2.778,433,1.386,434,1.386,435,1.386,436,1.386,437,1.386,438,2.22,439,2.22,440,2.778,441,1.386,442,1.386,443,1.386,444,1.386,445,1.386,446,1.386,447,1.386,448,1.386,449,1.386,450,1.386,451,1.386,452,1.386,453,1.386,454,2.22,455,1.386,456,1.386,457,1.386,458,1.386,459,1.386,460,2.22,461,1.386,462,1.386]],["title/classes/TableUtils.html",[176,0.987,410,1.53]],["body/classes/TableUtils.html",[1,0.886,3,0.509,4,0.509,5,0.436,6,0.502,8,1.018,11,1.181,16,1.592,17,1.575,18,0.376,19,0.737,20,1.418,21,0.788,22,1.248,23,0.784,24,0.737,25,0.058,26,1.248,32,1.418,33,1.018,34,0.509,35,1.705,41,1.365,43,0.886,45,0.436,56,1.024,59,0.627,61,1.932,65,1.024,68,1.575,78,1.024,79,1.462,87,1.535,89,1.181,93,1.024,94,1.498,100,0.029,101,0.029,131,2.115,146,1.903,150,3.103,164,1.903,165,2.378,172,1.058,176,0.683,184,2.115,185,1.243,297,2.661,321,2.234,322,2.234,362,3.869,364,2.234,384,1.49,410,1.587,463,1.866,464,2.978,465,1.49,466,2.797,467,4.729,468,2.797,469,2.797,470,2.797,471,2.797,472,2.797,473,1.866,474,4.192,475,1.864,476,2.797,477,2.797,478,3.355,479,3.355,480,2.797,481,2.797,482,1.866,483,3.355,484,2.797,485,2.797,486,2.797,487,2.234,488,2.797,489,2.797,490,2.797,491,3.727,492,1.866,493,2.797,494,2.797,495,2.797,496,3.727,497,2.797,498,2.797,499,2.797,500,2.797,501,1.866,502,2.797,503,1.866,504,1.866,505,3.355,506,1.866,507,1.866,508,3.355,509,1.866,510,1.866,511,2.797,512,1.866,513,1.866,514,1.866,515,1.866,516,2.797,517,1.866,518,1.866,519,2.797,520,1.866,521,1.866,522,2.797,523,1.866,524,2.797,525,4.347,526,1.866,527,4.192,528,1.866,529,3.355]],["title/coverage.html",[530,2.905]],["body/coverage.html",[0,0.976,1,1.065,5,0.785,6,0.709,7,1.373,24,0.554,25,0.056,36,1.065,59,0.565,60,1.231,70,1.231,74,1.065,100,0.044,101,0.044,102,2.234,103,1.907,108,2.685,109,2.685,110,2.685,176,1.231,179,1.907,197,1.907,199,2.24,203,2.685,242,4.019,312,1.907,313,2.24,315,2.685,316,2.685,410,1.907,464,2.685,465,2.685,530,2.685,531,2.685,532,3.361,533,3.361,534,3.361,535,3.361,536,3.361,537,3.361,538,3.361,539,3.361,540,3.361,541,3.361,542,3.361,543,3.361,544,3.361,545,4.197,546,4.576,547,3.361,548,3.361,549,3.361,550,3.361,551,3.361]],["title/dependencies.html",[552,1.816,553,2.153]],["body/dependencies.html",[25,0.057,100,0.047,101,0.047,174,2.103,175,2.47,409,2.961,553,2.47,554,3.707,555,5.288,556,3.707,557,2.961,558,3.707,559,3.707,560,4.457,561,4.457,562,3.707,563,3.707,564,3.707,565,3.707,566,3.707,567,3.707,568,3.707,569,3.707,570,3.707,571,3.707,572,3.707,573,3.707,574,3.707]],["title/miscellaneous/enumerations.html",[575,0.96,576,2.581]],["body/miscellaneous/enumerations.html",[6,0.537,7,1.089,10,1.461,16,1.461,18,0.537,25,0.053,38,1.686,39,1.686,41,1.704,42,1.686,44,1.686,45,0.932,46,1.686,47,1.686,90,0.921,100,0.049,101,0.049,575,1.686,576,3.188,577,2.659]],["title/index.html",[18,0.306,578,2.273,579,2.273]],["body/index.html",[2,1.063,9,1.063,25,0.04,31,0.92,51,0.793,59,0.391,75,1.227,100,0.04,101,0.04,204,3.052,265,3.052,331,2.319,363,2.319,366,2.319,390,3.052,428,2.319,475,2.845,531,2.319,553,2.546,557,2.319,580,2.904,581,2.904,582,2.904,583,3.821,584,2.904,585,2.904,586,2.904,587,3.821,588,4.538,589,2.904,590,2.904,591,2.904,592,4.271,593,4.84,594,2.904,595,2.904,596,3.821,597,2.904,598,4.538,599,4.271,600,5.113,601,5.066,602,4.271,603,2.904,604,2.904,605,3.821,606,2.904,607,3.821,608,2.904,609,3.821,610,3.821,611,4.271,612,3.821,613,2.904,614,2.904,615,4.538,616,2.904,617,2.904,618,2.904,619,4.538,620,2.904,621,2.904,622,3.821,623,3.821,624,4.271,625,4.271,626,4.271,627,4.84,628,2.904,629,2.904,630,2.904,631,2.904,632,2.904,633,2.904,634,2.904,635,2.904,636,2.904,637,2.904,638,3.821,639,3.821,640,2.904,641,3.821,642,2.904,643,2.904,644,2.904,645,2.904,646,2.904,647,2.904,648,2.904,649,2.904,650,2.904,651,2.904,652,2.904,653,2.904]],["title/modules.html",[654,2.905]],["body/modules.html",[25,0.05,100,0.05,101,0.05,654,3.365]],["title/overview.html",[655,2.905]],["body/overview.html",[2,1.509,25,0.05,45,1.108,100,0.05,101,0.05,104,2.746,176,1.509,238,3.292,312,2.338,655,3.292,656,4.121]],["title/properties.html",[19,0.639,552,1.816]],["body/properties.html",[19,0.826,25,0.053,100,0.05,101,0.05,475,2.784,657,4.178]],["title/miscellaneous/typealiases.html",[575,0.96,658,3.231]],["body/miscellaneous/typealiases.html",[6,0.523,7,1.062,11,1.232,18,0.523,24,0.641,25,0.048,33,1.062,51,1.062,59,0.617,82,1.643,83,1.643,84,1.643,85,1.453,86,1.643,87,1.679,88,1.937,89,1.232,90,0.907,91,1.643,92,1.643,93,1.424,94,1.453,100,0.048,101,0.048,575,1.643,577,3.055,659,3.888]],["title/miscellaneous/variables.html",[575,0.96,660,2.581]],["body/miscellaneous/variables.html",[6,0.536,7,1.087,18,0.536,23,1.086,24,0.656,25,0.053,26,1.087,31,1.261,33,1.087,36,1.473,37,1.457,64,1.087,90,0.787,100,0.049,101,0.049,112,3.179,487,3.179,575,1.682,577,2.652,660,3.179,661,3.98]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":43,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["0.0.0",{"_index":657,"title":{},"body":{"properties.html":{}}}],["0.0.0.0",{"_index":650,"title":{},"body":{"index.html":{}}}],["0.14.3",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":45,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["1/1",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":239,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["100",{"_index":242,"title":{},"body":{"components/PaginationComponent.html":{},"coverage.html":{}}}],["12.0.2",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["18.0.0",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["18.0.1",{"_index":557,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["2",{"_index":47,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["2.3.0",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":240,"title":{},"body":{"components/PaginationComponent.html":{}}}],["23/60",{"_index":542,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":656,"title":{},"body":{"overview.html":{}}}],["3.3.1",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":546,"title":{},"body":{"coverage.html":{}}}],["31",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["38",{"_index":541,"title":{},"body":{"coverage.html":{}}}],["4/14",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":545,"title":{},"body":{"coverage.html":{}}}],["4342",{"_index":642,"title":{},"body":{"index.html":{}}}],["5",{"_index":238,"title":{},"body":{"components/PaginationComponent.html":{},"overview.html":{}}}],["50",{"_index":241,"title":{},"body":{"components/PaginationComponent.html":{}}}],["500",{"_index":637,"title":{},"body":{"index.html":{}}}],["6/19",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["63",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["7/11",{"_index":544,"title":{},"body":{"coverage.html":{}}}],["__index",{"_index":37,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/variables.html":{}}}],["_categories",{"_index":130,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["_categories.indexof(categorydefaultvalue",{"_index":188,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["_currentpage",{"_index":219,"title":{},"body":{"components/PaginationComponent.html":{}}}],["_currentpage+1",{"_index":311,"title":{},"body":{"components/PaginationComponent.html":{}}}],["_totalitems",{"_index":220,"title":{},"body":{"components/PaginationComponent.html":{}}}],["a[columnname",{"_index":526,"title":{},"body":{"classes/TableUtils.html":{}}}],["accessible",{"_index":269,"title":{},"body":{"components/PaginationComponent.html":{}}}],["accessors",{"_index":145,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["actual_component",{"_index":202,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["aliases",{"_index":659,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alike",{"_index":507,"title":{},"body":{"classes/TableUtils.html":{}}}],["analysing",{"_index":484,"title":{},"body":{"classes/TableUtils.html":{}}}],["angular",{"_index":592,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":406,"title":{},"body":{"injectables/TableDataService.html":{}}}],["angular/compiler",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":174,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":175,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":353,"title":{},"body":{"injectables/TableDataService.html":{}}}],["api/file",{"_index":328,"title":{},"body":{"injectables/TableDataService.html":{}}}],["application",{"_index":639,"title":{},"body":{"index.html":{}}}],["array",{"_index":185,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["arrays",{"_index":506,"title":{},"body":{"classes/TableUtils.html":{}}}],["asc",{"_index":46,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["assignment",{"_index":583,"title":{},"body":{"index.html":{}}}],["assinment",{"_index":582,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":620,"title":{},"body":{"index.html":{}}}],["available",{"_index":363,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["aval",{"_index":525,"title":{},"body":{"classes/TableUtils.html":{}}}],["b",{"_index":524,"title":{},"body":{"classes/TableUtils.html":{}}}],["b[columnname",{"_index":528,"title":{},"body":{"classes/TableUtils.html":{}}}],["baader",{"_index":121,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["based",{"_index":56,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["being",{"_index":369,"title":{},"body":{"injectables/TableDataService.html":{}}}],["beware",{"_index":651,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":248,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["browser",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["button",{"_index":274,"title":{},"body":{"components/PaginationComponent.html":{}}}],["buttons",{"_index":268,"title":{},"body":{"components/PaginationComponent.html":{}}}],["bval",{"_index":527,"title":{},"body":{"classes/TableUtils.html":{}}}],["cache",{"_index":335,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cached",{"_index":320,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cached/overwrite",{"_index":367,"title":{},"body":{"injectables/TableDataService.html":{}}}],["cachedresponse",{"_index":418,"title":{},"body":{"injectables/TableDataService.html":{}}}],["caching",{"_index":421,"title":{},"body":{"injectables/TableDataService.html":{}}}],["calculate",{"_index":287,"title":{},"body":{"components/PaginationComponent.html":{}}}],["categories",{"_index":117,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["category",{"_index":136,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorychange",{"_index":143,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorydefaultvalue",{"_index":137,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categorylabel",{"_index":138,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categoryselect",{"_index":139,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["categoryselect(categories",{"_index":177,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["change",{"_index":258,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changed",{"_index":163,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{}}}],["changepage",{"_index":221,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changepage(direction",{"_index":253,"title":{},"body":{"components/PaginationComponent.html":{}}}],["changes",{"_index":214,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["check",{"_index":272,"title":{},"body":{"components/PaginationComponent.html":{}}}],["class",{"_index":176,"title":{"classes/TableUtils.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":463,"title":{},"body":{"classes/TableUtils.html":{}}}],["clear",{"_index":154,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["cli",{"_index":595,"title":{},"body":{"index.html":{}}}],["client",{"_index":632,"title":{},"body":{"index.html":{}}}],["clients",{"_index":424,"title":{},"body":{"injectables/TableDataService.html":{}}}],["clone",{"_index":610,"title":{},"body":{"index.html":{}}}],["column",{"_index":16,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{}}}],["columnname",{"_index":496,"title":{},"body":{"classes/TableUtils.html":{}}}],["columns",{"_index":11,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["columns[key",{"_index":519,"title":{},"body":{"classes/TableUtils.html":{}}}],["columns[key].datatype",{"_index":522,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort",{"_index":41,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{}}}],["columnsort.asc",{"_index":499,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort.desc",{"_index":500,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnsort.none",{"_index":521,"title":{},"body":{"classes/TableUtils.html":{}}}],["columnspec",{"_index":1,"title":{"interfaces/ColumnSpec.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["columnspecs",{"_index":86,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["combination",{"_index":95,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["compare",{"_index":497,"title":{},"body":{"classes/TableUtils.html":{}}}],["compares",{"_index":494,"title":{},"body":{"classes/TableUtils.html":{}}}],["compatibility",{"_index":648,"title":{},"body":{"index.html":{}}}],["compatible",{"_index":629,"title":{},"body":{"index.html":{}}}],["component",{"_index":102,"title":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":195,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["components",{"_index":104,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"overview.html":{}}}],["configured",{"_index":204,"title":{},"body":{"components/PaginationComponent.html":{},"index.html":{}}}],["confirm",{"_index":273,"title":{},"body":{"components/PaginationComponent.html":{}}}],["console.log(`cached",{"_index":441,"title":{},"body":{"injectables/TableDataService.html":{}}}],["console.log(`replacing",{"_index":457,"title":{},"body":{"injectables/TableDataService.html":{}}}],["console.log(`updated",{"_index":446,"title":{},"body":{"injectables/TableDataService.html":{}}}],["const",{"_index":35,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["constructor",{"_index":344,"title":{},"body":{"injectables/TableDataService.html":{}}}],["constructor(http",{"_index":345,"title":{},"body":{"injectables/TableDataService.html":{}}}],["constructor(private",{"_index":416,"title":{},"body":{"injectables/TableDataService.html":{}}}],["container",{"_index":601,"title":{},"body":{"index.html":{}}}],["containers",{"_index":607,"title":{},"body":{"index.html":{}}}],["containing",{"_index":279,"title":{},"body":{"components/PaginationComponent.html":{}}}],["context",{"_index":333,"title":{},"body":{"injectables/TableDataService.html":{}}}],["continue",{"_index":518,"title":{},"body":{"classes/TableUtils.html":{}}}],["copies",{"_index":368,"title":{},"body":{"injectables/TableDataService.html":{}}}],["copy",{"_index":480,"title":{},"body":{"classes/TableUtils.html":{}}}],["coverage",{"_index":530,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":112,"title":{},"body":{"components/FilterInputComponent.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":324,"title":{},"body":{"injectables/TableDataService.html":{}}}],["ctrl+shift+p",{"_index":614,"title":{},"body":{"index.html":{}}}],["currently",{"_index":30,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["cval",{"_index":529,"title":{},"body":{"classes/TableUtils.html":{}}}],["data",{"_index":26,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["data.service.ts",{"_index":316,"title":{},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["data.service.ts:116",{"_index":387,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:136",{"_index":378,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:16",{"_index":347,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:20",{"_index":403,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:21",{"_index":405,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:23",{"_index":404,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:31",{"_index":372,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:40",{"_index":350,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:51",{"_index":358,"title":{},"body":{"injectables/TableDataService.html":{}}}],["data.service.ts:94",{"_index":382,"title":{},"body":{"injectables/TableDataService.html":{}}}],["datasourcechanged",{"_index":336,"title":{},"body":{"injectables/TableDataService.html":{}}}],["datatype",{"_index":17,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["default",{"_index":64,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":146,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["definition",{"_index":401,"title":{},"body":{"injectables/TableDataService.html":{}}}],["demo",{"_index":597,"title":{},"body":{"index.html":{}}}],["depend",{"_index":332,"title":{},"body":{"injectables/TableDataService.html":{}}}],["dependencies",{"_index":553,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["desc",{"_index":44,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":10,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/enumerations.html":{}}}],["describes",{"_index":83,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["describing",{"_index":489,"title":{},"body":{"classes/TableUtils.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["desired",{"_index":282,"title":{},"body":{"components/PaginationComponent.html":{}}}],["desktop",{"_index":606,"title":{},"body":{"index.html":{}}}],["details",{"_index":331,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["dev",{"_index":600,"title":{},"body":{"index.html":{}}}],["development",{"_index":626,"title":{},"body":{"index.html":{}}}],["direction",{"_index":65,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["directive",{"_index":193,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["directives",{"_index":201,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["directly",{"_index":283,"title":{},"body":{"components/PaginationComponent.html":{}}}],["display",{"_index":13,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["displayname",{"_index":21,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["docker",{"_index":602,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":531,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dom",{"_index":106,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["dropdown",{"_index":284,"title":{},"body":{"components/PaginationComponent.html":{}}}],["dynamic",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":488,"title":{},"body":{"classes/TableUtils.html":{}}}],["element",{"_index":192,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["empty",{"_index":62,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["endpoint",{"_index":354,"title":{},"body":{"injectables/TableDataService.html":{}}}],["enter",{"_index":310,"title":{},"body":{"components/PaginationComponent.html":{}}}],["entry",{"_index":487,"title":{},"body":{"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":40,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["enumerations",{"_index":576,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":413,"title":{},"body":{"injectables/TableDataService.html":{}}}],["environment.prod",{"_index":440,"title":{},"body":{"injectables/TableDataService.html":{}}}],["environments/environment",{"_index":414,"title":{},"body":{"injectables/TableDataService.html":{}}}],["event",{"_index":160,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["event.target",{"_index":181,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["eventemitter",{"_index":156,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["events",{"_index":271,"title":{},"body":{"components/PaginationComponent.html":{}}}],["expects",{"_index":373,"title":{},"body":{"injectables/TableDataService.html":{}}}],["export",{"_index":34,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["extension",{"_index":608,"title":{},"body":{"index.html":{}}}],["externally",{"_index":285,"title":{},"body":{"components/PaginationComponent.html":{}}}],["false",{"_index":462,"title":{},"body":{"injectables/TableDataService.html":{}}}],["feature",{"_index":604,"title":{},"body":{"index.html":{}}}],["features",{"_index":114,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["fetch",{"_index":351,"title":{},"body":{"injectables/TableDataService.html":{}}}],["fetched",{"_index":356,"title":{},"body":{"injectables/TableDataService.html":{}}}],["fetching",{"_index":318,"title":{},"body":{"injectables/TableDataService.html":{}}}],["field",{"_index":162,"title":{},"body":{"components/FilterInputComponent.html":{},"injectables/TableDataService.html":{}}}],["fields",{"_index":113,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["filter",{"_index":72,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["filterchange",{"_index":144,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filtered",{"_index":53,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["filterinputcomponent",{"_index":103,"title":{"components/FilterInputComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["filterlabel",{"_index":140,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filterstate",{"_index":70,"title":{"interfaces/FilterState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["filtervaluechanged",{"_index":132,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["filtervaluechanged(event",{"_index":159,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["first",{"_index":75,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"index.html":{}}}],["flatten",{"_index":479,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattened",{"_index":474,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattenobjecttorow",{"_index":469,"title":{},"body":{"classes/TableUtils.html":{}}}],["flattenobjecttorow(o",{"_index":472,"title":{},"body":{"classes/TableUtils.html":{}}}],["fn",{"_index":498,"title":{},"body":{"classes/TableUtils.html":{}}}],["folder",{"_index":612,"title":{},"body":{"index.html":{}}}],["follow",{"_index":624,"title":{},"body":{"index.html":{}}}],["following",{"_index":48,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["form",{"_index":485,"title":{},"body":{"classes/TableUtils.html":{}}}],["formsmodule",{"_index":125,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["forward",{"_index":643,"title":{},"body":{"index.html":{}}}],["found",{"_index":587,"title":{},"body":{"index.html":{}}}],["function",{"_index":68,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["further",{"_index":329,"title":{},"body":{"injectables/TableDataService.html":{}}}],["future",{"_index":27,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["generate",{"_index":493,"title":{},"body":{"classes/TableUtils.html":{}}}],["generated",{"_index":594,"title":{},"body":{"index.html":{}}}],["generic",{"_index":111,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["getdata",{"_index":338,"title":{},"body":{"injectables/TableDataService.html":{}}}],["getdata$(url",{"_index":349,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettable",{"_index":339,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettable$(url",{"_index":357,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettabledata",{"_index":340,"title":{},"body":{"injectables/TableDataService.html":{}}}],["gettabledata$(url",{"_index":371,"title":{},"body":{"injectables/TableDataService.html":{}}}],["getting",{"_index":578,"title":{"index.html":{}},"body":{}}],["handle",{"_index":278,"title":{},"body":{"components/PaginationComponent.html":{}}}],["header",{"_index":15,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["here",{"_index":390,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["host",{"_index":638,"title":{},"body":{"index.html":{}}}],["html",{"_index":191,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["htmlinputelement).value",{"_index":182,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["http",{"_index":348,"title":{},"body":{"injectables/TableDataService.html":{}}}],["http://localhost:4342",{"_index":645,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":346,"title":{},"body":{"injectables/TableDataService.html":{}}}],["i.e",{"_index":51,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["identifier",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":454,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implementation",{"_index":330,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implemented",{"_index":389,"title":{},"body":{"injectables/TableDataService.html":{}}}],["implements",{"_index":215,"title":{},"body":{"components/PaginationComponent.html":{}}}],["import",{"_index":172,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["imports",{"_index":124,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["increase/decrease",{"_index":255,"title":{},"body":{"components/PaginationComponent.html":{}}}],["index",{"_index":18,"title":{"index.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infer",{"_index":483,"title":{},"body":{"classes/TableUtils.html":{}}}],["infercolumntypes",{"_index":470,"title":{},"body":{"classes/TableUtils.html":{}}}],["infercolumntypes(rows",{"_index":481,"title":{},"body":{"classes/TableUtils.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["injectable",{"_index":312,"title":{"injectables/TableDataService.html":{}},"body":{"injectables/TableDataService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":314,"title":{},"body":{"injectables/TableDataService.html":{}}}],["input",{"_index":28,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["input'},{'name",{"_index":196,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["input.component.css",{"_index":129,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.html",{"_index":127,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts",{"_index":110,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["input.component.ts:20",{"_index":151,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:23",{"_index":170,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:25",{"_index":147,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:26",{"_index":157,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:28",{"_index":152,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:29",{"_index":158,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:31",{"_index":153,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:32",{"_index":149,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:34",{"_index":148,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:36",{"_index":155,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:42",{"_index":161,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:51",{"_index":169,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input.component.ts:59",{"_index":167,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["input/filter",{"_index":109,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["inputs",{"_index":135,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["inside",{"_index":633,"title":{},"body":{"index.html":{}}}],["install",{"_index":619,"title":{},"body":{"index.html":{}}}],["installed",{"_index":609,"title":{},"body":{"index.html":{}}}],["instead",{"_index":375,"title":{},"body":{"injectables/TableDataService.html":{}}}],["instructions",{"_index":625,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"index.html":{},"overview.html":{}}}],["iscached",{"_index":341,"title":{},"body":{"injectables/TableDataService.html":{}}}],["iscached(url",{"_index":377,"title":{},"body":{"injectables/TableDataService.html":{}}}],["it's",{"_index":84,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["items",{"_index":207,"title":{},"body":{"components/PaginationComponent.html":{}}}],["jankolkmeier.github.io/table_assignment",{"_index":591,"title":{},"body":{"index.html":{}}}],["json",{"_index":352,"title":{},"body":{"injectables/TableDataService.html":{}}}],["key",{"_index":89,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["keyboard",{"_index":270,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyboardevent",{"_index":263,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyevent",{"_index":262,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyevent.code",{"_index":308,"title":{},"body":{"components/PaginationComponent.html":{}}}],["keyof",{"_index":504,"title":{},"body":{"classes/TableUtils.html":{}}}],["legend",{"_index":190,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["length",{"_index":81,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["list",{"_index":116,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["listen",{"_index":649,"title":{},"body":{"index.html":{}}}],["live",{"_index":596,"title":{},"body":{"index.html":{}}}],["location",{"_index":427,"title":{},"body":{"injectables/TableDataService.html":{}}}],["look",{"_index":76,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["looked",{"_index":55,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["looking",{"_index":73,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["machine",{"_index":644,"title":{},"body":{"index.html":{}}}],["make",{"_index":265,"title":{},"body":{"components/PaginationComponent.html":{},"index.html":{}}}],["map",{"_index":402,"title":{},"body":{"injectables/TableDataService.html":{}}}],["map(response",{"_index":435,"title":{},"body":{"injectables/TableDataService.html":{}}}],["markdown",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":101,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this._totalitems",{"_index":299,"title":{},"body":{"components/PaginationComponent.html":{}}}],["math.max(1",{"_index":298,"title":{},"body":{"components/PaginationComponent.html":{}}}],["math.min(math.max(0",{"_index":302,"title":{},"body":{"components/PaginationComponent.html":{}}}],["means",{"_index":63,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["memory",{"_index":394,"title":{},"body":{"injectables/TableDataService.html":{}}}],["metadata",{"_index":119,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["methods",{"_index":131,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["miscellaneous",{"_index":575,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":517,"title":{},"body":{"classes/TableUtils.html":{}}}],["mixed",{"_index":523,"title":{},"body":{"classes/TableUtils.html":{}}}],["mode",{"_index":66,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["module",{"_index":590,"title":{},"body":{"index.html":{}}}],["modules",{"_index":654,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":397,"title":{},"body":{"injectables/TableDataService.html":{}}}],["multiple",{"_index":322,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["n",{"_index":292,"title":{},"body":{"components/PaginationComponent.html":{}}}],["n='direction",{"_index":256,"title":{},"body":{"components/PaginationComponent.html":{}}}],["name",{"_index":22,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["names",{"_index":14,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["navbuttonkbd",{"_index":222,"title":{},"body":{"components/PaginationComponent.html":{}}}],["navbuttonkbd(direction",{"_index":261,"title":{},"body":{"components/PaginationComponent.html":{}}}],["need",{"_index":396,"title":{},"body":{"injectables/TableDataService.html":{}}}],["needed",{"_index":288,"title":{},"body":{"components/PaginationComponent.html":{}}}],["negative",{"_index":260,"title":{},"body":{"components/PaginationComponent.html":{}}}],["nested",{"_index":509,"title":{},"body":{"classes/TableUtils.html":{}}}],["nested[nestedkey",{"_index":514,"title":{},"body":{"classes/TableUtils.html":{}}}],["nestedkey",{"_index":511,"title":{},"body":{"classes/TableUtils.html":{}}}],["new",{"_index":179,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"coverage.html":{}}}],["newrowdata",{"_index":386,"title":{},"body":{"injectables/TableDataService.html":{}}}],["newrowdata[table_index_column_name",{"_index":456,"title":{},"body":{"injectables/TableDataService.html":{}}}],["next",{"_index":266,"title":{},"body":{"components/PaginationComponent.html":{}}}],["nextlabel",{"_index":227,"title":{},"body":{"components/PaginationComponent.html":{}}}],["ng",{"_index":634,"title":{},"body":{"index.html":{}}}],["ngoninit",{"_index":223,"title":{},"body":{"components/PaginationComponent.html":{}}}],["ngx",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["node",{"_index":630,"title":{},"body":{"index.html":{}}}],["none",{"_index":42,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["note",{"_index":647,"title":{},"body":{"index.html":{}}}],["notify_changes",{"_index":438,"title":{},"body":{"injectables/TableDataService.html":{}}}],["notifying",{"_index":448,"title":{},"body":{"injectables/TableDataService.html":{}}}],["npm",{"_index":622,"title":{},"body":{"index.html":{}}}],["null",{"_index":150,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"classes/TableUtils.html":{}}}],["number",{"_index":78,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["number((event.target",{"_index":306,"title":{},"body":{"components/PaginationComponent.html":{}}}],["o",{"_index":478,"title":{},"body":{"classes/TableUtils.html":{}}}],["o['a']['b']['c",{"_index":476,"title":{},"body":{"classes/TableUtils.html":{}}}],["o['a.b.c",{"_index":477,"title":{},"body":{"classes/TableUtils.html":{}}}],["o[key",{"_index":508,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat",{"_index":502,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat[`${key}.${nestedkey",{"_index":513,"title":{},"body":{"classes/TableUtils.html":{}}}],["o_flat[key",{"_index":515,"title":{},"body":{"classes/TableUtils.html":{}}}],["object",{"_index":362,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["object.keys(nested",{"_index":512,"title":{},"body":{"classes/TableUtils.html":{}}}],["object.keys(o",{"_index":503,"title":{},"body":{"classes/TableUtils.html":{}}}],["object.keys(table.spec).length",{"_index":442,"title":{},"body":{"injectables/TableDataService.html":{}}}],["objects",{"_index":384,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["observable",{"_index":355,"title":{},"body":{"injectables/TableDataService.html":{}}}],["of(cachedresponse",{"_index":420,"title":{},"body":{"injectables/TableDataService.html":{}}}],["old",{"_index":459,"title":{},"body":{"injectables/TableDataService.html":{}}}],["once",{"_index":646,"title":{},"body":{"index.html":{}}}],["ongoing",{"_index":422,"title":{},"body":{"injectables/TableDataService.html":{}}}],["ongoingrequest",{"_index":432,"title":{},"body":{"injectables/TableDataService.html":{}}}],["ongoingrequests",{"_index":337,"title":{},"body":{"injectables/TableDataService.html":{}}}],["oninit",{"_index":216,"title":{},"body":{"components/PaginationComponent.html":{}}}],["open",{"_index":611,"title":{},"body":{"index.html":{}}}],["operation",{"_index":393,"title":{},"body":{"injectables/TableDataService.html":{}}}],["optional",{"_index":20,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["optionally",{"_index":96,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["otherwise",{"_index":376,"title":{},"body":{"injectables/TableDataService.html":{}}}],["output",{"_index":173,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["outputs",{"_index":142,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["outside",{"_index":653,"title":{},"body":{"index.html":{}}}],["overview",{"_index":655,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":552,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":209,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagechanged",{"_index":235,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagechanges",{"_index":211,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemoptions",{"_index":228,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitems",{"_index":229,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschange",{"_index":236,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschanged",{"_index":224,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemschanged(event",{"_index":276,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pageitemslabel",{"_index":230,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagelabel",{"_index":231,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pages",{"_index":257,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagination",{"_index":57,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["pagination'},{'name",{"_index":198,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["pagination.component.css",{"_index":218,"title":{},"body":{"components/PaginationComponent.html":{}}}],["pagination.component.html",{"_index":217,"title":{},"body":{"components/PaginationComponent.html":{}}}],["paginationcomponent",{"_index":197,"title":{"components/PaginationComponent.html":{}},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["pairs",{"_index":91,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["param",{"_index":184,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["parameters",{"_index":164,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["per",{"_index":208,"title":{},"body":{"components/PaginationComponent.html":{}}}],["placeholder",{"_index":326,"title":{},"body":{"injectables/TableDataService.html":{}}}],["poll",{"_index":636,"title":{},"body":{"index.html":{}}}],["port",{"_index":641,"title":{},"body":{"index.html":{}}}],["positive",{"_index":259,"title":{},"body":{"components/PaginationComponent.html":{}}}],["possible",{"_index":92,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["preferred",{"_index":12,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["press",{"_index":613,"title":{},"body":{"index.html":{}}}],["prev",{"_index":267,"title":{},"body":{"components/PaginationComponent.html":{}}}],["previouslabel",{"_index":232,"title":{},"body":{"components/PaginationComponent.html":{}}}],["previously",{"_index":447,"title":{},"body":{"injectables/TableDataService.html":{}}}],["primeflex",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":334,"title":{},"body":{"injectables/TableDataService.html":{}}}],["process",{"_index":359,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processed",{"_index":370,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processing",{"_index":319,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processtabledata",{"_index":342,"title":{},"body":{"injectables/TableDataService.html":{}}}],["processtabledata(raw",{"_index":380,"title":{},"body":{"injectables/TableDataService.html":{}}}],["programming",{"_index":581,"title":{},"body":{"index.html":{}}}],["project",{"_index":593,"title":{},"body":{"index.html":{}}}],["proper",{"_index":395,"title":{},"body":{"injectables/TableDataService.html":{}}}],["properly",{"_index":398,"title":{},"body":{"injectables/TableDataService.html":{}}}],["properties",{"_index":19,"title":{"properties.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"properties.html":{}}}],["property",{"_index":32,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["provide",{"_index":115,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["providedin",{"_index":415,"title":{},"body":{"injectables/TableDataService.html":{}}}],["public/docs/description.md",{"_index":585,"title":{},"body":{"index.html":{}}}],["public/docs/report.md",{"_index":589,"title":{},"body":{"index.html":{}}}],["r[table_index_column_name",{"_index":455,"title":{},"body":{"injectables/TableDataService.html":{}}}],["range",{"_index":54,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["rangestate",{"_index":74,"title":{"interfaces/RangeState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["raw",{"_index":383,"title":{},"body":{"injectables/TableDataService.html":{}}}],["raw.map(tableutils.flattenobjecttorow",{"_index":452,"title":{},"body":{"injectables/TableDataService.html":{}}}],["rebuild",{"_index":616,"title":{},"body":{"index.html":{}}}],["record",{"_index":88,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["records",{"_index":374,"title":{},"body":{"injectables/TableDataService.html":{}}}],["reopen",{"_index":617,"title":{},"body":{"index.html":{}}}],["replace",{"_index":392,"title":{},"body":{"injectables/TableDataService.html":{}}}],["replaceindex",{"_index":458,"title":{},"body":{"injectables/TableDataService.html":{}}}],["report",{"_index":586,"title":{},"body":{"index.html":{}}}],["represent",{"_index":49,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["represents",{"_index":58,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["request",{"_index":365,"title":{},"body":{"injectables/TableDataService.html":{}}}],["requesting",{"_index":426,"title":{},"body":{"injectables/TableDataService.html":{}}}],["resetfilter",{"_index":133,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["resetlabel",{"_index":141,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["response",{"_index":360,"title":{},"body":{"injectables/TableDataService.html":{}}}],["rest",{"_index":400,"title":{},"body":{"injectables/TableDataService.html":{}}}],["result",{"_index":364,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["results",{"_index":100,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":297,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["returns",{"_index":165,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["reusable",{"_index":466,"title":{},"body":{"classes/TableUtils.html":{}}}],["root",{"_index":361,"title":{},"body":{"injectables/TableDataService.html":{}}}],["row",{"_index":33,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["row[key",{"_index":516,"title":{},"body":{"classes/TableUtils.html":{}}}],["rows",{"_index":79,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["run",{"_index":615,"title":{},"body":{"index.html":{}}}],["running",{"_index":598,"title":{},"body":{"index.html":{}}}],["runs",{"_index":621,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":409,"title":{},"body":{"injectables/TableDataService.html":{},"dependencies.html":{}}}],["same",{"_index":325,"title":{},"body":{"injectables/TableDataService.html":{}}}],["save",{"_index":388,"title":{},"body":{"injectables/TableDataService.html":{}}}],["savetablechages",{"_index":343,"title":{},"body":{"injectables/TableDataService.html":{}}}],["savetablechages(src",{"_index":385,"title":{},"body":{"injectables/TableDataService.html":{}}}],["saving",{"_index":327,"title":{},"body":{"injectables/TableDataService.html":{}}}],["search",{"_index":67,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["see",{"_index":584,"title":{},"body":{"index.html":{}}}],["select",{"_index":118,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selected",{"_index":213,"title":{},"body":{"components/PaginationComponent.html":{}}}],["selectedcategorychanged",{"_index":134,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selectedcategorychanged(event",{"_index":168,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["selector",{"_index":120,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["serve",{"_index":635,"title":{},"body":{"index.html":{}}}],["server",{"_index":627,"title":{},"body":{"index.html":{}}}],["service",{"_index":317,"title":{},"body":{"injectables/TableDataService.html":{}}}],["set",{"_index":85,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["setcategoryselect(categories",{"_index":171,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["setpage",{"_index":225,"title":{},"body":{"components/PaginationComponent.html":{}}}],["setpage(page",{"_index":280,"title":{},"body":{"components/PaginationComponent.html":{}}}],["setting",{"_index":205,"title":{},"body":{"components/PaginationComponent.html":{}}}],["settotalitems(n",{"_index":291,"title":{},"body":{"components/PaginationComponent.html":{}}}],["share",{"_index":429,"title":{},"body":{"injectables/TableDataService.html":{}}}],["shared/table",{"_index":411,"title":{},"body":{"injectables/TableDataService.html":{}}}],["shared/table.model",{"_index":293,"title":{},"body":{"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["sharereplay",{"_index":407,"title":{},"body":{"injectables/TableDataService.html":{}}}],["sharereplay(1",{"_index":450,"title":{},"body":{"injectables/TableDataService.html":{}}}],["show",{"_index":80,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["showpageitemsselection",{"_index":233,"title":{},"body":{"components/PaginationComponent.html":{}}}],["simple",{"_index":391,"title":{},"body":{"injectables/TableDataService.html":{}}}],["singe",{"_index":431,"title":{},"body":{"injectables/TableDataService.html":{}}}],["sort",{"_index":61,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{}}}],["sorted",{"_index":52,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["sorting",{"_index":38,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["sortmode",{"_index":491,"title":{},"body":{"classes/TableUtils.html":{}}}],["sortstate",{"_index":60,"title":{"interfaces/SortState.html":{}},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{}}}],["sorttablefn",{"_index":471,"title":{},"body":{"classes/TableUtils.html":{}}}],["sorttablefn(columnname",{"_index":490,"title":{},"body":{"classes/TableUtils.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["space",{"_index":309,"title":{},"body":{"components/PaginationComponent.html":{}}}],["spec",{"_index":99,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{}}}],["src",{"_index":381,"title":{},"body":{"injectables/TableDataService.html":{}}}],["src/.../table.model.ts",{"_index":577,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/baader",{"_index":6,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":122,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["start",{"_index":77,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["started",{"_index":579,"title":{"index.html":{}},"body":{}}],["state",{"_index":39,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/enumerations.html":{}}}],["statements",{"_index":533,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":467,"title":{},"body":{"classes/TableUtils.html":{}}}],["still",{"_index":366,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["stored",{"_index":98,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["string",{"_index":23,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":128,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["subset",{"_index":486,"title":{},"body":{"classes/TableUtils.html":{}}}],["such",{"_index":321,"title":{},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{}}}],["sure",{"_index":605,"title":{},"body":{"index.html":{}}}],["table",{"_index":59,"title":{"interfaces/Table.html":{}},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["table!.data[replaceindex",{"_index":460,"title":{},"body":{"injectables/TableDataService.html":{}}}],["table.data.length",{"_index":443,"title":{},"body":{"injectables/TableDataService.html":{}}}],["table.model",{"_index":501,"title":{},"body":{"classes/TableUtils.html":{}}}],["table/components/filter",{"_index":108,"title":{},"body":{"components/FilterInputComponent.html":{},"coverage.html":{}}}],["table/components/pagination/pagination.component.ts",{"_index":203,"title":{},"body":{"components/PaginationComponent.html":{},"coverage.html":{}}}],["table/components/pagination/pagination.component.ts:20",{"_index":244,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:22",{"_index":252,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:25",{"_index":243,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:28",{"_index":249,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:31",{"_index":250,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:35",{"_index":251,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:37",{"_index":246,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:38",{"_index":247,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:39",{"_index":237,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:40",{"_index":245,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:42",{"_index":290,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:43",{"_index":289,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:45",{"_index":275,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:53",{"_index":286,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:63",{"_index":281,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:75",{"_index":254,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:83",{"_index":277,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/pagination/pagination.component.ts:94",{"_index":264,"title":{},"body":{"components/PaginationComponent.html":{}}}],["table/components/table",{"_index":538,"title":{},"body":{"coverage.html":{}}}],["table/services/table",{"_index":315,"title":{},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["table/shared/table",{"_index":464,"title":{},"body":{"classes/TableUtils.html":{},"coverage.html":{}}}],["table/shared/table.model.ts",{"_index":7,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["table_index_column_name",{"_index":36,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tableassignment",{"_index":580,"title":{},"body":{"index.html":{}}}],["tabledataservice",{"_index":313,"title":{"injectables/TableDataService.html":{}},"body":{"injectables/TableDataService.html":{},"coverage.html":{}}}],["tablerow",{"_index":94,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["tablerows",{"_index":495,"title":{},"body":{"classes/TableUtils.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["tablespec",{"_index":87,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["tablespect",{"_index":82,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"miscellaneous/typealiases.html":{}}}],["tableutils",{"_index":410,"title":{"classes/TableUtils.html":{}},"body":{"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{}}}],["tableutils.flattenobjecttorow(o[key",{"_index":510,"title":{},"body":{"classes/TableUtils.html":{}}}],["tableutils.infercolumntypes(data.slice(0",{"_index":453,"title":{},"body":{"injectables/TableDataService.html":{}}}],["tableview",{"_index":69,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["tableviewcomponent",{"_index":199,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"coverage.html":{}}}],["tableviews",{"_index":425,"title":{},"body":{"injectables/TableDataService.html":{}}}],["take",{"_index":618,"title":{},"body":{"index.html":{}}}],["tap",{"_index":408,"title":{},"body":{"injectables/TableDataService.html":{}}}],["tap(table",{"_index":437,"title":{},"body":{"injectables/TableDataService.html":{}}}],["template",{"_index":105,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["templateurl",{"_index":126,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["terminal",{"_index":623,"title":{},"body":{"index.html":{}}}],["this._categories",{"_index":178,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this._currentpage",{"_index":301,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this._totalitems",{"_index":295,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.cache.get(url",{"_index":419,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.cache.has(url",{"_index":439,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.cache.set(url",{"_index":444,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.category",{"_index":186,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.categorychange.emit(this.category",{"_index":187,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.datasourcechanged.emit(src",{"_index":461,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.datasourcechanged.emit(url",{"_index":449,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.filter",{"_index":180,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.filterchange.emit(this.filter",{"_index":183,"title":{},"body":{"components/FilterInputComponent.html":{}}}],["this.gettabledata$(url).pipe",{"_index":434,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.http.get(url",{"_index":417,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.delete(url",{"_index":445,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.get(url",{"_index":433,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.ongoingrequests.set(url",{"_index":451,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.pagechanged.emit",{"_index":304,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.pageitems",{"_index":300,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.pageitemschange.emit(this.pageitems",{"_index":307,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.processtabledata(response",{"_index":436,"title":{},"body":{"injectables/TableDataService.html":{}}}],["this.setpage(0",{"_index":296,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.setpage(this._currentpage",{"_index":305,"title":{},"body":{"components/PaginationComponent.html":{}}}],["this.totalpages",{"_index":303,"title":{},"body":{"components/PaginationComponent.html":{}}}],["through",{"_index":71,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["time",{"_index":428,"title":{},"body":{"injectables/TableDataService.html":{},"index.html":{}}}],["total",{"_index":206,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalitems",{"_index":234,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalitems(n",{"_index":294,"title":{},"body":{"components/PaginationComponent.html":{}}}],["totalpages",{"_index":226,"title":{},"body":{"components/PaginationComponent.html":{}}}],["track",{"_index":189,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["tracking",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":107,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["triggers",{"_index":210,"title":{},"body":{"components/PaginationComponent.html":{}}}],["true",{"_index":123,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["tslib",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":423,"title":{},"body":{"injectables/TableDataService.html":{}}}],["type",{"_index":24,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"classes/TableUtils.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":658,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":505,"title":{},"body":{"classes/TableUtils.html":{}}}],["types",{"_index":93,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"classes/TableUtils.html":{},"miscellaneous/typealiases.html":{}}}],["undefined",{"_index":520,"title":{},"body":{"classes/TableUtils.html":{}}}],["under",{"_index":588,"title":{},"body":{"index.html":{}}}],["update",{"_index":399,"title":{},"body":{"injectables/TableDataService.html":{}}}],["url",{"_index":97,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{}}}],["use",{"_index":31,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":9,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"index.html":{}}}],["using",{"_index":640,"title":{},"body":{"index.html":{}}}],["utils",{"_index":412,"title":{},"body":{"injectables/TableDataService.html":{}}}],["utils.ts",{"_index":465,"title":{},"body":{"classes/TableUtils.html":{},"coverage.html":{}}}],["utils.ts:15",{"_index":473,"title":{},"body":{"classes/TableUtils.html":{}}}],["utils.ts:37",{"_index":482,"title":{},"body":{"classes/TableUtils.html":{}}}],["utils.ts:67",{"_index":492,"title":{},"body":{"classes/TableUtils.html":{}}}],["v18",{"_index":631,"title":{},"body":{"index.html":{}}}],["validation",{"_index":29,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["value",{"_index":90,"title":{},"body":{"interfaces/ColumnSpec.html":{},"components/FilterInputComponent.html":{},"interfaces/FilterState.html":{},"components/PaginationComponent.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{},"injectables/TableDataService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":194,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["variable",{"_index":549,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":660,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":475,"title":{},"body":{"classes/TableUtils.html":{},"index.html":{},"properties.html":{}}}],["view",{"_index":200,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{}}}],["view.component.ts",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["view/table",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["viewed",{"_index":50,"title":{},"body":{"interfaces/ColumnSpec.html":{},"interfaces/FilterState.html":{},"interfaces/RangeState.html":{},"interfaces/SortState.html":{},"interfaces/Table.html":{}}}],["views",{"_index":323,"title":{},"body":{"injectables/TableDataService.html":{}}}],["void",{"_index":166,"title":{},"body":{"components/FilterInputComponent.html":{},"components/PaginationComponent.html":{},"injectables/TableDataService.html":{}}}],["vscode",{"_index":599,"title":{},"body":{"index.html":{}}}],["vscode's",{"_index":603,"title":{},"body":{"index.html":{}}}],["wait",{"_index":430,"title":{},"body":{"injectables/TableDataService.html":{}}}],["whenever",{"_index":212,"title":{},"body":{"components/PaginationComponent.html":{}}}],["without",{"_index":628,"title":{},"body":{"index.html":{}}}],["working",{"_index":468,"title":{},"body":{"classes/TableUtils.html":{}}}],["yes",{"_index":379,"title":{},"body":{"injectables/TableDataService.html":{}}}],["you're",{"_index":652,"title":{},"body":{"index.html":{}}}],["zone.js",{"_index":573,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ColumnSpec.html":{"url":"interfaces/ColumnSpec.html","title":"interface - ColumnSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ColumnSpec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dataType\n                                        \n                                \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data type of the column data. May be used in the future for input validation. Currently not in use.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name to display in the header\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The property name of the row\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FilterInputComponent.html":{"url":"components/FilterInputComponent.html","title":"component - FilterInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FilterInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/baader-table/components/filter-input/filter-input.component.ts\n\n\n\n    \n        Description\n    \n    \n        A generic component that can be used to create filter input fields.\nOptional features are:\n\nProvide a list of categories to select from for the filter\n\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                baader-filter-input\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./filter-input.component.html\n            \n\n\n\n            \n                styleUrl\n                ./filter-input.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _categories\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filterValueChanged\n                            \n                            \n                                resetFilter\n                            \n                            \n                                selectedCategoryChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                categoryDefaultValue\n                            \n                            \n                                categoryLabel\n                            \n                            \n                                categorySelect\n                            \n                            \n                                filter\n                            \n                            \n                                filterLabel\n                            \n                            \n                                resetLabel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                categoryChange\n                            \n                            \n                                filterChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    categorySelect\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        category\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        categoryDefaultValue\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:34\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        categoryLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"In Category:\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        categorySelect\n                    \n                \n                \n                    \n                        Type :     [] | null\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filter\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filterLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Search:\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:31\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resetLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Clear\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:36\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        categoryChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filterChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:29\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        filterValueChanged\n                        \n                    \n                \n            \n            \n                \nfilterValueChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:42\n                        \n                    \n\n\n            \n                \n                        Input field for filter string changed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetFilter\n                        \n                    \n                \n            \n            \n                \nresetFilter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:59\n                        \n                    \n\n\n            \n                \n                        Clear all filter parameters\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedCategoryChanged\n                        \n                    \n                \n            \n            \n                \nselectedCategoryChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:51\n                        \n                    \n\n\n            \n                \n                        Which category to filter on changed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        categorySelect\n                    \n                \n\n\n                \n                    \n                        setcategorySelect(categories: string[] | null)\n                    \n                \n                            \n                                \n                                    Defined in src/app/baader-table/components/filter-input/filter-input.component.ts:20\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            categories\n                                                    \n                                                            \n                                                                        string[] | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n\n/**\n * A generic component that can be used to create filter input fields.\n * Optional features are:\n *  - Provide a list of categories to select from for the filter\n */\n@Component({\n  selector: 'baader-filter-input',\n  standalone: true,\n  imports: [FormsModule],\n  templateUrl: './filter-input.component.html',\n  styleUrl: './filter-input.component.css'\n})\nexport class FilterInputComponent {\n\n  @Input()\n  set categorySelect(categories: string[] | null) {\n    this._categories = categories;\n  }\n  _categories: string[] | null = null;\n\n  @Input() category = \"\";\n  @Output() categoryChange = new EventEmitter();\n\n  @Input() filter = \"\";\n  @Output() filterChange = new EventEmitter();\n\n  @Input() filterLabel = \"Search:\";\n  @Input() categoryLabel = \"In Category:\";\n\n  @Input() categoryDefaultValue = \"\";\n\n  @Input() resetLabel = \"Clear\";\n\n\n  /**\n   * Input field for filter string changed\n   */\n  filterValueChanged(event: Event) {\n    this.filter = (event.target as HTMLInputElement).value;\n    this.filterChange.emit(this.filter);\n  }\n\n  /**\n   * Which category to filter on changed \n   * @param index index of the _categories array\n   */\n  selectedCategoryChanged(event: Event) {\n    this.category = (event.target as HTMLInputElement).value;\n    this.categoryChange.emit(this.category);\n  }\n\n  /**\n   * Clear all filter parameters\n   */\n  resetFilter() {\n    this.category = \"\";\n    this.filter = \"\";\n    this.categoryChange.emit(this.category);\n    this.filterChange.emit(this.filter);\n  }\n\n}\n\n    \n\n    \n        \n    \n        {{filterLabel}}\n    \n    \n        \n    \n    @if (_categories) {\n    \n        \n            {{categoryLabel}}\n        \n        \n            \n                @if (_categories.indexOf(categoryDefaultValue) === -1) {\n                \n                }\n                @for (category of _categories; track $index) {\n                {{category}}\n                }\n            \n        \n    \n    }\n    \n        {{resetLabel}}\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{filterLabel}}                        @if (_categories) {                        {{categoryLabel}}                                            @if (_categories.indexOf(categoryDefaultValue) === -1) {                                }                @for (category of _categories; track $index) {                {{category}}                }                            }            {{resetLabel}}    '\n    var COMPONENTS = [{'name': 'FilterInputComponent', 'selector': 'baader-filter-input'},{'name': 'PaginationComponent', 'selector': 'baader-pagination'},{'name': 'TableViewComponent', 'selector': 'baader-table-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FilterInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FilterState.html":{"url":"interfaces/FilterState.html","title":"interface - FilterState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FilterState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the search function state of a TableView\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            filter\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The column to search in (search through all columns if empty string)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filter:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The search string to filter on.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PaginationComponent.html":{"url":"components/PaginationComponent.html","title":"component - PaginationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PaginationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/baader-table/components/pagination/pagination.component.ts\n\n\n\n    \n        Description\n    \n    \n        Generic Pagination component.\nConfigured by setting total items and items per page.\nTriggers pageChanges event whenever the selected page changes.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                baader-pagination\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./pagination.component.html\n            \n\n\n\n            \n                styleUrl\n                ./pagination.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _currentPage\n                            \n                            \n                                _totalItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePage\n                            \n                            \n                                navButtonKbd\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                pageItemsChanged\n                            \n                            \n                                setPage\n                            \n                            \n                                totalPages\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                nextLabel\n                            \n                            \n                                pageItemOptions\n                            \n                            \n                                pageItems\n                            \n                            \n                                pageItemsLabel\n                            \n                            \n                                pageLabel\n                            \n                            \n                                previousLabel\n                            \n                            \n                                showPageItemsSelection\n                            \n                            \n                                totalItems\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                pageChanged\n                            \n                            \n                                pageItemsChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    totalItems\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        nextLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"→\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemOptions\n                    \n                \n                \n                    \n                        Type :     {}\n\n                    \n                \n                \n                    \n                        Default value : [5, 10, 20, 50, 100]\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItems\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemsLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Show Items\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Page\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        previousLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"←\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showPageItemsSelection\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        totalItems\n                    \n                \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:31\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        pageChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:35\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageItemsChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:22\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changePage\n                        \n                    \n                \n            \n            \n                \nchangePage(direction: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:75\n                        \n                    \n\n\n            \n                \n                        Increase/decrease page by n='direction' pages\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    number of pages to change (positive or negative)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navButtonKbd\n                        \n                    \n                \n            \n            \n                \nnavButtonKbd(direction: number, keyEvent: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:94\n                        \n                    \n\n\n            \n                \n                        Make the \"Next\" and \"Prev\" buttons accessible by keyboard events.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    number of pages to change (positive or negative)\n\n                                            \n                                        \n                                        \n                                                keyEvent\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    check if key event is a \"confirm-like\" button.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageItemsChanged\n                        \n                    \n                \n            \n            \n                \npageItemsChanged(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:83\n                        \n                    \n\n\n            \n                \n                        Handle the number of items per page selector value change.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Event from HTML Input element (selector) containing selected value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPage\n                        \n                    \n                \n            \n            \n                \nsetPage(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:63\n                        \n                    \n\n\n            \n                \n                        Set desired page directly (i.e. from dropdown or externally)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    page to set to\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPages\n                        \n                    \n                \n            \n            \n                \ntotalPages()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/components/pagination/pagination.component.ts:53\n                        \n                    \n\n\n            \n                \n                        Calculate total number of pages\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                total number needed for all data\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _currentPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/pagination/pagination.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _totalItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/components/pagination/pagination.component.ts:42\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        totalItems\n                    \n                \n\n\n                \n                    \n                        settotalItems(n: number | null)\n                    \n                \n                            \n                                \n                                    Defined in src/app/baader-table/components/pagination/pagination.component.ts:31\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            n\n                                                    \n                                                            \n                                                                        number | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RangeState } from '../../shared/table.model';\n\n/**\n * Generic Pagination component.\n * Configured by setting total items and items per page.\n * Triggers pageChanges event whenever the selected page changes.\n */\n@Component({\n  selector: 'baader-pagination',\n  standalone: true,\n  imports: [FormsModule],\n  templateUrl: './pagination.component.html',\n  styleUrl: './pagination.component.css'\n})\nexport class PaginationComponent implements OnInit {\n\n  @Input()\n  pageItems = 10;\n\n  @Output() pageItemsChange = new EventEmitter();\n\n  @Input()\n  pageItemOptions = [5, 10, 20, 50, 100];\n\n  @Input()\n  showPageItemsSelection = true;\n\n  @Input()\n  set totalItems(n: number | null) {\n    this._totalItems = n;\n  }\n\n  @Output() pageChanged = new EventEmitter();\n\n  @Input() pageLabel = \"Page\";\n  @Input() previousLabel = \"←\";\n  @Input() nextLabel = \"→\";\n  @Input() pageItemsLabel = \"Show Items\";\n\n  _totalItems: number | null = null;\n  _currentPage = 0;\n\n  ngOnInit() {\n    this.setPage(0);\n  }\n\n  /**\n   * Calculate total number of pages\n   * @returns total number needed for all data\n   */\n  totalPages(): number {\n    if (this._totalItems === null)\n      return 1;\n    return Math.max(1, Math.ceil(this._totalItems / this.pageItems));\n  }\n\n  /**\n   * Set desired page directly (i.e. from dropdown or externally)\n   * @param page page to set to\n   */\n  setPage(page: number) {\n    this._currentPage = Math.min(Math.max(0, page), this.totalPages() - 1);\n    this.pageChanged.emit({\n      start: this._currentPage * this.pageItems,\n      length: this.pageItems\n    });\n  }\n\n  /**\n   * Increase/decrease page by n='direction' pages\n   * @param direction number of pages to change (positive or negative)\n   */\n  changePage(direction: number) {\n    this.setPage(this._currentPage + direction);\n  }\n\n  /**\n   * Handle the number of items per page selector value change.\n   * @param event Event from HTML Input element (selector) containing selected value\n   */\n  pageItemsChanged(event: Event) {\n    this.pageItems = Number((event.target as HTMLInputElement).value);\n    this.pageItemsChange.emit(this.pageItems);\n    this.setPage(this._currentPage);\n  }\n\n  /**\n   * Make the \"Next\" and \"Prev\" buttons accessible by keyboard events.\n   * @param direction number of pages to change (positive or negative)\n   * @param keyEvent check if key event is a \"confirm-like\" button.\n   */\n  navButtonKbd(direction: number, keyEvent: KeyboardEvent) {\n    if (keyEvent.code === \"Space\" || keyEvent.code === \"Enter\") {\n      this.setPage(this._currentPage + direction);\n    }\n  }\n}\n\n    \n\n    \n        \n    \n        \n        {{previousLabel}}\n        {{pageLabel}} {{_currentPage+1}} / {{totalPages()}}\n        {{nextLabel}}\n        @if (showPageItemsSelection) {\n        \n            \n                {{pageItemsLabel}}\n            \n            \n                @for (n of pageItemOptions; track $index) {\n                {{n}}\n                }\n            \n        \n        }\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{previousLabel}}        {{pageLabel}} {{_currentPage+1}} / {{totalPages()}}        {{nextLabel}}        @if (showPageItemsSelection) {                                    {{pageItemsLabel}}                                        @for (n of pageItemOptions; track $index) {                {{n}}                }                            }    '\n    var COMPONENTS = [{'name': 'FilterInputComponent', 'selector': 'baader-filter-input'},{'name': 'PaginationComponent', 'selector': 'baader-pagination'},{'name': 'TableViewComponent', 'selector': 'baader-table-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PaginationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RangeState.html":{"url":"interfaces/RangeState.html","title":"interface - RangeState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RangeState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the range of data a table is looking at.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            start\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The number of rows to show after.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The index of the first row to look at.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SortState.html":{"url":"interfaces/SortState.html","title":"interface - SortState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SortState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents how a table is sorted.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The column to sort by (empty string means default sorting)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:         ColumnSort\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColumnSort\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The direction to sort in.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Table.html":{"url":"interfaces/Table.html","title":"interface - Table","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Table\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table.model.ts\n        \n\n\n            \n                Description\n            \n            \n                A Table is the combination of row data data and description of it's columns.\nOptionally, the data source url can be stored.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            spec\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         TableRow[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TableRow[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        spec\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        spec:         TableSpec\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TableSpec\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const TABLE_INDEX_COLUMN_NAME = '__index';\n\n/**\n * Describe sorting state of a column.\n */\nexport enum ColumnSort {\n    NONE = 0,\n    DESC = 1,\n    ASC = 2\n}\n\n/**\n * Used to describe columns, preferred display names in header column, and to describe the dataType in the column.\n */\nexport interface ColumnSpec {\n    /**\n     * The property name of the row\n     */\n    name: string;\n\n    /**\n     * The name to display in the header\n     */\n    displayName: string;\n\n    /**\n     * The data type of the column data. May be used in the future for input validation. Currently not in use.\n     */\n    dataType?: string;\n}\n\n/**\n * The following interfaces represent the state of the data viewed,\n * I.e. by which column they are sorted or filtered, what range of the data is looked at (i.e. based on pagination).\n */\n\n/**\n * Represents how a table is sorted. \n */\nexport interface SortState {\n    /**\n     * The column to sort by (empty string means default sorting)\n     */\n    column: string;\n\n    /**\n     * The direction to sort in.\n     */\n    mode: ColumnSort;\n}\n\n/**\n * Represents the search function state of a TableView\n */\nexport interface FilterState {\n    /**\n     * The column to search in (search through all columns if empty string)\n     */\n    column: string;\n\n    /**\n     * The search string to filter on.\n     */\n    filter: string;\n}\n\n/**\n * Represents the range of data a table is looking at.\n */\nexport interface RangeState {\n    /**\n     * The index of the first row to look at.\n     */\n    start: number;\n\n    /**\n     * The number of rows to show after.\n     */\n    length: number;\n}\n\n/**\n * A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs \n */\nexport type TableSpec = Record\n\n/**\n * A table row is a set of key value pairs with these possible value types.\n */\nexport type TableRow = Record;\n\n/**\n * A Table is the combination of row data data and description of it's columns.\n * Optionally, the data source url can be stored.\n */\nexport interface Table {\n    spec: TableSpec;\n    data: TableRow[];\n    url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TableDataService.html":{"url":"injectables/TableDataService.html","title":"injectable - TableDataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TableDataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/services/table-data.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for fetching & processing table data.\nTable data is cached, such that multiple table views can be created of the same data.\nThere is a placeholder for saving changes to API/File. Further implementation details would depend on the context.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cache\n                            \n                            \n                                dataSourceChanged\n                            \n                            \n                                    Private\n                                ongoingRequests\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData$\n                            \n                            \n                                getTable$\n                            \n                            \n                                getTableData$\n                            \n                            \n                                isCached\n                            \n                            \n                                processTableData\n                            \n                            \n                                saveTableChages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/baader-table/services/table-data.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData$\n                        \n                    \n                \n            \n            \n                \ngetData$(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Fetch json data from some url (such as an API endpoint)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL to fetch data from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of the fetched data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTable$\n                        \n                    \n                \n            \n            \n                \ngetTable$(url: string, cached)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Fetch data from an endpoint with table data and process it.\nCache the results.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    the url to fetch data from. Response data must be a table-like response with an array as the root object\n\n                                            \n                                        \n                                        \n                                                cached\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    if available, use a cached result (request will still be cached/overwrite cached copies)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable of the table being fetched and processed\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTableData$\n                        \n                    \n                \n            \n            \n                \ngetTableData$(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Fetch json table data from some url (such as an API endpoint)\nExpects the root element of the response to be an array-of-records-type (use getData$() instead otherwise)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The URL to fetch data from.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of the fetched table rows.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCached\n                        \n                    \n                \n            \n            \n                \nisCached(url?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Is a table data of this url in the cache.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    table data url\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        processTableData\n                        \n                    \n                \n            \n            \n                \nprocessTableData(raw: object[], src?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Process generic array object to Table data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                raw\n                                            \n                                                        object[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    array of objects\n\n                                            \n                                        \n                                        \n                                                src\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    string to describe the source (url) of the Table\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Table\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveTableChages\n                        \n                    \n                \n            \n            \n                \nsaveTableChages(src: string, newRowData: TableRow)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/services/table-data.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Save a changed row: implemented here as a simple replace operation on the cached memory.\nFor a proper implementation this would need more context to properly update the data (i.e. a REST API definition).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                src\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the url of the table in cache\n\n                                            \n                                        \n                                        \n                                                newRowData\n                                            \n                                                            TableRow\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the new row data (will replace the row based on the __index field in newRowData)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataSourceChanged\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new EventEmitter()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ongoingRequests\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map>()\n                    \n                \n                    \n                        \n                                Defined in src/app/baader-table/services/table-data.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map, of, shareReplay, tap } from 'rxjs';\nimport { TABLE_INDEX_COLUMN_NAME, Table, TableRow } from '../shared/table.model';\nimport { TableUtils } from '../shared/table-utils';\nimport { environment } from '../../../environments/environment';\n\n/**\n * Service for fetching & processing table data. \n * Table data is cached, such that multiple table views can be created of the same data.\n * There is a placeholder for saving changes to API/File. Further implementation details would depend on the context.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableDataService {\n\n  constructor(private http: HttpClient) { }\n\n  private cache = new Map();\n  private ongoingRequests = new Map>();\n\n  dataSourceChanged = new EventEmitter();\n\n  /**\n   * Fetch json table data from some url (such as an API endpoint)\n   * Expects the root element of the response to be an array-of-records-type (use getData$() instead otherwise)\n   * @param url The URL to fetch data from.\n   * @returns An Observable of the fetched table rows.\n   */\n  getTableData$(url: string): Observable {\n    return this.http.get(url);\n  }\n\n  /**\n   * Fetch json data from some url (such as an API endpoint)\n   * @param url The URL to fetch data from.\n   * @returns An Observable of the fetched data.\n   */\n  getData$(url: string): Observable {\n    return this.http.get(url);\n  }\n\n  /**\n   * Fetch data from an endpoint with table data and process it.\n   * Cache the results.\n   * @param url the url to fetch data from. Response data must be a table-like response with an array as the root object\n   * @param cached if available, use a cached result (request will still be cached/overwrite cached copies)\n   * @returns An Observable of the table being fetched and processed\n   */\n  getTable$(url: string, cached = true): Observable {\n    const cachedResponse = this.cache.get(url);\n    if (cached && cachedResponse) {\n      return of(cachedResponse);\n    }\n\n    // By caching ongoing request, two clients (i.e. TableViews) requesting the same location at the same time\n    // can share and wait for a singe http request.\n    const ongoingRequest = this.ongoingRequests.get(url);\n    if (ongoingRequest) {\n      return ongoingRequest;\n    }\n\n    const request$ = this.getTableData$(url).pipe(\n      map(response => {\n        return this.processTableData(response, url)\n      }),\n      tap(table => {\n        const notify_changes = this.cache.has(url);\n        if (!environment.prod)\n          console.log(`Cached ${url} with a table of ${Object.keys(table.spec).length} columns and ${table.data.length} rows`);\n        this.cache.set(url, table);\n        this.ongoingRequests.delete(url);\n\n        if (notify_changes) {\n          if (!environment.prod)\n            console.log(`Updated previously cached table. Notifying of changes`);\n          this.dataSourceChanged.emit(url);\n        }\n      }),\n      shareReplay(1)\n    );\n\n    this.ongoingRequests.set(url, request$);\n    return request$;\n  }\n\n  /**\n   * Process generic array object to Table data\n   * @param raw array of objects\n   * @param src string to describe the source (url) of the Table\n   * @returns \n   */\n  processTableData(raw: object[], src?: string): Table {\n    const data = raw.map(TableUtils.flattenObjectToRow);\n\n    const spec = TableUtils.inferColumnTypes(data.slice(0, 10));\n\n    for (let idx = 0; idx  (r[TABLE_INDEX_COLUMN_NAME] == newRowData[TABLE_INDEX_COLUMN_NAME]));\n    if (!environment.prod)\n      console.log(`Replacing row ${replaceIndex} Old Data / New Data:`, table!.data[replaceIndex], newRowData);\n    table!.data[replaceIndex] = newRowData;\n    this.dataSourceChanged.emit(src);\n  }\n\n  /**\n   * Is a table data of this url in the cache.\n   * @param url table data url\n   * @returns \n   */\n  isCached(url?: string): boolean {\n    if (!url)\n      return false;\n    return this.cache.has(url);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TableUtils.html":{"url":"classes/TableUtils.html","title":"class - TableUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TableUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/baader-table/shared/table-utils.ts\n        \n\n\n            \n                Description\n            \n            \n                Reusable static methods for working with table data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                flattenObjectToRow\n                            \n                            \n                                    Static\n                                inferColumnTypes\n                            \n                            \n                                    Static\n                                sortTableFn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        flattenObjectToRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    flattenObjectToRow(o: object)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:15\n                        \n                    \n\n\n            \n                \n                        Return a flattened version of an object, such that all properties in o['a']['b']['c'] are\nproperties o['a.b.c'] in the result\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                o\n                                            \n                                                            object\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An object to flatten.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TableRow\n\n                        \n                            \n                                A flattened copy of the object of type TableRow\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        inferColumnTypes\n                        \n                    \n                \n            \n            \n                \n                        \n                    inferColumnTypes(rows: TableRow[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:37\n                        \n                    \n\n\n            \n                \n                        Infer data types in the table columns by analysing multiple rows of a table\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                rows\n                                            \n                                                            TableRow[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    table row data in flattened form (can be a subset of the table).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TableSpec\n\n                        \n                            \n                                a TableSpec object with an entry for each column by name, describing column data type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        sortTableFn\n                        \n                    \n                \n            \n            \n                \n                        \n                    sortTableFn(columnName: string, sortMode: ColumnSort)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/baader-table/shared/table-utils.ts:67\n                        \n                    \n\n\n            \n                \n                        Generate a sort function that compares TableRows based on property columnName.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                columnName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the column to compare in the sort fn\n\n                                            \n                                        \n                                        \n                                                sortMode\n                                            \n                                                            ColumnSort\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Sort direction, either ColumnSort.ASC or ColumnSort.DESC\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                a sort function\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ColumnSpec, TableSpec, TableRow, ColumnSort } from \"./table.model\";\n\n\n/**\n * Reusable static methods for working with table data\n */\nexport class TableUtils {\n\n  /**\n   * Return a flattened version of an object, such that all properties in o['a']['b']['c'] are\n   * properties o['a.b.c'] in the result\n   * @param o An object to flatten.\n   * @returns A flattened copy of the object of type TableRow\n   */\n  static flattenObjectToRow(o: object): TableRow {\n    const o_flat: TableRow = {};\n    for (const key of Object.keys(o) as (keyof typeof o)[]) {\n      // This will flatten arrays and objects alike\n      if (typeof (o[key]) === 'object' && o[key] !== null) {\n        const nested = TableUtils.flattenObjectToRow(o[key]);\n        // nestedKey is either property name of object or index of array.\n        for (const nestedKey of Object.keys(nested)) {\n          o_flat[`${key}.${nestedKey}`] = nested[nestedKey];\n        }\n      } else {\n        o_flat[key] = o[key];\n      }\n    }\n    return o_flat;\n  }\n\n  /**\n   * Infer data types in the table columns by analysing multiple rows of a table\n   * @param rows table row data in flattened form (can be a subset of the table).\n   * @returns a TableSpec object with an entry for each column by name, describing column data type.\n   */\n  static inferColumnTypes(rows: TableRow[]): TableSpec {\n    const columns: TableSpec = {};\n    for (const row of rows) {\n      for (const key in row) {\n        const dataType = typeof row[key];\n\n        if (row[key] === null) // Do not infer column type from missing data\n          continue;\n\n        if (columns[key] === undefined) {\n          columns[key] = {\n            name: key,\n            displayName: key,\n            dataType: dataType,\n            sort: ColumnSort.NONE\n          } as ColumnSpec;\n        } else if (columns[key].dataType !== dataType) {\n          columns[key].dataType = \"mixed\";\n        }\n      }\n    }\n    return columns;\n  }\n\n  /**\n   * Generate a sort function that compares TableRows based on property columnName.\n   * @param columnName Name of the column to compare in the sort fn\n   * @param sortMode Sort direction, either ColumnSort.ASC or ColumnSort.DESC\n   * @returns a sort function\n   */\n  static sortTableFn(columnName: string, sortMode: ColumnSort): (a: TableRow, b: TableRow) => number {\n    return (a, b) => {\n      const aval = a[columnName];\n      const bval = b[columnName];\n      let cval = 0;\n      if (bval === null && aval === null) {\n        cval = 0;\n      } else if (aval !== null && bval !== null && aval > bval || aval === null && bval !== null) {\n        cval = 1;\n      } else if (aval !== null && bval !== null && aval \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/baader-table/components/filter-input/filter-input.component.ts\n            \n            component\n            FilterInputComponent\n            \n                28 %\n                (4/14)\n            \n        \n        \n            \n                \n                src/app/baader-table/components/pagination/pagination.component.ts\n            \n            component\n            PaginationComponent\n            \n                31 %\n                (6/19)\n            \n        \n        \n            \n                \n                src/app/baader-table/components/table-view/table-view.component.ts\n            \n            component\n            TableViewComponent\n            \n                38 %\n                (23/60)\n            \n        \n        \n            \n                \n                src/app/baader-table/services/table-data.service.ts\n            \n            injectable\n            TableDataService\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table-utils.ts\n            \n            class\n            TableUtils\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            ColumnSpec\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            FilterState\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            RangeState\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            SortState\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            interface\n            Table\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/baader-table/shared/table.model.ts\n            \n            variable\n            TABLE_INDEX_COLUMN_NAME\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.0.0\n        \n            @angular/cdk : ^18.0.1\n        \n            @angular/common : ^18.0.0\n        \n            @angular/compiler : ^18.0.0\n        \n            @angular/core : ^18.0.0\n        \n            @angular/forms : ^18.0.0\n        \n            @angular/platform-browser : ^18.0.0\n        \n            @angular/platform-browser-dynamic : ^18.0.0\n        \n            @angular/router : ^18.0.0\n        \n            marked : ^12.0.2\n        \n            ngx-markdown : ^18.0.0\n        \n            primeflex : ^3.3.1\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ColumnSort   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ColumnSort\n                    \n                \n                    \n                        \n                            Describe sorting state of a column.\n\n                        \n                    \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nTableAssignment\nThis is a programming assinment. For details on the assignment, see public/docs/description.md. \nMy report on the assignment can be found under public/docs/report.md. \nThe documentation of the table module can be found here: jankolkmeier.github.io/table_assignment. \nThe angular project was generated with Angular CLI version 18.0.1.\nLive Demo\nA live version may still be running here.\nUse with as VSCode Dev Container\nThis project is a docker container that can be used with VSCode's Dev Container feature. \nMake sure you have Docker Desktop and the Dev Containers Extension installed for VSCode.\nClone this project and open the folder with VSCode, then press ctrl+shift+p and run Dev Containers: Rebuild and Reopen in Container. This will take a while for the first time.\nThis should also install all the project dependencies (i.e it automatically runs npm install).\nThen open a terminal in the dev container and follow the instructions under Development Server.\nRun without a Dev Container\nMake sure you have a compatible node version and the angular v18 client installed. If not, follow these instructions.\nClone this project and open a terminal inside the project folder. Run npm install to install all dependencies.\nThen follow the instructions under Development Server.\nRunning Development Server\nRun ng serve --poll 500 to host the application using the dev server.\nThe port is :4342. This container is configured to forward this port to your machine.\nThe application should be available under http://localhost:4342/ once the dev server is running.\nNote that for Dev Container compatibility, this dev server is configured to listen to host 0.0.0.0 (all interfaces). So beware if you're running this outside of a docker container.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    3 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TableRow   (src/.../table.model.ts)\n                        \n                        \n                            TableSpec   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n    \n        \n            \n                \n                    \n                    TableRow\n                \n            \n            \n                \n                    A table row is a set of key value pairs with these possible value types.\n\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TableSpec\n                \n            \n            \n                \n                    A TableSpect describes a table by it's columns i.e. a set of ColumnSpecs\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TABLE_INDEX_COLUMN_NAME   (src/.../table.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/baader-table/shared/table.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TABLE_INDEX_COLUMN_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__index'\n                    \n                \n\n            \n                \n                    Use this string to create a tracking entry for row data.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
